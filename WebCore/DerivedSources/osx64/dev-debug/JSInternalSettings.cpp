/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSInternalSettings.h"

#include "ExceptionCode.h"
#include "InternalSettings.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTouchEventEmulationEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetStandardFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetSerifFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetSansSerifFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFixedFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCursiveFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFantasyFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetPictographFontFamily(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFontFallbackPrefersPictographs(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingWindowSizeOverride(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingFontScaleFactor(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCSSShapesEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCanStartMedia(JSC::ExecState*);
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetShouldDisplayTrackKind(JSC::ExecState*);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionShouldDisplayTrackKind(JSC::ExecState*);
#endif
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetDefaultVideoPosterURL(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTimeWithoutMouseMovementBeforeHidingControls(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetMediaTypeOverride(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetWirelessPlaybackDisabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetForcePendingWebGLPolicy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetPluginReplacementEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetEditingBehavior(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetShouldConvertPositionStyleOnCopy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetLangAttributeAwareFormControlUIEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetStorageBlockingPolicy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetImagesEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetAutoscrollForDragAndDropEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetBackgroundShouldExtendBeyondPage(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetScrollingTreeIncludesFrames(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetMinimumTimerInterval(JSC::ExecState*);

class JSInternalSettingsPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSInternalSettingsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSInternalSettingsPrototype* ptr = new (NotNull, JSC::allocateCell<JSInternalSettingsPrototype>(vm.heap)) JSInternalSettingsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSInternalSettingsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSInternalSettingsPrototypeTableValues[] =
{
    { "setTouchEventEmulationEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetTouchEventEmulationEnabled), (intptr_t) (1) },
    { "setStandardFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetStandardFontFamily), (intptr_t) (2) },
    { "setSerifFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetSerifFontFamily), (intptr_t) (2) },
    { "setSansSerifFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetSansSerifFontFamily), (intptr_t) (2) },
    { "setFixedFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetFixedFontFamily), (intptr_t) (2) },
    { "setCursiveFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetCursiveFontFamily), (intptr_t) (2) },
    { "setFantasyFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetFantasyFontFamily), (intptr_t) (2) },
    { "setPictographFontFamily", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetPictographFontFamily), (intptr_t) (2) },
    { "setFontFallbackPrefersPictographs", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetFontFallbackPrefersPictographs), (intptr_t) (1) },
    { "setTextAutosizingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetTextAutosizingEnabled), (intptr_t) (1) },
    { "setTextAutosizingWindowSizeOverride", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetTextAutosizingWindowSizeOverride), (intptr_t) (2) },
    { "setTextAutosizingFontScaleFactor", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetTextAutosizingFontScaleFactor), (intptr_t) (1) },
    { "setCSSShapesEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetCSSShapesEnabled), (intptr_t) (1) },
    { "setCanStartMedia", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetCanStartMedia), (intptr_t) (1) },
#if ENABLE(VIDEO_TRACK)
    { "setShouldDisplayTrackKind", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetShouldDisplayTrackKind), (intptr_t) (2) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
#if ENABLE(VIDEO_TRACK)
    { "shouldDisplayTrackKind", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionShouldDisplayTrackKind), (intptr_t) (1) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
    { "setDefaultVideoPosterURL", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetDefaultVideoPosterURL), (intptr_t) (1) },
    { "setTimeWithoutMouseMovementBeforeHidingControls", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetTimeWithoutMouseMovementBeforeHidingControls), (intptr_t) (1) },
    { "setMediaTypeOverride", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetMediaTypeOverride), (intptr_t) (1) },
    { "setWirelessPlaybackDisabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetWirelessPlaybackDisabled), (intptr_t) (1) },
    { "setForcePendingWebGLPolicy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetForcePendingWebGLPolicy), (intptr_t) (1) },
    { "setPluginReplacementEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetPluginReplacementEnabled), (intptr_t) (1) },
    { "setEditingBehavior", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetEditingBehavior), (intptr_t) (1) },
    { "setShouldConvertPositionStyleOnCopy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetShouldConvertPositionStyleOnCopy), (intptr_t) (1) },
    { "setLangAttributeAwareFormControlUIEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetLangAttributeAwareFormControlUIEnabled), (intptr_t) (1) },
    { "setStorageBlockingPolicy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetStorageBlockingPolicy), (intptr_t) (1) },
    { "setImagesEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetImagesEnabled), (intptr_t) (1) },
    { "setUseLegacyBackgroundSizeShorthandBehavior", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior), (intptr_t) (1) },
    { "setAutoscrollForDragAndDropEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetAutoscrollForDragAndDropEnabled), (intptr_t) (1) },
    { "setBackgroundShouldExtendBeyondPage", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetBackgroundShouldExtendBeyondPage), (intptr_t) (1) },
    { "setScrollingTreeIncludesFrames", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetScrollingTreeIncludesFrames), (intptr_t) (1) },
    { "setMinimumTimerInterval", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsPrototypeFunctionSetMinimumTimerInterval), (intptr_t) (1) },
};

const ClassInfo JSInternalSettingsPrototype::s_info = { "InternalSettingsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSInternalSettingsPrototype) };

void JSInternalSettingsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSInternalSettingsPrototypeTableValues, *this);
}

const ClassInfo JSInternalSettings::s_info = { "InternalSettings", &Base::s_info, 0, CREATE_METHOD_TABLE(JSInternalSettings) };

JSInternalSettings::JSInternalSettings(Structure* structure, JSDOMGlobalObject* globalObject, Ref<InternalSettings>&& impl)
    : JSInternalSettingsGenerated(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSInternalSettings::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSInternalSettingsPrototype::create(vm, globalObject, JSInternalSettingsPrototype::createStructure(vm, globalObject, JSInternalSettingsGenerated::getPrototype(vm, globalObject)));
}

JSObject* JSInternalSettings::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSInternalSettings>(vm, globalObject);
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTouchEventEmulationEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setTouchEventEmulationEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTouchEventEmulationEnabled(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetStandardFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setStandardFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStandardFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetSerifFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setSerifFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSerifFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetSansSerifFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setSansSerifFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSansSerifFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFixedFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setFixedFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFixedFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCursiveFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setCursiveFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCursiveFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFantasyFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setFantasyFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFantasyFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetPictographFontFamily(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setPictographFontFamily");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String family = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String script = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPictographFontFamily(family, script, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetFontFallbackPrefersPictographs(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setFontFallbackPrefersPictographs");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool preferPictographs = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFontFallbackPrefersPictographs(preferPictographs, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setTextAutosizingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTextAutosizingEnabled(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingWindowSizeOverride(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setTextAutosizingWindowSizeOverride");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    int width = toInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTextAutosizingWindowSizeOverride(width, height, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTextAutosizingFontScaleFactor(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setTextAutosizingFontScaleFactor");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    float fontScaleFactor = exec->argument(0).toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTextAutosizingFontScaleFactor(fontScaleFactor, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCSSShapesEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setCSSShapesEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCSSShapesEnabled(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetCanStartMedia(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setCanStartMedia");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCanStartMedia(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#if ENABLE(VIDEO_TRACK)
EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetShouldDisplayTrackKind(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setShouldDisplayTrackKind");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String kind = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool enabled = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplayTrackKind(kind, enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(VIDEO_TRACK)
EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionShouldDisplayTrackKind(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "shouldDisplayTrackKind");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String trackKind = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.shouldDisplayTrackKind(trackKind, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

#endif

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetDefaultVideoPosterURL(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setDefaultVideoPosterURL");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String poster = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDefaultVideoPosterURL(poster, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetTimeWithoutMouseMovementBeforeHidingControls(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setTimeWithoutMouseMovementBeforeHidingControls");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    double time = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTimeWithoutMouseMovementBeforeHidingControls(time, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetMediaTypeOverride(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setMediaTypeOverride");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String mediaTypeOverride = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaTypeOverride(mediaTypeOverride, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetWirelessPlaybackDisabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setWirelessPlaybackDisabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool available = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWirelessPlaybackDisabled(available);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetForcePendingWebGLPolicy(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setForcePendingWebGLPolicy");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool forced = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setForcePendingWebGLPolicy(forced, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetPluginReplacementEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setPluginReplacementEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPluginReplacementEnabled(enabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetEditingBehavior(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setEditingBehavior");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String behavior = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEditingBehavior(behavior, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetShouldConvertPositionStyleOnCopy(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setShouldConvertPositionStyleOnCopy");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool convert = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldConvertPositionStyleOnCopy(convert, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetLangAttributeAwareFormControlUIEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setLangAttributeAwareFormControlUIEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLangAttributeAwareFormControlUIEnabled(enabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetStorageBlockingPolicy(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setStorageBlockingPolicy");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String policy = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStorageBlockingPolicy(policy, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetImagesEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setImagesEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setImagesEnabled(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setUseLegacyBackgroundSizeShorthandBehavior");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUseLegacyBackgroundSizeShorthandBehavior(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetAutoscrollForDragAndDropEnabled(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setAutoscrollForDragAndDropEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAutoscrollForDragAndDropEnabled(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetBackgroundShouldExtendBeyondPage(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setBackgroundShouldExtendBeyondPage");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool hasExtendedBackground = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setBackgroundShouldExtendBeyondPage(hasExtendedBackground, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetScrollingTreeIncludesFrames(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setScrollingTreeIncludesFrames");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    bool enabled = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setScrollingTreeIncludesFrames(enabled, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsPrototypeFunctionSetMinimumTimerInterval(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSInternalSettings* castedThis = jsDynamicCast<JSInternalSettings*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "InternalSettings", "setMinimumTimerInterval");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettings::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    double intervalInSeconds = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMinimumTimerInterval(intervalInSeconds, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7InternalSettings@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16InternalSettingsE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, InternalSettings* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSInternalSettings>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7InternalSettings@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16InternalSettingsE[2];
#if COMPILER(CLANG)
    // If this fails InternalSettings does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(InternalSettings), InternalSettings_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // InternalSettings has subclasses. If InternalSettings has subclasses that get passed
    // to toJS() we currently require InternalSettings you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSInternalSettings>(globalObject, impl);
}


}
