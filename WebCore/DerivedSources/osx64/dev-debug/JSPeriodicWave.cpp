/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSPeriodicWave.h"

#include "JSDOMBinding.h"
#include "PeriodicWave.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsPeriodicWaveConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSPeriodicWavePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSPeriodicWavePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSPeriodicWavePrototype* ptr = new (NotNull, JSC::allocateCell<JSPeriodicWavePrototype>(vm.heap)) JSPeriodicWavePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSPeriodicWavePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSPeriodicWaveConstructor : public DOMConstructorObject {
private:
    JSPeriodicWaveConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSPeriodicWaveConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSPeriodicWaveConstructor* ptr = new (NotNull, JSC::allocateCell<JSPeriodicWaveConstructor>(vm.heap)) JSPeriodicWaveConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSPeriodicWaveConstructor::s_info = { "PeriodicWaveConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPeriodicWaveConstructor) };

JSPeriodicWaveConstructor::JSPeriodicWaveConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSPeriodicWaveConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSPeriodicWave::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("PeriodicWave"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSPeriodicWavePrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeriodicWaveConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSPeriodicWavePrototype::s_info = { "PeriodicWavePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPeriodicWavePrototype) };

void JSPeriodicWavePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSPeriodicWavePrototypeTableValues, *this);
}

const ClassInfo JSPeriodicWave::s_info = { "PeriodicWave", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPeriodicWave) };

JSPeriodicWave::JSPeriodicWave(Structure* structure, JSDOMGlobalObject* globalObject, Ref<PeriodicWave>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSPeriodicWave::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSPeriodicWavePrototype::create(vm, globalObject, JSPeriodicWavePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSPeriodicWave::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPeriodicWave>(vm, globalObject);
}

void JSPeriodicWave::destroy(JSC::JSCell* cell)
{
    JSPeriodicWave* thisObject = static_cast<JSPeriodicWave*>(cell);
    thisObject->JSPeriodicWave::~JSPeriodicWave();
}

JSPeriodicWave::~JSPeriodicWave()
{
    releaseImpl();
}

EncodedJSValue jsPeriodicWaveConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSPeriodicWavePrototype* domObject = jsDynamicCast<JSPeriodicWavePrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSPeriodicWave::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSPeriodicWave::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPeriodicWaveConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSPeriodicWaveOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSPeriodicWaveOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsPeriodicWave = jsCast<JSPeriodicWave*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsPeriodicWave->impl(), jsPeriodicWave);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, PeriodicWave* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSPeriodicWave>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to PeriodicWave.
    COMPILE_ASSERT(!__is_polymorphic(PeriodicWave), PeriodicWave_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSPeriodicWave>(globalObject, impl);
}

PeriodicWave* JSPeriodicWave::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSPeriodicWave*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(WEB_AUDIO)
