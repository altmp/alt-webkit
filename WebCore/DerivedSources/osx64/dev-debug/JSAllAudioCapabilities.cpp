/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSAllAudioCapabilities.h"

#include "AllAudioCapabilities.h"
#include "CapabilityRange.h"
#include "DOMStringList.h"
#include "JSCapabilityRange.h"
#include "JSDOMBinding.h"
#include "JSDOMStringList.h"
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsAllAudioCapabilitiesSourceId(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAllAudioCapabilitiesVolume(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSAllAudioCapabilitiesPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSAllAudioCapabilitiesPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAllAudioCapabilitiesPrototype* ptr = new (NotNull, JSC::allocateCell<JSAllAudioCapabilitiesPrototype>(vm.heap)) JSAllAudioCapabilitiesPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAllAudioCapabilitiesPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSAllAudioCapabilitiesPrototypeTableValues[] =
{
    { "sourceId", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAllAudioCapabilitiesSourceId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "volume", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAllAudioCapabilitiesVolume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSAllAudioCapabilitiesPrototype::s_info = { "AllAudioCapabilitiesPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAllAudioCapabilitiesPrototype) };

void JSAllAudioCapabilitiesPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAllAudioCapabilitiesPrototypeTableValues, *this);
}

const ClassInfo JSAllAudioCapabilities::s_info = { "AllAudioCapabilities", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAllAudioCapabilities) };

JSAllAudioCapabilities::JSAllAudioCapabilities(Structure* structure, JSDOMGlobalObject* globalObject, Ref<AllAudioCapabilities>&& impl)
    : JSMediaStreamCapabilities(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSAllAudioCapabilities::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAllAudioCapabilitiesPrototype::create(vm, globalObject, JSAllAudioCapabilitiesPrototype::createStructure(vm, globalObject, JSMediaStreamCapabilities::getPrototype(vm, globalObject)));
}

JSObject* JSAllAudioCapabilities::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAllAudioCapabilities>(vm, globalObject);
}

EncodedJSValue jsAllAudioCapabilitiesSourceId(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAllAudioCapabilities* castedThis = jsDynamicCast<JSAllAudioCapabilities*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAllAudioCapabilitiesPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AllAudioCapabilities", "sourceId");
        return throwGetterTypeError(*exec, "AllAudioCapabilities", "sourceId");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.sourceId());
    return JSValue::encode(result);
}


EncodedJSValue jsAllAudioCapabilitiesVolume(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAllAudioCapabilities* castedThis = jsDynamicCast<JSAllAudioCapabilities*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAllAudioCapabilitiesPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AllAudioCapabilities", "volume");
        return throwGetterTypeError(*exec, "AllAudioCapabilities", "volume");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.volume()));
    return JSValue::encode(result);
}


#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7AllAudioCapabilities@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore20AllAudioCapabilitiesE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, AllAudioCapabilities* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSAllAudioCapabilities>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7AllAudioCapabilities@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore20AllAudioCapabilitiesE[2];
#if COMPILER(CLANG)
    // If this fails AllAudioCapabilities does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(AllAudioCapabilities), AllAudioCapabilities_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // AllAudioCapabilities has subclasses. If AllAudioCapabilities has subclasses that get passed
    // to toJS() we currently require AllAudioCapabilities you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSAllAudioCapabilities>(globalObject, impl);
}


}

#endif // ENABLE(MEDIA_STREAM)
