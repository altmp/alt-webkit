/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGElementInstance.h"

#include "EventListener.h"
#include "JSDOMBinding.h"
#include "JSEventListener.h"
#include "JSSVGElement.h"
#include "JSSVGElementInstance.h"
#include "JSSVGUseElement.h"
#include "SVGElement.h"
#include "SVGElementInstance.h"
#include "SVGUseElement.h"
#include "ScriptExecutionContext.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGElementInstanceCorrespondingElement(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceCorrespondingUseElement(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceParentNode(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceFirstChild(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceLastChild(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstancePreviousSibling(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceNextSibling(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGElementInstanceOnabort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnabort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnblur(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnblur(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnclick(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnclick(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOncontextmenu(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOncontextmenu(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndblclick(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndblclick(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnfocus(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnfocus(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOninput(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOninput(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnkeydown(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnkeydown(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnkeypress(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnkeypress(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnkeyup(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnkeyup(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmousedown(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmousedown(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmouseenter(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmouseenter(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmouseleave(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmouseleave(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmousemove(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmousemove(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmouseout(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmouseout(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmouseover(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmouseover(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmouseup(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmouseup(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnmousewheel(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnmousewheel(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnwheel(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnwheel(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnbeforecut(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnbeforecut(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOncut(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOncut(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnbeforecopy(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnbeforecopy(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOncopy(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOncopy(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnbeforepaste(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnbeforepaste(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnpaste(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnpaste(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndragenter(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndragenter(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndragover(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndragover(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndragleave(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndragleave(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndrop(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndrop(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndragstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndragstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndrag(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndrag(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOndragend(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOndragend(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnreset(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnreset(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnresize(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnresize(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnscroll(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnscroll(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnsearch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnsearch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnselect(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnselect(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnselectstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnselectstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnsubmit(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnsubmit(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceOnunload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSVGElementInstanceOnunload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGElementInstanceConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSSVGElementInstancePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSSVGElementInstancePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGElementInstancePrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGElementInstancePrototype>(vm.heap)) JSSVGElementInstancePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGElementInstancePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSSVGElementInstanceConstructor : public DOMConstructorObject {
private:
    JSSVGElementInstanceConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSSVGElementInstanceConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSSVGElementInstanceConstructor* ptr = new (NotNull, JSC::allocateCell<JSSVGElementInstanceConstructor>(vm.heap)) JSSVGElementInstanceConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSSVGElementInstanceConstructor::s_info = { "SVGElementInstanceConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGElementInstanceConstructor) };

JSSVGElementInstanceConstructor::JSSVGElementInstanceConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGElementInstanceConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSVGElementInstance::getPrototype(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSSVGElementInstancePrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "correspondingElement", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceCorrespondingElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "correspondingUseElement", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceCorrespondingUseElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "parentNode", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceParentNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "firstChild", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceFirstChild), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "lastChild", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceLastChild), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "previousSibling", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstancePreviousSibling), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "nextSibling", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceNextSibling), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "onabort", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnabort) },
    { "onblur", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnblur), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnblur) },
    { "onchange", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnchange) },
    { "onclick", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnclick), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnclick) },
    { "oncontextmenu", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOncontextmenu), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOncontextmenu) },
    { "ondblclick", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndblclick), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndblclick) },
    { "onerror", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnerror) },
    { "onfocus", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnfocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnfocus) },
    { "oninput", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOninput), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOninput) },
    { "onkeydown", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnkeydown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnkeydown) },
    { "onkeypress", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnkeypress), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnkeypress) },
    { "onkeyup", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnkeyup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnkeyup) },
    { "onload", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnload) },
    { "onmousedown", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmousedown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmousedown) },
    { "onmouseenter", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmouseenter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmouseenter) },
    { "onmouseleave", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmouseleave), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmouseleave) },
    { "onmousemove", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmousemove), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmousemove) },
    { "onmouseout", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmouseout), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmouseout) },
    { "onmouseover", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmouseover), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmouseover) },
    { "onmouseup", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmouseup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmouseup) },
    { "onmousewheel", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnmousewheel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnmousewheel) },
    { "onwheel", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnwheel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnwheel) },
    { "onbeforecut", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnbeforecut), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnbeforecut) },
    { "oncut", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOncut), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOncut) },
    { "onbeforecopy", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnbeforecopy), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnbeforecopy) },
    { "oncopy", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOncopy), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOncopy) },
    { "onbeforepaste", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnbeforepaste), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnbeforepaste) },
    { "onpaste", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnpaste), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnpaste) },
    { "ondragenter", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndragenter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndragenter) },
    { "ondragover", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndragover), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndragover) },
    { "ondragleave", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndragleave), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndragleave) },
    { "ondrop", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndrop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndrop) },
    { "ondragstart", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndragstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndragstart) },
    { "ondrag", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndrag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndrag) },
    { "ondragend", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOndragend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOndragend) },
    { "onreset", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnreset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnreset) },
    { "onresize", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnresize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnresize) },
    { "onscroll", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnscroll), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnscroll) },
    { "onsearch", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnsearch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnsearch) },
    { "onselect", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnselect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnselect) },
    { "onselectstart", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnselectstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnselectstart) },
    { "onsubmit", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnsubmit), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnsubmit) },
    { "onunload", DontDelete | DontEnum | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGElementInstanceOnunload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGElementInstanceOnunload) },
};

WEBCORE_EXPORT const ClassInfo JSSVGElementInstancePrototype::s_info = { "SVGElementInstancePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGElementInstancePrototype) };

void JSSVGElementInstancePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGElementInstancePrototypeTableValues, *this);
}

WEBCORE_EXPORT const ClassInfo JSSVGElementInstance::s_info = { "SVGElementInstance", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGElementInstance) };

JSSVGElementInstance::JSSVGElementInstance(Structure* structure, JSDOMGlobalObject* globalObject, Ref<SVGElementInstance>&& impl)
    : JSEventTarget(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSSVGElementInstance::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGElementInstancePrototype::create(vm, globalObject, JSSVGElementInstancePrototype::createStructure(vm, globalObject, JSEventTarget::getPrototype(vm, globalObject)));
}

JSObject* JSSVGElementInstance::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGElementInstance>(vm, globalObject);
}

EncodedJSValue jsSVGElementInstanceCorrespondingElement(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "correspondingElement");
        return throwGetterTypeError(*exec, "SVGElementInstance", "correspondingElement");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.correspondingElement()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceCorrespondingUseElement(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "correspondingUseElement");
        return throwGetterTypeError(*exec, "SVGElementInstance", "correspondingUseElement");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.correspondingUseElement()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceParentNode(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "parentNode");
        return throwGetterTypeError(*exec, "SVGElementInstance", "parentNode");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.parentNode()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceFirstChild(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "firstChild");
        return throwGetterTypeError(*exec, "SVGElementInstance", "firstChild");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.firstChild()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceLastChild(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "lastChild");
        return throwGetterTypeError(*exec, "SVGElementInstance", "lastChild");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.lastChild()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstancePreviousSibling(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "previousSibling");
        return throwGetterTypeError(*exec, "SVGElementInstance", "previousSibling");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.previousSibling()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceNextSibling(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "nextSibling");
        return throwGetterTypeError(*exec, "SVGElementInstance", "nextSibling");
    }
    SVGElementInstance& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.nextSibling()));
    return JSValue::encode(result);
}


EncodedJSValue jsSVGElementInstanceOnabort(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onabort");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onabort");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onabort()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnblur(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onblur");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onblur");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onblur()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnchange(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onchange");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onchange");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnclick(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onclick");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onclick");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOncontextmenu(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "oncontextmenu");
        return throwGetterTypeError(*exec, "SVGElementInstance", "oncontextmenu");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.oncontextmenu()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndblclick(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondblclick");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondblclick");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondblclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnerror(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onerror");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onerror");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnfocus(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onfocus");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onfocus");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onfocus()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOninput(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "oninput");
        return throwGetterTypeError(*exec, "SVGElementInstance", "oninput");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.oninput()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnkeydown(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onkeydown");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onkeydown");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeydown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnkeypress(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onkeypress");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onkeypress");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeypress()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnkeyup(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onkeyup");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onkeyup");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeyup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnload(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onload");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onload");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmousedown(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmousedown");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmousedown");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousedown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmouseenter(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmouseenter");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmouseenter");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmouseleave(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmouseleave");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmouseleave");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmousemove(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmousemove");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmousemove");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousemove()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmouseout(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmouseout");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmouseout");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseout()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmouseover(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmouseover");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmouseover");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmouseup(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmouseup");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmouseup");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnmousewheel(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onmousewheel");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onmousewheel");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousewheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnwheel(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onwheel");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onwheel");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onwheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnbeforecut(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onbeforecut");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onbeforecut");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforecut()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOncut(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "oncut");
        return throwGetterTypeError(*exec, "SVGElementInstance", "oncut");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.oncut()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnbeforecopy(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onbeforecopy");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onbeforecopy");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforecopy()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOncopy(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "oncopy");
        return throwGetterTypeError(*exec, "SVGElementInstance", "oncopy");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.oncopy()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnbeforepaste(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onbeforepaste");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onbeforepaste");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforepaste()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnpaste(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onpaste");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onpaste");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onpaste()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndragenter(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondragenter");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondragenter");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndragover(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondragover");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondragover");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndragleave(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondragleave");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondragleave");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndrop(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondrop");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondrop");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrop()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndragstart(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondragstart");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondragstart");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndrag(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondrag");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondrag");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrag()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOndragend(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "ondragend");
        return throwGetterTypeError(*exec, "SVGElementInstance", "ondragend");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnreset(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onreset");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onreset");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onreset()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnresize(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onresize");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onresize");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onresize()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnscroll(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onscroll");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onscroll");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onscroll()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnsearch(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onsearch");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onsearch");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onsearch()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnselect(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onselect");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onselect");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onselect()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnselectstart(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onselectstart");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onselectstart");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onselectstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnsubmit(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onsubmit");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onsubmit");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onsubmit()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceOnunload(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SVGElementInstance", "onunload");
        return throwGetterTypeError(*exec, "SVGElementInstance", "onunload");
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    if (EventListener* listener = impl.onunload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsSVGElementInstanceConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSSVGElementInstancePrototype* domObject = jsDynamicCast<JSSVGElementInstancePrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSSVGElementInstance::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSSVGElementInstanceOnabort(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onabort");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onabort");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnabort(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnblur(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onblur");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onblur");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnblur(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnchange(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onchange");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onchange");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnchange(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnclick(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onclick");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onclick");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnclick(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOncontextmenu(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "oncontextmenu");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "oncontextmenu");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOncontextmenu(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndblclick(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondblclick");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondblclick");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndblclick(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnerror(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onerror");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onerror");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnerror(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnfocus(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onfocus");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onfocus");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnfocus(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOninput(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "oninput");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "oninput");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOninput(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnkeydown(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onkeydown");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onkeydown");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnkeydown(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnkeypress(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onkeypress");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onkeypress");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnkeypress(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnkeyup(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onkeyup");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onkeyup");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnkeyup(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnload(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onload");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onload");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnload(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmousedown(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmousedown");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmousedown");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmousedown(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmouseenter(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmouseenter");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmouseenter");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmouseenter(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmouseleave(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmouseleave");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmouseleave");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmouseleave(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmousemove(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmousemove");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmousemove");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmousemove(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmouseout(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmouseout");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmouseout");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmouseout(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmouseover(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmouseover");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmouseover");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmouseover(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmouseup(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmouseup");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmouseup");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmouseup(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnmousewheel(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onmousewheel");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onmousewheel");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnmousewheel(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnwheel(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onwheel");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onwheel");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnwheel(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnbeforecut(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onbeforecut");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onbeforecut");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnbeforecut(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOncut(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "oncut");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "oncut");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOncut(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnbeforecopy(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onbeforecopy");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onbeforecopy");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnbeforecopy(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOncopy(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "oncopy");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "oncopy");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOncopy(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnbeforepaste(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onbeforepaste");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onbeforepaste");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnbeforepaste(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnpaste(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onpaste");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onpaste");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnpaste(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndragenter(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondragenter");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondragenter");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndragenter(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndragover(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondragover");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondragover");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndragover(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndragleave(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondragleave");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondragleave");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndragleave(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndrop(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondrop");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondrop");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndrop(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndragstart(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondragstart");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondragstart");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndragstart(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndrag(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondrag");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondrag");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndrag(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOndragend(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "ondragend");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "ondragend");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOndragend(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnreset(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onreset");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onreset");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnreset(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnresize(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onresize");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onresize");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnresize(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnscroll(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onscroll");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onscroll");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnscroll(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnsearch(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onsearch");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onsearch");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnsearch(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnselect(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onselect");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onselect");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnselect(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnselectstart(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onselectstart");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onselectstart");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnselectstart(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnsubmit(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onsubmit");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onsubmit");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnsubmit(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


void setJSSVGElementInstanceOnunload(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSVGElementInstance* castedThis = jsDynamicCast<JSSVGElementInstance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSVGElementInstancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SVGElementInstance", "onunload");
        else
            throwSetterTypeError(*exec, "SVGElementInstance", "onunload");
        return;
    }
    UNUSED_PARAM(exec);
    SVGElementInstance& impl = castedThis->impl();
    impl.setOnunload(createJSEventListenerForAttribute(*exec, value, *castedThis));
}


JSValue JSSVGElementInstance::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGElementInstanceConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

void JSSVGElementInstance::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSSVGElementInstance* thisObject = jsCast<JSSVGElementInstance*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
    thisObject->visitAdditionalChildren(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SVGElementInstance@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore18SVGElementInstanceE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, SVGElementInstance* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSVGElementInstance>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SVGElementInstance@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore18SVGElementInstanceE[2];
#if COMPILER(CLANG)
    // If this fails SVGElementInstance does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(SVGElementInstance), SVGElementInstance_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SVGElementInstance has subclasses. If SVGElementInstance has subclasses that get passed
    // to toJS() we currently require SVGElementInstance you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSSVGElementInstance>(globalObject, impl);
}

SVGElementInstance* JSSVGElementInstance::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSSVGElementInstance*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
