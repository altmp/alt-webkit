/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSAudioStreamTrack.h"

#include "AudioStreamTrack.h"
#include "Dictionary.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsAudioStreamTrackConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSAudioStreamTrackPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSAudioStreamTrackPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAudioStreamTrackPrototype* ptr = new (NotNull, JSC::allocateCell<JSAudioStreamTrackPrototype>(vm.heap)) JSAudioStreamTrackPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAudioStreamTrackPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSAudioStreamTrackConstructor : public DOMConstructorObject {
private:
    JSAudioStreamTrackConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSAudioStreamTrackConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSAudioStreamTrackConstructor* ptr = new (NotNull, JSC::allocateCell<JSAudioStreamTrackConstructor>(vm.heap)) JSAudioStreamTrackConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSAudioStreamTrack(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

EncodedJSValue JSC_HOST_CALL JSAudioStreamTrackConstructor::constructJSAudioStreamTrack(ExecState* exec)
{
    JSAudioStreamTrackConstructor* castedThis = jsCast<JSAudioStreamTrackConstructor*>(exec->callee());
    Dictionary audioConstraints(exec, exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwConstructorDocumentUnavailableError(*exec, "AudioStreamTrack");
    RefPtr<AudioStreamTrack> object = AudioStreamTrack::create(*context, audioConstraints);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSAudioStreamTrackConstructor::s_info = { "AudioStreamTrackConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAudioStreamTrackConstructor) };

JSAudioStreamTrackConstructor::JSAudioStreamTrackConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioStreamTrackConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSAudioStreamTrack::getPrototype(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

ConstructType JSAudioStreamTrackConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSAudioStreamTrack;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSAudioStreamTrackPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioStreamTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

WEBCORE_EXPORT const ClassInfo JSAudioStreamTrackPrototype::s_info = { "AudioStreamTrackPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAudioStreamTrackPrototype) };

void JSAudioStreamTrackPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAudioStreamTrackPrototypeTableValues, *this);
}

WEBCORE_EXPORT const ClassInfo JSAudioStreamTrack::s_info = { "AudioStreamTrack", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAudioStreamTrack) };

JSAudioStreamTrack::JSAudioStreamTrack(Structure* structure, JSDOMGlobalObject* globalObject, Ref<AudioStreamTrack>&& impl)
    : JSMediaStreamTrack(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSAudioStreamTrack::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAudioStreamTrackPrototype::create(vm, globalObject, JSAudioStreamTrackPrototype::createStructure(vm, globalObject, JSMediaStreamTrack::getPrototype(vm, globalObject)));
}

JSObject* JSAudioStreamTrack::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioStreamTrack>(vm, globalObject);
}

EncodedJSValue jsAudioStreamTrackConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSAudioStreamTrackPrototype* domObject = jsDynamicCast<JSAudioStreamTrackPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSAudioStreamTrack::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSAudioStreamTrack::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioStreamTrackConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSAudioStreamTrackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSAudioStreamTrack* jsAudioStreamTrack = jsCast<JSAudioStreamTrack*>(handle.slot()->asCell());
    if (jsAudioStreamTrack->impl().hasPendingActivity())
        return true;
    if (jsAudioStreamTrack->impl().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSAudioStreamTrackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSAudioStreamTrack* jsAudioStreamTrack = jsCast<JSAudioStreamTrack*>(handle.slot()->asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsAudioStreamTrack->impl(), jsAudioStreamTrack);
    jsAudioStreamTrack->releaseImpl();
}


}

#endif // ENABLE(MEDIA_STREAM)
