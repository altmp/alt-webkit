/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSScriptProfileNode.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSScriptProfileNode.h"
#include "ScriptProfileNode.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsScriptProfileNodePrototypeFunctionChildren(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsScriptProfileNodeId(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileNodeFunctionName(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileNodeUrl(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileNodeLineNumber(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileNodeColumnNumber(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSScriptProfileNodePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSScriptProfileNodePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSScriptProfileNodePrototype* ptr = new (NotNull, JSC::allocateCell<JSScriptProfileNodePrototype>(vm.heap)) JSScriptProfileNodePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSScriptProfileNodePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSScriptProfileNodePrototypeTableValues[] =
{
    { "id", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileNodeId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "functionName", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileNodeFunctionName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "url", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileNodeUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "lineNumber", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileNodeLineNumber), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "columnNumber", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileNodeColumnNumber), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "children", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsScriptProfileNodePrototypeFunctionChildren), (intptr_t) (0) },
};

const ClassInfo JSScriptProfileNodePrototype::s_info = { "ScriptProfileNodePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSScriptProfileNodePrototype) };

void JSScriptProfileNodePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSScriptProfileNodePrototypeTableValues, *this);
}

const ClassInfo JSScriptProfileNode::s_info = { "ScriptProfileNode", &Base::s_info, 0, CREATE_METHOD_TABLE(JSScriptProfileNode) };

JSScriptProfileNode::JSScriptProfileNode(Structure* structure, JSDOMGlobalObject* globalObject, Ref<ScriptProfileNode>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSScriptProfileNode::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSScriptProfileNodePrototype::create(vm, globalObject, JSScriptProfileNodePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSScriptProfileNode::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSScriptProfileNode>(vm, globalObject);
}

void JSScriptProfileNode::destroy(JSC::JSCell* cell)
{
    JSScriptProfileNode* thisObject = static_cast<JSScriptProfileNode*>(cell);
    thisObject->JSScriptProfileNode::~JSScriptProfileNode();
}

JSScriptProfileNode::~JSScriptProfileNode()
{
    releaseImpl();
}

EncodedJSValue jsScriptProfileNodeId(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfileNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ScriptProfileNode", "id");
        return throwGetterTypeError(*exec, "ScriptProfileNode", "id");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.id());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileNodeFunctionName(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfileNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ScriptProfileNode", "functionName");
        return throwGetterTypeError(*exec, "ScriptProfileNode", "functionName");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.functionName());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileNodeUrl(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfileNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ScriptProfileNode", "url");
        return throwGetterTypeError(*exec, "ScriptProfileNode", "url");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.url());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileNodeLineNumber(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfileNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ScriptProfileNode", "lineNumber");
        return throwGetterTypeError(*exec, "ScriptProfileNode", "lineNumber");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.lineNumber());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileNodeColumnNumber(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfileNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ScriptProfileNode", "columnNumber");
        return throwGetterTypeError(*exec, "ScriptProfileNode", "columnNumber");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.columnNumber());
    return JSValue::encode(result);
}


EncodedJSValue JSC_HOST_CALL jsScriptProfileNodePrototypeFunctionChildren(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSScriptProfileNode* castedThis = jsDynamicCast<JSScriptProfileNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "ScriptProfileNode", "children");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSScriptProfileNode::info());
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.children());
    return JSValue::encode(result);
}

bool JSScriptProfileNodeOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSScriptProfileNodeOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsScriptProfileNode = jsCast<JSScriptProfileNode*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsScriptProfileNode->impl(), jsScriptProfileNode);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, ScriptProfileNode* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSScriptProfileNode>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to ScriptProfileNode.
    COMPILE_ASSERT(!__is_polymorphic(ScriptProfileNode), ScriptProfileNode_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSScriptProfileNode>(globalObject, impl);
}

ScriptProfileNode* JSScriptProfileNode::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSScriptProfileNode*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
