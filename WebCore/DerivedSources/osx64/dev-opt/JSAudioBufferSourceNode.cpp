/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAudioBufferSourceNode.h"

#include "AudioBuffer.h"
#include "AudioBufferSourceNode.h"
#include "AudioParam.h"
#include "ExceptionCode.h"
#include "JSAudioBuffer.h"
#include "JSAudioParam.h"
#include "JSDOMBinding.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionStart(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionStop(JSC::ExecState*);
#if ENABLE(LEGACY_WEB_AUDIO)
JSC::EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteOn(JSC::ExecState*);
#endif
#if ENABLE(LEGACY_WEB_AUDIO)
JSC::EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteGrainOn(JSC::ExecState*);
#endif
#if ENABLE(LEGACY_WEB_AUDIO)
JSC::EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteOff(JSC::ExecState*);
#endif

// Attributes

JSC::EncodedJSValue jsAudioBufferSourceNodeBuffer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeBuffer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAudioBufferSourceNodePlaybackState(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAudioBufferSourceNodeGain(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAudioBufferSourceNodePlaybackRate(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAudioBufferSourceNodeLoop(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeLoop(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAudioBufferSourceNodeLoopStart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeLoopStart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAudioBufferSourceNodeLoopEnd(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeLoopEnd(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(LEGACY_WEB_AUDIO)
JSC::EncodedJSValue jsAudioBufferSourceNodeLooping(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeLooping(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsAudioBufferSourceNodeOnended(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSAudioBufferSourceNodeOnended(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAudioBufferSourceNodeConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSAudioBufferSourceNodePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSAudioBufferSourceNodePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAudioBufferSourceNodePrototype* ptr = new (NotNull, JSC::allocateCell<JSAudioBufferSourceNodePrototype>(vm.heap)) JSAudioBufferSourceNodePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAudioBufferSourceNodePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSAudioBufferSourceNodeConstructor : public DOMConstructorObject {
private:
    JSAudioBufferSourceNodeConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSAudioBufferSourceNodeConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSAudioBufferSourceNodeConstructor* ptr = new (NotNull, JSC::allocateCell<JSAudioBufferSourceNodeConstructor>(vm.heap)) JSAudioBufferSourceNodeConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

/* Hash table */

static const struct CompactHashIndex JSAudioBufferSourceNodeTableIndex[2] = {
    { -1, -1 },
    { 0, -1 },
};


static const HashTableValue JSAudioBufferSourceNodeTableValues[] =
{
    { "buffer", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeBuffer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeBuffer) },
};

static const HashTable JSAudioBufferSourceNodeTable = { 1, 1, true, JSAudioBufferSourceNodeTableValues, 0, JSAudioBufferSourceNodeTableIndex };
/* Hash table for constructor */

static const HashTableValue JSAudioBufferSourceNodeConstructorTableValues[] =
{
    { "UNSCHEDULED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "SCHEDULED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "PLAYING_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "FINISHED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
};


COMPILE_ASSERT(0 == AudioBufferSourceNode::UNSCHEDULED_STATE, AudioBufferSourceNodeEnumUNSCHEDULED_STATEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == AudioBufferSourceNode::SCHEDULED_STATE, AudioBufferSourceNodeEnumSCHEDULED_STATEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == AudioBufferSourceNode::PLAYING_STATE, AudioBufferSourceNodeEnumPLAYING_STATEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == AudioBufferSourceNode::FINISHED_STATE, AudioBufferSourceNodeEnumFINISHED_STATEIsWrongUseDoNotCheckConstants);

const ClassInfo JSAudioBufferSourceNodeConstructor::s_info = { "AudioBufferSourceNodeConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAudioBufferSourceNodeConstructor) };

JSAudioBufferSourceNodeConstructor::JSAudioBufferSourceNodeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioBufferSourceNodeConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSAudioBufferSourceNode::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("AudioBufferSourceNode"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSAudioBufferSourceNodeConstructorTableValues, *this);
}

/* Hash table for prototype */

static const HashTableValue JSAudioBufferSourceNodePrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "playbackState", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodePlaybackState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "gain", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeGain), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "playbackRate", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodePlaybackRate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "loop", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeLoop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeLoop) },
    { "loopStart", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeLoopStart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeLoopStart) },
    { "loopEnd", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeLoopEnd), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeLoopEnd) },
#if ENABLE(LEGACY_WEB_AUDIO)
    { "looping", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeLooping), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeLooping) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
    { "onended", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioBufferSourceNodeOnended), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAudioBufferSourceNodeOnended) },
    { "UNSCHEDULED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "SCHEDULED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "PLAYING_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "FINISHED_STATE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "start", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsAudioBufferSourceNodePrototypeFunctionStart), (intptr_t) (0) },
    { "stop", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsAudioBufferSourceNodePrototypeFunctionStop), (intptr_t) (0) },
#if ENABLE(LEGACY_WEB_AUDIO)
    { "noteOn", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsAudioBufferSourceNodePrototypeFunctionNoteOn), (intptr_t) (1) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
#if ENABLE(LEGACY_WEB_AUDIO)
    { "noteGrainOn", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsAudioBufferSourceNodePrototypeFunctionNoteGrainOn), (intptr_t) (3) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
#if ENABLE(LEGACY_WEB_AUDIO)
    { "noteOff", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsAudioBufferSourceNodePrototypeFunctionNoteOff), (intptr_t) (1) },
#else
    { 0, 0, NoIntrinsic, 0, 0 },
#endif
};

const ClassInfo JSAudioBufferSourceNodePrototype::s_info = { "AudioBufferSourceNodePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAudioBufferSourceNodePrototype) };

void JSAudioBufferSourceNodePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAudioBufferSourceNodePrototypeTableValues, *this);
}

const ClassInfo JSAudioBufferSourceNode::s_info = { "AudioBufferSourceNode", &Base::s_info, &JSAudioBufferSourceNodeTable, CREATE_METHOD_TABLE(JSAudioBufferSourceNode) };

JSAudioBufferSourceNode::JSAudioBufferSourceNode(Structure* structure, JSDOMGlobalObject* globalObject, Ref<AudioBufferSourceNode>&& impl)
    : JSAudioNode(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSAudioBufferSourceNode::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAudioBufferSourceNodePrototype::create(vm, globalObject, JSAudioBufferSourceNodePrototype::createStructure(vm, globalObject, JSAudioNode::getPrototype(vm, globalObject)));
}

JSObject* JSAudioBufferSourceNode::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioBufferSourceNode>(vm, globalObject);
}

bool JSAudioBufferSourceNode::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSAudioBufferSourceNode*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSAudioBufferSourceNode, Base>(exec, JSAudioBufferSourceNodeTable, thisObject, propertyName, slot);
}

EncodedJSValue jsAudioBufferSourceNodeBuffer(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSAudioBufferSourceNode*>(slotBase);
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.buffer()));
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodePlaybackState(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "playbackState");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "playbackState");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.playbackState());
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodeGain(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "gain");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "gain");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.gain()));
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodePlaybackRate(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "playbackRate");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "playbackRate");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.playbackRate()));
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodeLoop(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "loop");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "loop");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.loop());
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodeLoopStart(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "loopStart");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "loopStart");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.loopStart());
    return JSValue::encode(result);
}


EncodedJSValue jsAudioBufferSourceNodeLoopEnd(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "loopEnd");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "loopEnd");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.loopEnd());
    return JSValue::encode(result);
}


#if ENABLE(LEGACY_WEB_AUDIO)
EncodedJSValue jsAudioBufferSourceNodeLooping(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "looping");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "looping");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.looping());
    return JSValue::encode(result);
}

#endif

EncodedJSValue jsAudioBufferSourceNodeOnended(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "AudioBufferSourceNode", "onended");
        return throwGetterTypeError(*exec, "AudioBufferSourceNode", "onended");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().endedEvent));
}


EncodedJSValue jsAudioBufferSourceNodeConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSAudioBufferSourceNodePrototype* domObject = jsDynamicCast<JSAudioBufferSourceNodePrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSAudioBufferSourceNode::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSAudioBufferSourceNodeBuffer(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSAudioBufferSourceNode*>(baseObject);
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    castedThis->setBuffer(exec, value);
}


void setJSAudioBufferSourceNodeLoop(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "AudioBufferSourceNode", "loop");
        else
            throwSetterTypeError(*exec, "AudioBufferSourceNode", "loop");
        return;
    }
    auto& impl = castedThis->impl();
    bool nativeValue = value.toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setLoop(nativeValue);
}


void setJSAudioBufferSourceNodeLoopStart(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "AudioBufferSourceNode", "loopStart");
        else
            throwSetterTypeError(*exec, "AudioBufferSourceNode", "loopStart");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setLoopStart(nativeValue);
}


void setJSAudioBufferSourceNodeLoopEnd(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "AudioBufferSourceNode", "loopEnd");
        else
            throwSetterTypeError(*exec, "AudioBufferSourceNode", "loopEnd");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setLoopEnd(nativeValue);
}


#if ENABLE(LEGACY_WEB_AUDIO)
void setJSAudioBufferSourceNodeLooping(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "AudioBufferSourceNode", "looping");
        else
            throwSetterTypeError(*exec, "AudioBufferSourceNode", "looping");
        return;
    }
    auto& impl = castedThis->impl();
    bool nativeValue = value.toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setLooping(nativeValue);
}

#endif

void setJSAudioBufferSourceNodeOnended(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSAudioBufferSourceNodePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "AudioBufferSourceNode", "onended");
        else
            throwSetterTypeError(*exec, "AudioBufferSourceNode", "onended");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().endedEvent, value);
}


JSValue JSAudioBufferSourceNode::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioBufferSourceNodeConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionStart(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "AudioBufferSourceNode", "start");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSAudioBufferSourceNode::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 0) {
        impl.start(ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    double when = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (argsCount <= 1) {
        impl.start(when, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    double grainOffset = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (argsCount <= 2) {
        impl.start(when, grainOffset, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    double grainDuration = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.start(when, grainOffset, grainDuration, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionStop(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "AudioBufferSourceNode", "stop");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSAudioBufferSourceNode::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 0) {
        impl.stop(ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    double when = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.stop(when, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#if ENABLE(LEGACY_WEB_AUDIO)
EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteOn(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "AudioBufferSourceNode", "noteOn");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSAudioBufferSourceNode::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    double when = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.noteOn(when, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(LEGACY_WEB_AUDIO)
EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteGrainOn(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "AudioBufferSourceNode", "noteGrainOn");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSAudioBufferSourceNode::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    double when = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double grainOffset = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double grainDuration = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.noteGrainOn(when, grainOffset, grainDuration, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(LEGACY_WEB_AUDIO)
EncodedJSValue JSC_HOST_CALL jsAudioBufferSourceNodePrototypeFunctionNoteOff(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSAudioBufferSourceNode* castedThis = jsDynamicCast<JSAudioBufferSourceNode*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "AudioBufferSourceNode", "noteOff");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSAudioBufferSourceNode::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    double when = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.noteOff(when, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7AudioBufferSourceNode@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore21AudioBufferSourceNodeE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, AudioBufferSourceNode* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSAudioBufferSourceNode>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7AudioBufferSourceNode@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore21AudioBufferSourceNodeE[2];
#if COMPILER(CLANG)
    // If this fails AudioBufferSourceNode does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(AudioBufferSourceNode), AudioBufferSourceNode_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // AudioBufferSourceNode has subclasses. If AudioBufferSourceNode has subclasses that get passed
    // to toJS() we currently require AudioBufferSourceNode you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSAudioBufferSourceNode>(globalObject, impl);
}


}

#endif // ENABLE(WEB_AUDIO)
