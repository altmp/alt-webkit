/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSSubtleCrypto.h"

#include "JSDOMBinding.h"
#include "SubtleCrypto.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionEncrypt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionDecrypt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionSign(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionVerify(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionDigest(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionGenerateKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionImportKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionExportKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionWrapKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionUnwrapKey(JSC::ExecState*);

class JSSubtleCryptoPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSSubtleCryptoPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSubtleCryptoPrototype* ptr = new (NotNull, JSC::allocateCell<JSSubtleCryptoPrototype>(vm.heap)) JSSubtleCryptoPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSubtleCryptoPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSSubtleCryptoPrototypeTableValues[] =
{
    { "encrypt", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionEncrypt), (intptr_t) (3) },
    { "decrypt", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionDecrypt), (intptr_t) (3) },
    { "sign", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionSign), (intptr_t) (3) },
    { "verify", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionVerify), (intptr_t) (4) },
    { "digest", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionDigest), (intptr_t) (2) },
    { "generateKey", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionGenerateKey), (intptr_t) (1) },
    { "importKey", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionImportKey), (intptr_t) (3) },
    { "exportKey", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionExportKey), (intptr_t) (2) },
    { "wrapKey", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionWrapKey), (intptr_t) (4) },
    { "unwrapKey", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSubtleCryptoPrototypeFunctionUnwrapKey), (intptr_t) (5) },
};

const ClassInfo JSSubtleCryptoPrototype::s_info = { "WebKitSubtleCryptoPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSubtleCryptoPrototype) };

void JSSubtleCryptoPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSubtleCryptoPrototypeTableValues, *this);
}

const ClassInfo JSSubtleCrypto::s_info = { "WebKitSubtleCrypto", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSubtleCrypto) };

JSSubtleCrypto::JSSubtleCrypto(Structure* structure, JSDOMGlobalObject* globalObject, Ref<SubtleCrypto>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSSubtleCrypto::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSubtleCryptoPrototype::create(vm, globalObject, JSSubtleCryptoPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSubtleCrypto::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSubtleCrypto>(vm, globalObject);
}

void JSSubtleCrypto::destroy(JSC::JSCell* cell)
{
    JSSubtleCrypto* thisObject = static_cast<JSSubtleCrypto*>(cell);
    thisObject->JSSubtleCrypto::~JSSubtleCrypto();
}

JSSubtleCrypto::~JSSubtleCrypto()
{
    releaseImpl();
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionEncrypt(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "encrypt");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->encrypt(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionDecrypt(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "decrypt");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->decrypt(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionSign(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "sign");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->sign(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionVerify(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "verify");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->verify(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionDigest(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "digest");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->digest(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionGenerateKey(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "generateKey");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->generateKey(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionImportKey(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "importKey");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->importKey(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionExportKey(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "exportKey");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->exportKey(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionWrapKey(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "wrapKey");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->wrapKey(exec));
}

EncodedJSValue JSC_HOST_CALL jsSubtleCryptoPrototypeFunctionUnwrapKey(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSubtleCrypto* castedThis = jsDynamicCast<JSSubtleCrypto*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SubtleCrypto", "unwrapKey");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSubtleCrypto::info());
    return JSValue::encode(castedThis->unwrapKey(exec));
}

bool JSSubtleCryptoOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsSubtleCrypto = jsCast<JSSubtleCrypto*>(handle.slot()->asCell());
    Document* root = WTF::getPtr(jsSubtleCrypto->impl().document());
    if (!root)
        return false;
    return visitor.containsOpaqueRoot(root);
}

void JSSubtleCryptoOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSubtleCrypto = jsCast<JSSubtleCrypto*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSubtleCrypto->impl(), jsSubtleCrypto);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SubtleCrypto@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12SubtleCryptoE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, SubtleCrypto* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSubtleCrypto>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SubtleCrypto@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12SubtleCryptoE[2];
#if COMPILER(CLANG)
    // If this fails SubtleCrypto does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(SubtleCrypto), SubtleCrypto_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SubtleCrypto has subclasses. If SubtleCrypto has subclasses that get passed
    // to toJS() we currently require SubtleCrypto you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSSubtleCrypto>(globalObject, impl);
}

SubtleCrypto* JSSubtleCrypto::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSSubtleCrypto*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(SUBTLE_CRYPTO)
