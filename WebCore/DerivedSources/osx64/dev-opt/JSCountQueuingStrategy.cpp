/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(STREAMS_API)

#include "JSCountQueuingStrategy.h"

#include "CountQueuingStrategy.h"
#include "JSDOMBinding.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions


// Attributes

JSC::EncodedJSValue jsCountQueuingStrategyConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSCountQueuingStrategyPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSCountQueuingStrategyPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSCountQueuingStrategyPrototype* ptr = new (NotNull, JSC::allocateCell<JSCountQueuingStrategyPrototype>(vm.heap)) JSCountQueuingStrategyPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSCountQueuingStrategyPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSCountQueuingStrategyConstructor : public DOMConstructorObject {
private:
    JSCountQueuingStrategyConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSCountQueuingStrategyConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSCountQueuingStrategyConstructor* ptr = new (NotNull, JSC::allocateCell<JSCountQueuingStrategyConstructor>(vm.heap)) JSCountQueuingStrategyConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

const ClassInfo JSCountQueuingStrategyConstructor::s_info = { "CountQueuingStrategyConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCountQueuingStrategyConstructor) };

JSCountQueuingStrategyConstructor::JSCountQueuingStrategyConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSCountQueuingStrategyConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSCountQueuingStrategy::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("CountQueuingStrategy"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

ConstructType JSCountQueuingStrategyConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSCountQueuingStrategy;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSCountQueuingStrategyPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCountQueuingStrategyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "size", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCountQueuingStrategyPrototypeFunctionSize), (intptr_t) (0) },
};

const ClassInfo JSCountQueuingStrategyPrototype::s_info = { "CountQueuingStrategyPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCountQueuingStrategyPrototype) };

void JSCountQueuingStrategyPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSCountQueuingStrategyPrototypeTableValues, *this);
}

const ClassInfo JSCountQueuingStrategy::s_info = { "CountQueuingStrategy", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCountQueuingStrategy) };

JSCountQueuingStrategy::JSCountQueuingStrategy(Structure* structure, JSDOMGlobalObject* globalObject, Ref<CountQueuingStrategy>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSCountQueuingStrategy::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSCountQueuingStrategyPrototype::create(vm, globalObject, JSCountQueuingStrategyPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSCountQueuingStrategy::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCountQueuingStrategy>(vm, globalObject);
}

void JSCountQueuingStrategy::destroy(JSC::JSCell* cell)
{
    JSCountQueuingStrategy* thisObject = static_cast<JSCountQueuingStrategy*>(cell);
    thisObject->JSCountQueuingStrategy::~JSCountQueuingStrategy();
}

JSCountQueuingStrategy::~JSCountQueuingStrategy()
{
    releaseImpl();
}

EncodedJSValue jsCountQueuingStrategyConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSCountQueuingStrategyPrototype* domObject = jsDynamicCast<JSCountQueuingStrategyPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSCountQueuingStrategy::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSCountQueuingStrategy::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSCountQueuingStrategyConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSCountQueuingStrategyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSCountQueuingStrategyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsCountQueuingStrategy = jsCast<JSCountQueuingStrategy*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsCountQueuingStrategy->impl(), jsCountQueuingStrategy);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7CountQueuingStrategy@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore20CountQueuingStrategyE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, CountQueuingStrategy* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSCountQueuingStrategy>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7CountQueuingStrategy@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore20CountQueuingStrategyE[2];
#if COMPILER(CLANG)
    // If this fails CountQueuingStrategy does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(CountQueuingStrategy), CountQueuingStrategy_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // CountQueuingStrategy has subclasses. If CountQueuingStrategy has subclasses that get passed
    // to toJS() we currently require CountQueuingStrategy you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSCountQueuingStrategy>(globalObject, impl);
}

CountQueuingStrategy* JSCountQueuingStrategy::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSCountQueuingStrategy*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(STREAMS_API)
