/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSXMLHttpRequestException.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "URL.h"
#include "XMLHttpRequestException.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsXMLHttpRequestExceptionPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsXMLHttpRequestExceptionCode(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsXMLHttpRequestExceptionName(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsXMLHttpRequestExceptionMessage(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsXMLHttpRequestExceptionConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSXMLHttpRequestExceptionPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSXMLHttpRequestExceptionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSXMLHttpRequestExceptionPrototype* ptr = new (NotNull, JSC::allocateCell<JSXMLHttpRequestExceptionPrototype>(vm.heap)) JSXMLHttpRequestExceptionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSXMLHttpRequestExceptionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSXMLHttpRequestExceptionConstructor : public DOMConstructorObject {
private:
    JSXMLHttpRequestExceptionConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSXMLHttpRequestExceptionConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSXMLHttpRequestExceptionConstructor* ptr = new (NotNull, JSC::allocateCell<JSXMLHttpRequestExceptionConstructor>(vm.heap)) JSXMLHttpRequestExceptionConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

/* Hash table */

static const struct CompactHashIndex JSXMLHttpRequestExceptionTableIndex[9] = {
    { -1, -1 },
    { 0, 8 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 2, -1 },
    { 1, -1 },
};


static const HashTableValue JSXMLHttpRequestExceptionTableValues[] =
{
    { "code", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsXMLHttpRequestExceptionCode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "name", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsXMLHttpRequestExceptionName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "message", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsXMLHttpRequestExceptionMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

static const HashTable JSXMLHttpRequestExceptionTable = { 3, 7, true, JSXMLHttpRequestExceptionTableValues, 0, JSXMLHttpRequestExceptionTableIndex };
/* Hash table for constructor */

static const HashTableValue JSXMLHttpRequestExceptionConstructorTableValues[] =
{
    { "NETWORK_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(101), (intptr_t) (0) },
    { "ABORT_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(102), (intptr_t) (0) },
};

const ClassInfo JSXMLHttpRequestExceptionConstructor::s_info = { "XMLHttpRequestExceptionConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSXMLHttpRequestExceptionConstructor) };

JSXMLHttpRequestExceptionConstructor::JSXMLHttpRequestExceptionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSXMLHttpRequestExceptionConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSXMLHttpRequestException::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("XMLHttpRequestException"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSXMLHttpRequestExceptionConstructorTableValues, *this);
}

/* Hash table for prototype */

static const HashTableValue JSXMLHttpRequestExceptionPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsXMLHttpRequestExceptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "NETWORK_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(101), (intptr_t) (0) },
    { "ABORT_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(102), (intptr_t) (0) },
    { "toString", DontEnum | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsXMLHttpRequestExceptionPrototypeFunctionToString), (intptr_t) (0) },
};

const ClassInfo JSXMLHttpRequestExceptionPrototype::s_info = { "XMLHttpRequestExceptionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSXMLHttpRequestExceptionPrototype) };

void JSXMLHttpRequestExceptionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSXMLHttpRequestExceptionPrototypeTableValues, *this);
}

const ClassInfo JSXMLHttpRequestException::s_info = { "XMLHttpRequestException", &Base::s_info, &JSXMLHttpRequestExceptionTable, CREATE_METHOD_TABLE(JSXMLHttpRequestException) };

JSXMLHttpRequestException::JSXMLHttpRequestException(Structure* structure, JSDOMGlobalObject* globalObject, Ref<XMLHttpRequestException>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSXMLHttpRequestException::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSXMLHttpRequestExceptionPrototype::create(vm, globalObject, JSXMLHttpRequestExceptionPrototype::createStructure(vm, globalObject, globalObject->errorPrototype()));
}

JSObject* JSXMLHttpRequestException::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSXMLHttpRequestException>(vm, globalObject);
}

void JSXMLHttpRequestException::destroy(JSC::JSCell* cell)
{
    JSXMLHttpRequestException* thisObject = static_cast<JSXMLHttpRequestException*>(cell);
    thisObject->JSXMLHttpRequestException::~JSXMLHttpRequestException();
}

JSXMLHttpRequestException::~JSXMLHttpRequestException()
{
    releaseImpl();
}

bool JSXMLHttpRequestException::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSXMLHttpRequestException*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSXMLHttpRequestException, Base>(exec, JSXMLHttpRequestExceptionTable, thisObject, propertyName, slot);
}

EncodedJSValue jsXMLHttpRequestExceptionCode(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSXMLHttpRequestException*>(slotBase);
    JSXMLHttpRequestException* castedThisObject = jsDynamicCast<JSXMLHttpRequestException*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThisObject))
        reportDeprecatedGetterError(*exec, "XMLHttpRequestException", "code");
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.code());
    return JSValue::encode(result);
}


EncodedJSValue jsXMLHttpRequestExceptionName(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSXMLHttpRequestException*>(slotBase);
    JSXMLHttpRequestException* castedThisObject = jsDynamicCast<JSXMLHttpRequestException*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThisObject))
        reportDeprecatedGetterError(*exec, "XMLHttpRequestException", "name");
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.name());
    return JSValue::encode(result);
}


EncodedJSValue jsXMLHttpRequestExceptionMessage(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSXMLHttpRequestException*>(slotBase);
    JSXMLHttpRequestException* castedThisObject = jsDynamicCast<JSXMLHttpRequestException*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThisObject))
        reportDeprecatedGetterError(*exec, "XMLHttpRequestException", "message");
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.message());
    return JSValue::encode(result);
}


EncodedJSValue jsXMLHttpRequestExceptionConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSXMLHttpRequestExceptionPrototype* domObject = jsDynamicCast<JSXMLHttpRequestExceptionPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSXMLHttpRequestException::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSXMLHttpRequestException::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSXMLHttpRequestExceptionConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsXMLHttpRequestExceptionPrototypeFunctionToString(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSXMLHttpRequestException* castedThis = jsDynamicCast<JSXMLHttpRequestException*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "XMLHttpRequestException", "toString");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSXMLHttpRequestException::info());
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.toString());
    return JSValue::encode(result);
}

bool JSXMLHttpRequestExceptionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSXMLHttpRequestExceptionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsXMLHttpRequestException = jsCast<JSXMLHttpRequestException*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsXMLHttpRequestException->impl(), jsXMLHttpRequestException);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, XMLHttpRequestException* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSXMLHttpRequestException>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to XMLHttpRequestException.
    COMPILE_ASSERT(!__is_polymorphic(XMLHttpRequestException), XMLHttpRequestException_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSXMLHttpRequestException>(globalObject, impl);
}

XMLHttpRequestException* JSXMLHttpRequestException::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSXMLHttpRequestException*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
