/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCounter.h"

#include "Counter.h"
#include "JSDOMBinding.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsCounterIdentifier(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCounterListStyle(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCounterSeparator(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCounterConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSCounterPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSCounterPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSCounterPrototype* ptr = new (NotNull, JSC::allocateCell<JSCounterPrototype>(vm.heap)) JSCounterPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSCounterPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSCounterConstructor : public DOMConstructorObject {
private:
    JSCounterConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSCounterConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSCounterConstructor* ptr = new (NotNull, JSC::allocateCell<JSCounterConstructor>(vm.heap)) JSCounterConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSCounterConstructor::s_info = { "CounterConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCounterConstructor) };

JSCounterConstructor::JSCounterConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSCounterConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSCounter::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Counter"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSCounterPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCounterConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "identifier", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCounterIdentifier), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "listStyle", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCounterListStyle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "separator", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCounterSeparator), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSCounterPrototype::s_info = { "CounterPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCounterPrototype) };

void JSCounterPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSCounterPrototypeTableValues, *this);
}

const ClassInfo JSCounter::s_info = { "Counter", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCounter) };

JSCounter::JSCounter(Structure* structure, JSDOMGlobalObject* globalObject, Ref<Counter>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSCounter::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSCounterPrototype::create(vm, globalObject, JSCounterPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSCounter::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCounter>(vm, globalObject);
}

void JSCounter::destroy(JSC::JSCell* cell)
{
    JSCounter* thisObject = static_cast<JSCounter*>(cell);
    thisObject->JSCounter::~JSCounter();
}

JSCounter::~JSCounter()
{
    releaseImpl();
}

EncodedJSValue jsCounterIdentifier(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCounter* castedThis = jsDynamicCast<JSCounter*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCounterPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Counter", "identifier");
        return throwGetterTypeError(*exec, "Counter", "identifier");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.identifier());
    return JSValue::encode(result);
}


EncodedJSValue jsCounterListStyle(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCounter* castedThis = jsDynamicCast<JSCounter*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCounterPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Counter", "listStyle");
        return throwGetterTypeError(*exec, "Counter", "listStyle");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.listStyle());
    return JSValue::encode(result);
}


EncodedJSValue jsCounterSeparator(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCounter* castedThis = jsDynamicCast<JSCounter*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCounterPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Counter", "separator");
        return throwGetterTypeError(*exec, "Counter", "separator");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.separator());
    return JSValue::encode(result);
}


EncodedJSValue jsCounterConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSCounterPrototype* domObject = jsDynamicCast<JSCounterPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSCounter::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSCounter::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSCounterConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSCounterOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSCounterOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsCounter = jsCast<JSCounter*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsCounter->impl(), jsCounter);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, Counter* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSCounter>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Counter.
    COMPILE_ASSERT(!__is_polymorphic(Counter), Counter_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSCounter>(globalObject, impl);
}

Counter* JSCounter::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSCounter*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
