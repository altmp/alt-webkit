/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCStatsResponse.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSRTCStatsReport.h"
#include "RTCStatsReport.h"
#include "RTCStatsResponse.h"
#include "wtf/text/AtomicString.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionResult(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionNamedItem(JSC::ExecState*);

class JSRTCStatsResponsePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSRTCStatsResponsePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCStatsResponsePrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCStatsResponsePrototype>(vm.heap)) JSRTCStatsResponsePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCStatsResponsePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table */

static const struct CompactHashIndex JSRTCStatsResponseTableIndex[2] = {
    { -1, -1 },
    { -1, -1 },
};


static const HashTableValue JSRTCStatsResponseTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCStatsResponseTable = { 0, 1, false, JSRTCStatsResponseTableValues, 0, JSRTCStatsResponseTableIndex };
/* Hash table for prototype */

static const HashTableValue JSRTCStatsResponsePrototypeTableValues[] =
{
    { "result", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCStatsResponsePrototypeFunctionResult), (intptr_t) (0) },
    { "namedItem", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCStatsResponsePrototypeFunctionNamedItem), (intptr_t) (0) },
};

const ClassInfo JSRTCStatsResponsePrototype::s_info = { "RTCStatsResponsePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCStatsResponsePrototype) };

void JSRTCStatsResponsePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCStatsResponsePrototypeTableValues, *this);
}

const ClassInfo JSRTCStatsResponse::s_info = { "RTCStatsResponse", &Base::s_info, &JSRTCStatsResponseTable, CREATE_METHOD_TABLE(JSRTCStatsResponse) };

JSRTCStatsResponse::JSRTCStatsResponse(Structure* structure, JSDOMGlobalObject* globalObject, Ref<RTCStatsResponse>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSRTCStatsResponse::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCStatsResponsePrototype::create(vm, globalObject, JSRTCStatsResponsePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRTCStatsResponse::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCStatsResponse>(vm, globalObject);
}

void JSRTCStatsResponse::destroy(JSC::JSCell* cell)
{
    JSRTCStatsResponse* thisObject = static_cast<JSRTCStatsResponse*>(cell);
    thisObject->JSRTCStatsResponse::~JSRTCStatsResponse();
}

JSRTCStatsResponse::~JSRTCStatsResponse()
{
    releaseImpl();
}

bool JSRTCStatsResponse::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSRTCStatsResponse*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    const HashTableValue* entry = getStaticValueSlotEntryWithoutCaching<JSRTCStatsResponse>(exec, propertyName);
    if (entry) {
        slot.setCacheableCustom(thisObject, entry->attributes(), entry->propertyGetter());
        return true;
    }
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return getStaticValueSlot<JSRTCStatsResponse, Base>(exec, JSRTCStatsResponseTable, thisObject, propertyName, slot);
}

bool JSRTCStatsResponse::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSRTCStatsResponse*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Identifier propertyName = Identifier::from(exec, index);
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionResult(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRTCStatsResponse* castedThis = jsDynamicCast<JSRTCStatsResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "RTCStatsResponse", "result");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCStatsResponse::info());
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.result());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionNamedItem(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRTCStatsResponse* castedThis = jsDynamicCast<JSRTCStatsResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "RTCStatsResponse", "namedItem");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCStatsResponse::info());
    auto& impl = castedThis->impl();
    String name = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.namedItem(name)));
    return JSValue::encode(result);
}

bool JSRTCStatsResponseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCStatsResponseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCStatsResponse = jsCast<JSRTCStatsResponse*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCStatsResponse->impl(), jsRTCStatsResponse);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCStatsResponse@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16RTCStatsResponseE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, RTCStatsResponse* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCStatsResponse>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCStatsResponse@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16RTCStatsResponseE[2];
#if COMPILER(CLANG)
    // If this fails RTCStatsResponse does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCStatsResponse), RTCStatsResponse_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCStatsResponse has subclasses. If RTCStatsResponse has subclasses that get passed
    // to toJS() we currently require RTCStatsResponse you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSRTCStatsResponse>(globalObject, impl);
}

RTCStatsResponse* JSRTCStatsResponse::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCStatsResponse*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
