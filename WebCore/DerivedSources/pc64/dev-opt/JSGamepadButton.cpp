/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(GAMEPAD)

#include "JSGamepadButton.h"

#include "GamepadButton.h"
#include "JSDOMBinding.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsGamepadButtonPressed(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadButtonValue(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadButtonConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSGamepadButtonPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSGamepadButtonPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSGamepadButtonPrototype* ptr = new (NotNull, JSC::allocateCell<JSGamepadButtonPrototype>(vm.heap)) JSGamepadButtonPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSGamepadButtonPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSGamepadButtonConstructor : public DOMConstructorObject {
private:
    JSGamepadButtonConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSGamepadButtonConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSGamepadButtonConstructor* ptr = new (NotNull, JSC::allocateCell<JSGamepadButtonConstructor>(vm.heap)) JSGamepadButtonConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSGamepadButtonConstructor::s_info = { "GamepadButtonConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadButtonConstructor) };

JSGamepadButtonConstructor::JSGamepadButtonConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSGamepadButtonConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSGamepadButton::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("GamepadButton"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSGamepadButtonPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadButtonConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "pressed", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadButtonPressed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "value", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadButtonValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSGamepadButtonPrototype::s_info = { "GamepadButtonPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadButtonPrototype) };

void JSGamepadButtonPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSGamepadButtonPrototypeTableValues, *this);
}

const ClassInfo JSGamepadButton::s_info = { "GamepadButton", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadButton) };

JSGamepadButton::JSGamepadButton(Structure* structure, JSDOMGlobalObject* globalObject, Ref<GamepadButton>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSGamepadButton::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSGamepadButtonPrototype::create(vm, globalObject, JSGamepadButtonPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSGamepadButton::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSGamepadButton>(vm, globalObject);
}

void JSGamepadButton::destroy(JSC::JSCell* cell)
{
    JSGamepadButton* thisObject = static_cast<JSGamepadButton*>(cell);
    thisObject->JSGamepadButton::~JSGamepadButton();
}

JSGamepadButton::~JSGamepadButton()
{
    releaseImpl();
}

EncodedJSValue jsGamepadButtonPressed(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepadButton* castedThis = jsDynamicCast<JSGamepadButton*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadButtonPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "GamepadButton", "pressed");
        return throwGetterTypeError(*exec, "GamepadButton", "pressed");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.pressed());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadButtonValue(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepadButton* castedThis = jsDynamicCast<JSGamepadButton*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadButtonPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "GamepadButton", "value");
        return throwGetterTypeError(*exec, "GamepadButton", "value");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.value());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadButtonConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSGamepadButtonPrototype* domObject = jsDynamicCast<JSGamepadButtonPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSGamepadButton::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSGamepadButton::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSGamepadButtonConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSGamepadButtonOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSGamepadButtonOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsGamepadButton = jsCast<JSGamepadButton*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsGamepadButton->impl(), jsGamepadButton);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, GamepadButton* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSGamepadButton>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to GamepadButton.
    COMPILE_ASSERT(!__is_polymorphic(GamepadButton), GamepadButton_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSGamepadButton>(globalObject, impl);
}

GamepadButton* JSGamepadButton::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSGamepadButton*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(GAMEPAD)
