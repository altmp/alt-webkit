
%{
/*
 * Copyright (C) 2014 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// This file is automatically generated from SelectorPseudoTypeMap.in by makeprop, do not edit by hand.

#include "config.h"
#include "SelectorPseudoTypeMap.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#endif

namespace WebCore {

struct SelectorPseudoClassOrCompatibilityPseudoElementEntry {
    const char* name;
    PseudoClassOrCompatibilityPseudoElement pseudoTypes;
};

%}
%struct-type
%define initializer-suffix ,{CSSSelector::PseudoClassUnknown,CSSSelector::PseudoElementUnknown}
%define class-name SelectorPseudoClassAndCompatibilityElementMapHash
%omit-struct-type
%language=C++
%readonly-tables
%global-table
%ignore-case
%compare-strncmp
%enum

struct SelectorPseudoClassOrCompatibilityPseudoElementEntry;

%%
"-khtml-drag", {CSSSelector::PseudoClassDrag, CSSSelector::PseudoElementUnknown}
"-webkit-any(", {CSSSelector::PseudoClassAny, CSSSelector::PseudoElementUnknown}
"-webkit-any-link", {CSSSelector::PseudoClassAnyLinkDeprecated, CSSSelector::PseudoElementUnknown}
"-webkit-autofill", {CSSSelector::PseudoClassAutofill, CSSSelector::PseudoElementUnknown}
"-webkit-drag", {CSSSelector::PseudoClassDrag, CSSSelector::PseudoElementUnknown}
"-webkit-full-page-media", {CSSSelector::PseudoClassFullPageMedia, CSSSelector::PseudoElementUnknown}
"active", {CSSSelector::PseudoClassActive, CSSSelector::PseudoElementUnknown}
"after", {CSSSelector::PseudoClassUnknown, CSSSelector::PseudoElementAfter}
"any-link", {CSSSelector::PseudoClassAnyLink, CSSSelector::PseudoElementUnknown}
"before", {CSSSelector::PseudoClassUnknown, CSSSelector::PseudoElementBefore}
"checked", {CSSSelector::PseudoClassChecked, CSSSelector::PseudoElementUnknown}
"corner-present", {CSSSelector::PseudoClassCornerPresent, CSSSelector::PseudoElementUnknown}
"decrement", {CSSSelector::PseudoClassDecrement, CSSSelector::PseudoElementUnknown}
"default", {CSSSelector::PseudoClassDefault, CSSSelector::PseudoElementUnknown}
"dir(", {CSSSelector::PseudoClassDir, CSSSelector::PseudoElementUnknown}
"disabled", {CSSSelector::PseudoClassDisabled, CSSSelector::PseudoElementUnknown}
"double-button", {CSSSelector::PseudoClassDoubleButton, CSSSelector::PseudoElementUnknown}
"empty", {CSSSelector::PseudoClassEmpty, CSSSelector::PseudoElementUnknown}
"enabled", {CSSSelector::PseudoClassEnabled, CSSSelector::PseudoElementUnknown}
"end", {CSSSelector::PseudoClassEnd, CSSSelector::PseudoElementUnknown}
"first-child", {CSSSelector::PseudoClassFirstChild, CSSSelector::PseudoElementUnknown}
"first-letter", {CSSSelector::PseudoClassUnknown, CSSSelector::PseudoElementFirstLetter}
"first-line", {CSSSelector::PseudoClassUnknown, CSSSelector::PseudoElementFirstLine}
"first-of-type", {CSSSelector::PseudoClassFirstOfType, CSSSelector::PseudoElementUnknown}
"focus", {CSSSelector::PseudoClassFocus, CSSSelector::PseudoElementUnknown}
"horizontal", {CSSSelector::PseudoClassHorizontal, CSSSelector::PseudoElementUnknown}
"hover", {CSSSelector::PseudoClassHover, CSSSelector::PseudoElementUnknown}
"in-range", {CSSSelector::PseudoClassInRange, CSSSelector::PseudoElementUnknown}
"increment", {CSSSelector::PseudoClassIncrement, CSSSelector::PseudoElementUnknown}
"indeterminate", {CSSSelector::PseudoClassIndeterminate, CSSSelector::PseudoElementUnknown}
"invalid", {CSSSelector::PseudoClassInvalid, CSSSelector::PseudoElementUnknown}
"lang(", {CSSSelector::PseudoClassLang, CSSSelector::PseudoElementUnknown}
"last-child", {CSSSelector::PseudoClassLastChild, CSSSelector::PseudoElementUnknown}
"last-of-type", {CSSSelector::PseudoClassLastOfType, CSSSelector::PseudoElementUnknown}
"link", {CSSSelector::PseudoClassLink, CSSSelector::PseudoElementUnknown}
"matches(", {CSSSelector::PseudoClassMatches, CSSSelector::PseudoElementUnknown}
"no-button", {CSSSelector::PseudoClassNoButton, CSSSelector::PseudoElementUnknown}
"not(", {CSSSelector::PseudoClassNot, CSSSelector::PseudoElementUnknown}
"nth-child(", {CSSSelector::PseudoClassNthChild, CSSSelector::PseudoElementUnknown}
"nth-last-child(", {CSSSelector::PseudoClassNthLastChild, CSSSelector::PseudoElementUnknown}
"nth-last-of-type(", {CSSSelector::PseudoClassNthLastOfType, CSSSelector::PseudoElementUnknown}
"nth-of-type(", {CSSSelector::PseudoClassNthOfType, CSSSelector::PseudoElementUnknown}
"only-child", {CSSSelector::PseudoClassOnlyChild, CSSSelector::PseudoElementUnknown}
"only-of-type", {CSSSelector::PseudoClassOnlyOfType, CSSSelector::PseudoElementUnknown}
"optional", {CSSSelector::PseudoClassOptional, CSSSelector::PseudoElementUnknown}
"out-of-range", {CSSSelector::PseudoClassOutOfRange, CSSSelector::PseudoElementUnknown}
"placeholder-shown", {CSSSelector::PseudoClassPlaceholderShown, CSSSelector::PseudoElementUnknown}
"read-only", {CSSSelector::PseudoClassReadOnly, CSSSelector::PseudoElementUnknown}
"read-write", {CSSSelector::PseudoClassReadWrite, CSSSelector::PseudoElementUnknown}
"required", {CSSSelector::PseudoClassRequired, CSSSelector::PseudoElementUnknown}
"role(", {CSSSelector::PseudoClassRole, CSSSelector::PseudoElementUnknown}
"root", {CSSSelector::PseudoClassRoot, CSSSelector::PseudoElementUnknown}
"scope", {CSSSelector::PseudoClassScope, CSSSelector::PseudoElementUnknown}
"single-button", {CSSSelector::PseudoClassSingleButton, CSSSelector::PseudoElementUnknown}
"start", {CSSSelector::PseudoClassStart, CSSSelector::PseudoElementUnknown}
"target", {CSSSelector::PseudoClassTarget, CSSSelector::PseudoElementUnknown}
"valid", {CSSSelector::PseudoClassValid, CSSSelector::PseudoElementUnknown}
"vertical", {CSSSelector::PseudoClassVertical, CSSSelector::PseudoElementUnknown}
"visited", {CSSSelector::PseudoClassVisited, CSSSelector::PseudoElementUnknown}
"window-inactive", {CSSSelector::PseudoClassWindowInactive, CSSSelector::PseudoElementUnknown}
"-webkit-animating-full-screen-transition", {CSSSelector::PseudoClassAnimatingFullScreenTransition, CSSSelector::PseudoElementUnknown}
"-webkit-full-screen", {CSSSelector::PseudoClassFullScreen, CSSSelector::PseudoElementUnknown}
"-webkit-full-screen-ancestor", {CSSSelector::PseudoClassFullScreenAncestor, CSSSelector::PseudoElementUnknown}
"-webkit-full-screen-document", {CSSSelector::PseudoClassFullScreenDocument, CSSSelector::PseudoElementUnknown}
"future", {CSSSelector::PseudoClassFuture, CSSSelector::PseudoElementUnknown}
"past", {CSSSelector::PseudoClassPast, CSSSelector::PseudoElementUnknown}
%%

static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* parsePseudoClassAndCompatibilityElementString(const LChar* characters, unsigned length)
{
    return SelectorPseudoClassAndCompatibilityElementMapHash::in_word_set(reinterpret_cast<const char*>(characters), length);
}

static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* parsePseudoClassAndCompatibilityElementString(const UChar* characters, unsigned length)
{
    const unsigned maxKeywordLength = 40;
    LChar buffer[maxKeywordLength];
    if (length > maxKeywordLength)
        return nullptr;

    for (unsigned i = 0; i < length; ++i) {
        UChar character = characters[i];
        if (character & ~0xff)
            return nullptr;

        buffer[i] = static_cast<LChar>(character);
    }
    return parsePseudoClassAndCompatibilityElementString(buffer, length);
}

PseudoClassOrCompatibilityPseudoElement parsePseudoClassAndCompatibilityElementString(const CSSParserString& pseudoTypeString)
{
    const SelectorPseudoClassOrCompatibilityPseudoElementEntry* entry;
    if (pseudoTypeString.is8Bit())
        entry = parsePseudoClassAndCompatibilityElementString(pseudoTypeString.characters8(), pseudoTypeString.length());
    else
        entry = parsePseudoClassAndCompatibilityElementString(pseudoTypeString.characters16(), pseudoTypeString.length());

    if (entry)
        return entry->pseudoTypes;
    return { CSSSelector::PseudoClassUnknown, CSSSelector::PseudoElementUnknown };
}

} // namespace WebCore

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

