/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA_V2)

#include "JSMediaKeySession.h"

#include "Event.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSMediaKeyError.h"
#include "MediaKeyError.h"
#include "MediaKeySession.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionUpdate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionClose(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionAddEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionRemoveEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionDispatchEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMediaKeySessionError(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaKeySessionKeySystem(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaKeySessionSessionId(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaKeySessionOnwebkitkeyadded(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMediaKeySessionOnwebkitkeyadded(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaKeySessionOnwebkitkeyerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMediaKeySessionOnwebkitkeyerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaKeySessionOnwebkitkeymessage(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMediaKeySessionOnwebkitkeymessage(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaKeySessionConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSMediaKeySessionPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaKeySessionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaKeySessionPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaKeySessionPrototype>(vm.heap)) JSMediaKeySessionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaKeySessionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSMediaKeySessionConstructor : public DOMConstructorObject {
private:
    JSMediaKeySessionConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSMediaKeySessionConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSMediaKeySessionConstructor* ptr = new (NotNull, JSC::allocateCell<JSMediaKeySessionConstructor>(vm.heap)) JSMediaKeySessionConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSMediaKeySessionConstructor::s_info = { "WebKitMediaKeySessionConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeySessionConstructor) };

JSMediaKeySessionConstructor::JSMediaKeySessionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaKeySessionConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSMediaKeySession::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebKitMediaKeySession"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSMediaKeySessionPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "error", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionError), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "keySystem", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionKeySystem), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "sessionId", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionSessionId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "onwebkitkeyadded", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionOnwebkitkeyadded), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaKeySessionOnwebkitkeyadded) },
    { "onwebkitkeyerror", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionOnwebkitkeyerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaKeySessionOnwebkitkeyerror) },
    { "onwebkitkeymessage", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeySessionOnwebkitkeymessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaKeySessionOnwebkitkeymessage) },
    { "update", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeySessionPrototypeFunctionUpdate), (intptr_t) (1) },
    { "close", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeySessionPrototypeFunctionClose), (intptr_t) (0) },
    { "addEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeySessionPrototypeFunctionAddEventListener), (intptr_t) (2) },
    { "removeEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeySessionPrototypeFunctionRemoveEventListener), (intptr_t) (2) },
    { "dispatchEvent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeySessionPrototypeFunctionDispatchEvent), (intptr_t) (1) },
};

const ClassInfo JSMediaKeySessionPrototype::s_info = { "WebKitMediaKeySessionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeySessionPrototype) };

void JSMediaKeySessionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaKeySessionPrototypeTableValues, *this);
}

const ClassInfo JSMediaKeySession::s_info = { "WebKitMediaKeySession", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeySession) };

JSMediaKeySession::JSMediaKeySession(Structure* structure, JSDOMGlobalObject* globalObject, Ref<MediaKeySession>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSMediaKeySession::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaKeySessionPrototype::create(vm, globalObject, JSMediaKeySessionPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaKeySession::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaKeySession>(vm, globalObject);
}

void JSMediaKeySession::destroy(JSC::JSCell* cell)
{
    JSMediaKeySession* thisObject = static_cast<JSMediaKeySession*>(cell);
    thisObject->JSMediaKeySession::~JSMediaKeySession();
}

JSMediaKeySession::~JSMediaKeySession()
{
    releaseImpl();
}

EncodedJSValue jsMediaKeySessionError(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "error");
        return throwGetterTypeError(*exec, "MediaKeySession", "error");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.error()));
    return JSValue::encode(result);
}


EncodedJSValue jsMediaKeySessionKeySystem(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "keySystem");
        return throwGetterTypeError(*exec, "MediaKeySession", "keySystem");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.keySystem());
    return JSValue::encode(result);
}


EncodedJSValue jsMediaKeySessionSessionId(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "sessionId");
        return throwGetterTypeError(*exec, "MediaKeySession", "sessionId");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.sessionId());
    return JSValue::encode(result);
}


EncodedJSValue jsMediaKeySessionOnwebkitkeyadded(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "onwebkitkeyadded");
        return throwGetterTypeError(*exec, "MediaKeySession", "onwebkitkeyadded");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().webkitkeyaddedEvent));
}


EncodedJSValue jsMediaKeySessionOnwebkitkeyerror(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "onwebkitkeyerror");
        return throwGetterTypeError(*exec, "MediaKeySession", "onwebkitkeyerror");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().webkitkeyerrorEvent));
}


EncodedJSValue jsMediaKeySessionOnwebkitkeymessage(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeySession", "onwebkitkeymessage");
        return throwGetterTypeError(*exec, "MediaKeySession", "onwebkitkeymessage");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().webkitkeymessageEvent));
}


EncodedJSValue jsMediaKeySessionConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSMediaKeySessionPrototype* domObject = jsDynamicCast<JSMediaKeySessionPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSMediaKeySession::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSMediaKeySessionOnwebkitkeyadded(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MediaKeySession", "onwebkitkeyadded");
        else
            throwSetterTypeError(*exec, "MediaKeySession", "onwebkitkeyadded");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().webkitkeyaddedEvent, value);
}


void setJSMediaKeySessionOnwebkitkeyerror(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MediaKeySession", "onwebkitkeyerror");
        else
            throwSetterTypeError(*exec, "MediaKeySession", "onwebkitkeyerror");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().webkitkeyerrorEvent, value);
}


void setJSMediaKeySessionOnwebkitkeymessage(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeySessionPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MediaKeySession", "onwebkitkeymessage");
        else
            throwSetterTypeError(*exec, "MediaKeySession", "onwebkitkeymessage");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().webkitkeymessageEvent, value);
}


JSValue JSMediaKeySession::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaKeySessionConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionUpdate(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeySession", "update");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeySession::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    RefPtr<Uint8Array> key = toUint8Array(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.update(key.get(), ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeySession", "close");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeySession::info());
    auto& impl = castedThis->impl();
    impl.close();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeySession", "addEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeySession::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForAdd(*exec, *asObject(listener), *castedThis), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeySession", "removeEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeySession::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForRemove(*exec, *asObject(listener), *castedThis).ptr(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsMediaKeySessionPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeySession* castedThis = jsDynamicCast<JSMediaKeySession*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeySession", "dispatchEvent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeySession::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event = JSEvent::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.dispatchEvent(event, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSMediaKeySession::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSMediaKeySession*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

bool JSMediaKeySessionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsMediaKeySession = jsCast<JSMediaKeySession*>(handle.slot()->asCell());
    if (jsMediaKeySession->impl().hasPendingActivity())
        return true;
    if (jsMediaKeySession->impl().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaKeySessionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaKeySession = jsCast<JSMediaKeySession*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaKeySession->impl(), jsMediaKeySession);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaKeySession@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15MediaKeySessionE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, MediaKeySession* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMediaKeySession>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaKeySession@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore15MediaKeySessionE[2];
#if COMPILER(CLANG)
    // If this fails MediaKeySession does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(MediaKeySession), MediaKeySession_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaKeySession has subclasses. If MediaKeySession has subclasses that get passed
    // to toJS() we currently require MediaKeySession you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSMediaKeySession>(globalObject, impl);
}

MediaKeySession* JSMediaKeySession::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaKeySession*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA_V2)
