/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SPEECH_SYNTHESIS)

#include "JSSpeechSynthesisUtterance.h"

#include "Event.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSSpeechSynthesisVoice.h"
#include "SpeechSynthesisUtterance.h"
#include "SpeechSynthesisVoice.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionAddEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionRemoveEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionDispatchEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSpeechSynthesisUtteranceText(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceText(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceLang(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceLang(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceVoice(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceVoice(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceVolume(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceVolume(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceRate(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceRate(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtterancePitch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtterancePitch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnend(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnend(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnpause(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnpause(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnresume(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnresume(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnmark(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnmark(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnboundary(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSSpeechSynthesisUtteranceOnboundary(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSSpeechSynthesisUtterancePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSSpeechSynthesisUtterancePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSpeechSynthesisUtterancePrototype* ptr = new (NotNull, JSC::allocateCell<JSSpeechSynthesisUtterancePrototype>(vm.heap)) JSSpeechSynthesisUtterancePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSpeechSynthesisUtterancePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSSpeechSynthesisUtteranceConstructor : public DOMConstructorObject {
private:
    JSSpeechSynthesisUtteranceConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSSpeechSynthesisUtteranceConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSSpeechSynthesisUtteranceConstructor* ptr = new (NotNull, JSC::allocateCell<JSSpeechSynthesisUtteranceConstructor>(vm.heap)) JSSpeechSynthesisUtteranceConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSSpeechSynthesisUtterance(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

EncodedJSValue JSC_HOST_CALL JSSpeechSynthesisUtteranceConstructor::constructJSSpeechSynthesisUtterance(ExecState* exec)
{
    auto* castedThis = jsCast<JSSpeechSynthesisUtteranceConstructor*>(exec->callee());
    String text = exec->argumentCount() <= 0 ? String() : exec->uncheckedArgument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwConstructorDocumentUnavailableError(*exec, "SpeechSynthesisUtterance");
    RefPtr<SpeechSynthesisUtterance> object = SpeechSynthesisUtterance::create(*context, text);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSSpeechSynthesisUtteranceConstructor::s_info = { "SpeechSynthesisUtteranceConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtteranceConstructor) };

JSSpeechSynthesisUtteranceConstructor::JSSpeechSynthesisUtteranceConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSpeechSynthesisUtteranceConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSpeechSynthesisUtterance::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SpeechSynthesisUtterance"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

ConstructType JSSpeechSynthesisUtteranceConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSSpeechSynthesisUtterance;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSSpeechSynthesisUtterancePrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "text", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceText) },
    { "lang", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceLang), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceLang) },
    { "voice", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceVoice), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceVoice) },
    { "volume", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceVolume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceVolume) },
    { "rate", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceRate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceRate) },
    { "pitch", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtterancePitch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtterancePitch) },
    { "onstart", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnstart) },
    { "onend", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnend) },
    { "onerror", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnerror) },
    { "onpause", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnpause), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnpause) },
    { "onresume", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnresume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnresume) },
    { "onmark", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnmark), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnmark) },
    { "onboundary", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnboundary), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnboundary) },
    { "addEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSpeechSynthesisUtterancePrototypeFunctionAddEventListener), (intptr_t) (2) },
    { "removeEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSpeechSynthesisUtterancePrototypeFunctionRemoveEventListener), (intptr_t) (2) },
    { "dispatchEvent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSpeechSynthesisUtterancePrototypeFunctionDispatchEvent), (intptr_t) (1) },
};

const ClassInfo JSSpeechSynthesisUtterancePrototype::s_info = { "SpeechSynthesisUtterancePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtterancePrototype) };

void JSSpeechSynthesisUtterancePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSpeechSynthesisUtterancePrototypeTableValues, *this);
}

const ClassInfo JSSpeechSynthesisUtterance::s_info = { "SpeechSynthesisUtterance", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtterance) };

JSSpeechSynthesisUtterance::JSSpeechSynthesisUtterance(Structure* structure, JSDOMGlobalObject* globalObject, Ref<SpeechSynthesisUtterance>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSSpeechSynthesisUtterance::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSpeechSynthesisUtterancePrototype::create(vm, globalObject, JSSpeechSynthesisUtterancePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSpeechSynthesisUtterance::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSpeechSynthesisUtterance>(vm, globalObject);
}

void JSSpeechSynthesisUtterance::destroy(JSC::JSCell* cell)
{
    JSSpeechSynthesisUtterance* thisObject = static_cast<JSSpeechSynthesisUtterance*>(cell);
    thisObject->JSSpeechSynthesisUtterance::~JSSpeechSynthesisUtterance();
}

JSSpeechSynthesisUtterance::~JSSpeechSynthesisUtterance()
{
    releaseImpl();
}

EncodedJSValue jsSpeechSynthesisUtteranceText(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "text");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "text");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.text());
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtteranceLang(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "lang");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "lang");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.lang());
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtteranceVoice(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "voice");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "voice");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.voice()));
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtteranceVolume(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "volume");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "volume");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.volume());
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtteranceRate(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "rate");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "rate");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.rate());
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtterancePitch(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "pitch");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "pitch");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.pitch());
    return JSValue::encode(result);
}


EncodedJSValue jsSpeechSynthesisUtteranceOnstart(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onstart");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onstart");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().startEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnend(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onend");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onend");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().endEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnerror(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onerror");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onerror");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().errorEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnpause(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onpause");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onpause");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().pauseEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnresume(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onresume");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onresume");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().resumeEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnmark(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onmark");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onmark");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().markEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceOnboundary(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SpeechSynthesisUtterance", "onboundary");
        return throwGetterTypeError(*exec, "SpeechSynthesisUtterance", "onboundary");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().boundaryEvent));
}


EncodedJSValue jsSpeechSynthesisUtteranceConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSSpeechSynthesisUtterancePrototype* domObject = jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSSpeechSynthesisUtterance::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSSpeechSynthesisUtteranceText(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "text");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "text");
        return;
    }
    auto& impl = castedThis->impl();
    String nativeValue = value.toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setText(nativeValue);
}


void setJSSpeechSynthesisUtteranceLang(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "lang");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "lang");
        return;
    }
    auto& impl = castedThis->impl();
    String nativeValue = value.toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setLang(nativeValue);
}


void setJSSpeechSynthesisUtteranceVoice(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "voice");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "voice");
        return;
    }
    auto& impl = castedThis->impl();
    SpeechSynthesisVoice* nativeValue = JSSpeechSynthesisVoice::toWrapped(value);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setVoice(nativeValue);
}


void setJSSpeechSynthesisUtteranceVolume(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "volume");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "volume");
        return;
    }
    auto& impl = castedThis->impl();
    float nativeValue = value.toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setVolume(nativeValue);
}


void setJSSpeechSynthesisUtteranceRate(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "rate");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "rate");
        return;
    }
    auto& impl = castedThis->impl();
    float nativeValue = value.toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setRate(nativeValue);
}


void setJSSpeechSynthesisUtterancePitch(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "pitch");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "pitch");
        return;
    }
    auto& impl = castedThis->impl();
    float nativeValue = value.toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setPitch(nativeValue);
}


void setJSSpeechSynthesisUtteranceOnstart(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onstart");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onstart");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().startEvent, value);
}


void setJSSpeechSynthesisUtteranceOnend(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onend");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onend");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().endEvent, value);
}


void setJSSpeechSynthesisUtteranceOnerror(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onerror");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onerror");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().errorEvent, value);
}


void setJSSpeechSynthesisUtteranceOnpause(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onpause");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onpause");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().pauseEvent, value);
}


void setJSSpeechSynthesisUtteranceOnresume(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onresume");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onresume");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().resumeEvent, value);
}


void setJSSpeechSynthesisUtteranceOnmark(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onmark");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onmark");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().markEvent, value);
}


void setJSSpeechSynthesisUtteranceOnboundary(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "SpeechSynthesisUtterance", "onboundary");
        else
            throwSetterTypeError(*exec, "SpeechSynthesisUtterance", "onboundary");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().boundaryEvent, value);
}


JSValue JSSpeechSynthesisUtterance::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSpeechSynthesisUtteranceConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SpeechSynthesisUtterance", "addEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSpeechSynthesisUtterance::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForAdd(*exec, *asObject(listener), *castedThis), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SpeechSynthesisUtterance", "removeEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSpeechSynthesisUtterance::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForRemove(*exec, *asObject(listener), *castedThis).ptr(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsSpeechSynthesisUtterancePrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSSpeechSynthesisUtterance* castedThis = jsDynamicCast<JSSpeechSynthesisUtterance*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "SpeechSynthesisUtterance", "dispatchEvent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSpeechSynthesisUtterance::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event = JSEvent::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.dispatchEvent(event, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSSpeechSynthesisUtterance::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSpeechSynthesisUtterance*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

bool JSSpeechSynthesisUtteranceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsSpeechSynthesisUtterance = jsCast<JSSpeechSynthesisUtterance*>(handle.slot()->asCell());
    if (jsSpeechSynthesisUtterance->impl().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSpeechSynthesisUtteranceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSpeechSynthesisUtterance = jsCast<JSSpeechSynthesisUtterance*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSpeechSynthesisUtterance->impl(), jsSpeechSynthesisUtterance);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SpeechSynthesisUtterance@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore24SpeechSynthesisUtteranceE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, SpeechSynthesisUtterance* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSpeechSynthesisUtterance>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SpeechSynthesisUtterance@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore24SpeechSynthesisUtteranceE[2];
#if COMPILER(CLANG)
    // If this fails SpeechSynthesisUtterance does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(SpeechSynthesisUtterance), SpeechSynthesisUtterance_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SpeechSynthesisUtterance has subclasses. If SpeechSynthesisUtterance has subclasses that get passed
    // to toJS() we currently require SpeechSynthesisUtterance you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSSpeechSynthesisUtterance>(globalObject, impl);
}

SpeechSynthesisUtterance* JSSpeechSynthesisUtterance::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSSpeechSynthesisUtterance*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(SPEECH_SYNTHESIS)
