/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSRGBColor.h"

#include "CSSPrimitiveValue.h"
#include "JSCSSPrimitiveValue.h"
#include "JSDOMBinding.h"
#include "RGBColor.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsRGBColorRed(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRGBColorGreen(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRGBColorBlue(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRGBColorConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSRGBColorPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSRGBColorPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRGBColorPrototype* ptr = new (NotNull, JSC::allocateCell<JSRGBColorPrototype>(vm.heap)) JSRGBColorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRGBColorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSRGBColorConstructor : public DOMConstructorObject {
private:
    JSRGBColorConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSRGBColorConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSRGBColorConstructor* ptr = new (NotNull, JSC::allocateCell<JSRGBColorConstructor>(vm.heap)) JSRGBColorConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSRGBColorConstructor::s_info = { "RGBColorConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRGBColorConstructor) };

JSRGBColorConstructor::JSRGBColorConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSRGBColorConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSRGBColor::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("RGBColor"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSRGBColorPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRGBColorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "red", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRGBColorRed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "green", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRGBColorGreen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "blue", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRGBColorBlue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSRGBColorPrototype::s_info = { "RGBColorPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRGBColorPrototype) };

void JSRGBColorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRGBColorPrototypeTableValues, *this);
}

const ClassInfo JSRGBColor::s_info = { "RGBColor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRGBColor) };

JSRGBColor::JSRGBColor(Structure* structure, JSDOMGlobalObject* globalObject, Ref<RGBColor>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSRGBColor::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRGBColorPrototype::create(vm, globalObject, JSRGBColorPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRGBColor::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRGBColor>(vm, globalObject);
}

void JSRGBColor::destroy(JSC::JSCell* cell)
{
    JSRGBColor* thisObject = static_cast<JSRGBColor*>(cell);
    thisObject->JSRGBColor::~JSRGBColor();
}

JSRGBColor::~JSRGBColor()
{
    releaseImpl();
}

EncodedJSValue jsRGBColorRed(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRGBColor* castedThis = jsDynamicCast<JSRGBColor*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRGBColorPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "RGBColor", "red");
        return throwGetterTypeError(*exec, "RGBColor", "red");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.red()));
    return JSValue::encode(result);
}


EncodedJSValue jsRGBColorGreen(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRGBColor* castedThis = jsDynamicCast<JSRGBColor*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRGBColorPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "RGBColor", "green");
        return throwGetterTypeError(*exec, "RGBColor", "green");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.green()));
    return JSValue::encode(result);
}


EncodedJSValue jsRGBColorBlue(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRGBColor* castedThis = jsDynamicCast<JSRGBColor*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRGBColorPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "RGBColor", "blue");
        return throwGetterTypeError(*exec, "RGBColor", "blue");
    }
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.blue()));
    return JSValue::encode(result);
}


EncodedJSValue jsRGBColorConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSRGBColorPrototype* domObject = jsDynamicCast<JSRGBColorPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSRGBColor::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSRGBColor::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRGBColorConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSRGBColorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRGBColorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRGBColor = jsCast<JSRGBColor*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRGBColor->impl(), jsRGBColor);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, RGBColor* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRGBColor>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to RGBColor.
    COMPILE_ASSERT(!__is_polymorphic(RGBColor), RGBColor_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSRGBColor>(globalObject, impl);
}

RGBColor* JSRGBColor::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRGBColor*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
