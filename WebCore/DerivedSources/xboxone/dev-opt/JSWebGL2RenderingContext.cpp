/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL2)

#include "JSWebGL2RenderingContext.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLVideoElement.h"
#include "JSImageData.h"
#include "JSWebGLActiveInfo.h"
#include "JSWebGLBuffer.h"
#include "JSWebGLProgram.h"
#include "JSWebGLQuery.h"
#include "JSWebGLSampler.h"
#include "JSWebGLSync.h"
#include "JSWebGLTransformFeedback.h"
#include "JSWebGLUniformLocation.h"
#include "JSWebGLVertexArrayObject.h"
#include "WebGL2RenderingContext.h"
#include "WebGLActiveInfo.h"
#include "WebGLQuery.h"
#include "WebGLSampler.h"
#include "WebGLSync.h"
#include "WebGLTransformFeedback.h"
#include "WebGLVertexArrayObject.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCopyBufferSubData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBlitFramebuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionFramebufferTextureLayer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetInternalformatParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionInvalidateFramebuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionInvalidateSubFramebuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionReadBuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionRenderbufferStorageMultisample(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexStorage2D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexStorage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexImage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCopyTexSubImage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCompressedTexImage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCompressedTexSubImage3D(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetFragDataLocation(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform1ui(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform2ui(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform3ui(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform4ui(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform1uiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform2uiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform3uiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform4uiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x3fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x2fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x4fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x2fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x4fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x3fv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4i(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4iv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4ui(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4uiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribIPointer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribDivisor(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawArraysInstanced(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawElementsInstanced(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawRangeElements(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawBuffers(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferuiv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferfv(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferfi(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBeginQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionEndQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetQuery(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetQueryParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateSampler(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteSampler(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsSampler(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindSampler(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionSamplerParameteri(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionSamplerParameterf(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetSamplerParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionFenceSync(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsSync(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteSync(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClientWaitSync(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionWaitSync(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetSyncParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBeginTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionEndTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTransformFeedbackVaryings(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetTransformFeedbackVarying(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionPauseTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionResumeTransformFeedback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindBufferBase(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindBufferRange(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetIndexedParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetUniformIndices(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniforms(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetUniformBlockIndex(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockParameter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockName(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformBlockBinding(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateVertexArray(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteVertexArray(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsVertexArray(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindVertexArray(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsWebGL2RenderingContextConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSWebGL2RenderingContextPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSWebGL2RenderingContextPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebGL2RenderingContextPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebGL2RenderingContextPrototype>(vm.heap)) JSWebGL2RenderingContextPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebGL2RenderingContextPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSWebGL2RenderingContextConstructor : public DOMConstructorObject {
private:
    JSWebGL2RenderingContextConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSWebGL2RenderingContextConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSWebGL2RenderingContextConstructor* ptr = new (NotNull, JSC::allocateCell<JSWebGL2RenderingContextConstructor>(vm.heap)) JSWebGL2RenderingContextConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

/* Hash table for constructor */

static const HashTableValue JSWebGL2RenderingContextConstructorTableValues[] =
{
    { "READ_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0C02), (intptr_t) (0) },
    { "UNPACK_ROW_LENGTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF2), (intptr_t) (0) },
    { "UNPACK_SKIP_ROWS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF3), (intptr_t) (0) },
    { "UNPACK_SKIP_PIXELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF4), (intptr_t) (0) },
    { "PACK_ROW_LENGTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D02), (intptr_t) (0) },
    { "PACK_SKIP_ROWS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D03), (intptr_t) (0) },
    { "PACK_SKIP_PIXELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D04), (intptr_t) (0) },
    { "COLOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1800), (intptr_t) (0) },
    { "DEPTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1801), (intptr_t) (0) },
    { "STENCIL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1802), (intptr_t) (0) },
    { "RED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1903), (intptr_t) (0) },
    { "RGB8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8051), (intptr_t) (0) },
    { "RGBA8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8058), (intptr_t) (0) },
    { "RGB10_A2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8059), (intptr_t) (0) },
    { "TEXTURE_BINDING_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806A), (intptr_t) (0) },
    { "UNPACK_SKIP_IMAGES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806D), (intptr_t) (0) },
    { "UNPACK_IMAGE_HEIGHT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806E), (intptr_t) (0) },
    { "TEXTURE_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806F), (intptr_t) (0) },
    { "TEXTURE_WRAP_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8072), (intptr_t) (0) },
    { "MAX_3D_TEXTURE_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8073), (intptr_t) (0) },
    { "UNSIGNED_INT_2_10_10_10_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8368), (intptr_t) (0) },
    { "MAX_ELEMENTS_VERTICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x80E8), (intptr_t) (0) },
    { "MAX_ELEMENTS_INDICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x80E9), (intptr_t) (0) },
    { "TEXTURE_MIN_LOD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813A), (intptr_t) (0) },
    { "TEXTURE_MAX_LOD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813B), (intptr_t) (0) },
    { "TEXTURE_BASE_LEVEL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813C), (intptr_t) (0) },
    { "TEXTURE_MAX_LEVEL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813D), (intptr_t) (0) },
    { "MIN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8007), (intptr_t) (0) },
    { "MAX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8008), (intptr_t) (0) },
    { "DEPTH_COMPONENT24", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x81A6), (intptr_t) (0) },
    { "MAX_TEXTURE_LOD_BIAS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84FD), (intptr_t) (0) },
    { "TEXTURE_COMPARE_MODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884C), (intptr_t) (0) },
    { "TEXTURE_COMPARE_FUNC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884D), (intptr_t) (0) },
    { "CURRENT_QUERY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8865), (intptr_t) (0) },
    { "QUERY_RESULT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8866), (intptr_t) (0) },
    { "QUERY_RESULT_AVAILABLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8867), (intptr_t) (0) },
    { "STREAM_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E1), (intptr_t) (0) },
    { "STREAM_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E2), (intptr_t) (0) },
    { "STATIC_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E5), (intptr_t) (0) },
    { "STATIC_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E6), (intptr_t) (0) },
    { "DYNAMIC_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E9), (intptr_t) (0) },
    { "DYNAMIC_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EA), (intptr_t) (0) },
    { "MAX_DRAW_BUFFERS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8824), (intptr_t) (0) },
    { "DRAW_BUFFER0", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8825), (intptr_t) (0) },
    { "DRAW_BUFFER1", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8826), (intptr_t) (0) },
    { "DRAW_BUFFER2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8827), (intptr_t) (0) },
    { "DRAW_BUFFER3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8828), (intptr_t) (0) },
    { "DRAW_BUFFER4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8829), (intptr_t) (0) },
    { "DRAW_BUFFER5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882A), (intptr_t) (0) },
    { "DRAW_BUFFER6", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882B), (intptr_t) (0) },
    { "DRAW_BUFFER7", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882C), (intptr_t) (0) },
    { "DRAW_BUFFER8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882D), (intptr_t) (0) },
    { "DRAW_BUFFER9", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882E), (intptr_t) (0) },
    { "DRAW_BUFFER10", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882F), (intptr_t) (0) },
    { "DRAW_BUFFER11", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8830), (intptr_t) (0) },
    { "DRAW_BUFFER12", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8831), (intptr_t) (0) },
    { "DRAW_BUFFER13", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8832), (intptr_t) (0) },
    { "DRAW_BUFFER14", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8833), (intptr_t) (0) },
    { "DRAW_BUFFER15", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8834), (intptr_t) (0) },
    { "MAX_FRAGMENT_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B49), (intptr_t) (0) },
    { "MAX_VERTEX_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B4A), (intptr_t) (0) },
    { "SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B5F), (intptr_t) (0) },
    { "SAMPLER_2D_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B62), (intptr_t) (0) },
    { "FRAGMENT_SHADER_DERIVATIVE_HINT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B8B), (intptr_t) (0) },
    { "PIXEL_PACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EB), (intptr_t) (0) },
    { "PIXEL_UNPACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EC), (intptr_t) (0) },
    { "PIXEL_PACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88ED), (intptr_t) (0) },
    { "PIXEL_UNPACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EF), (intptr_t) (0) },
    { "FLOAT_MAT2x3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B65), (intptr_t) (0) },
    { "FLOAT_MAT2x4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B66), (intptr_t) (0) },
    { "FLOAT_MAT3x2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B67), (intptr_t) (0) },
    { "FLOAT_MAT3x4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B68), (intptr_t) (0) },
    { "FLOAT_MAT4x2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B69), (intptr_t) (0) },
    { "FLOAT_MAT4x3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B6A), (intptr_t) (0) },
    { "SRGB", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C40), (intptr_t) (0) },
    { "SRGB8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C41), (intptr_t) (0) },
    { "SRGB8_ALPHA8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C43), (intptr_t) (0) },
    { "COMPARE_REF_TO_TEXTURE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884E), (intptr_t) (0) },
    { "RGBA32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8814), (intptr_t) (0) },
    { "RGB32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8815), (intptr_t) (0) },
    { "RGBA16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x881A), (intptr_t) (0) },
    { "RGB16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x881B), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FD), (intptr_t) (0) },
    { "MAX_ARRAY_TEXTURE_LAYERS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FF), (intptr_t) (0) },
    { "MIN_PROGRAM_TEXEL_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8904), (intptr_t) (0) },
    { "MAX_PROGRAM_TEXEL_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8905), (intptr_t) (0) },
    { "MAX_VARYING_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B4B), (intptr_t) (0) },
    { "TEXTURE_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C1A), (intptr_t) (0) },
    { "TEXTURE_BINDING_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C1D), (intptr_t) (0) },
    { "R11F_G11F_B10F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3A), (intptr_t) (0) },
    { "UNSIGNED_INT_10F_11F_11F_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3B), (intptr_t) (0) },
    { "RGB9_E5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3D), (intptr_t) (0) },
    { "UNSIGNED_INT_5_9_9_9_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3E), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_MODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C7F), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C80), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_VARYINGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C83), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C84), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C85), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C88), (intptr_t) (0) },
    { "RASTERIZER_DISCARD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C89), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8A), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8B), (intptr_t) (0) },
    { "INTERLEAVED_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8C), (intptr_t) (0) },
    { "SEPARATE_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8D), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8E), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8F), (intptr_t) (0) },
    { "RGBA32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D70), (intptr_t) (0) },
    { "RGB32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D71), (intptr_t) (0) },
    { "RGBA16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D76), (intptr_t) (0) },
    { "RGB16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D77), (intptr_t) (0) },
    { "RGBA8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D7C), (intptr_t) (0) },
    { "RGB8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D7D), (intptr_t) (0) },
    { "RGBA32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D82), (intptr_t) (0) },
    { "RGB32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D83), (intptr_t) (0) },
    { "RGBA16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D88), (intptr_t) (0) },
    { "RGB16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D89), (intptr_t) (0) },
    { "RGBA8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D8E), (intptr_t) (0) },
    { "RGB8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D8F), (intptr_t) (0) },
    { "RED_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D94), (intptr_t) (0) },
    { "RGB_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D98), (intptr_t) (0) },
    { "RGBA_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D99), (intptr_t) (0) },
    { "SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC1), (intptr_t) (0) },
    { "SAMPLER_2D_ARRAY_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC4), (intptr_t) (0) },
    { "SAMPLER_CUBE_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC5), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC6), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC7), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC8), (intptr_t) (0) },
    { "INT_SAMPLER_2D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCA), (intptr_t) (0) },
    { "INT_SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCB), (intptr_t) (0) },
    { "INT_SAMPLER_CUBE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCC), (intptr_t) (0) },
    { "INT_SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCF), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_2D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD2), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD3), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_CUBE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD4), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD7), (intptr_t) (0) },
    { "DEPTH_COMPONENT32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAC), (intptr_t) (0) },
    { "DEPTH32F_STENCIL8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAD), (intptr_t) (0) },
    { "FLOAT_32_UNSIGNED_INT_24_8_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DAD), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8210), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8211), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_RED_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8212), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8213), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8214), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8215), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8216), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8217), (intptr_t) (0) },
    { "FRAMEBUFFER_DEFAULT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8218), (intptr_t) (0) },
    { "DEPTH_STENCIL_ATTACHMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x821A), (intptr_t) (0) },
    { "DEPTH_STENCIL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84F9), (intptr_t) (0) },
    { "UNSIGNED_INT_24_8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84FA), (intptr_t) (0) },
    { "DEPTH24_STENCIL8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88F0), (intptr_t) (0) },
    { "UNSIGNED_NORMALIZED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C17), (intptr_t) (0) },
    { "DRAW_FRAMEBUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA6), (intptr_t) (0) },
    { "READ_FRAMEBUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA8), (intptr_t) (0) },
    { "DRAW_FRAMEBUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA9), (intptr_t) (0) },
    { "READ_FRAMEBUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAA), (intptr_t) (0) },
    { "RENDERBUFFER_SAMPLES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAB), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CD4), (intptr_t) (0) },
    { "MAX_COLOR_ATTACHMENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CDF), (intptr_t) (0) },
    { "COLOR_ATTACHMENT1", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE1), (intptr_t) (0) },
    { "COLOR_ATTACHMENT2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE2), (intptr_t) (0) },
    { "COLOR_ATTACHMENT3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE3), (intptr_t) (0) },
    { "COLOR_ATTACHMENT4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE4), (intptr_t) (0) },
    { "COLOR_ATTACHMENT5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE5), (intptr_t) (0) },
    { "COLOR_ATTACHMENT6", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE6), (intptr_t) (0) },
    { "COLOR_ATTACHMENT7", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE7), (intptr_t) (0) },
    { "COLOR_ATTACHMENT8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE8), (intptr_t) (0) },
    { "COLOR_ATTACHMENT9", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE9), (intptr_t) (0) },
    { "COLOR_ATTACHMENT10", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEA), (intptr_t) (0) },
    { "COLOR_ATTACHMENT11", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEB), (intptr_t) (0) },
    { "COLOR_ATTACHMENT12", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEC), (intptr_t) (0) },
    { "COLOR_ATTACHMENT13", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CED), (intptr_t) (0) },
    { "COLOR_ATTACHMENT14", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEE), (intptr_t) (0) },
    { "COLOR_ATTACHMENT15", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEF), (intptr_t) (0) },
    { "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D56), (intptr_t) (0) },
    { "MAX_SAMPLES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D57), (intptr_t) (0) },
    { "HALF_FLOAT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x140B), (intptr_t) (0) },
    { "RG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8227), (intptr_t) (0) },
    { "RG_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8228), (intptr_t) (0) },
    { "R8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8229), (intptr_t) (0) },
    { "RG8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822B), (intptr_t) (0) },
    { "R16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822D), (intptr_t) (0) },
    { "R32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822E), (intptr_t) (0) },
    { "RG16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822F), (intptr_t) (0) },
    { "RG32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8230), (intptr_t) (0) },
    { "R8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8231), (intptr_t) (0) },
    { "R8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8232), (intptr_t) (0) },
    { "R16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8233), (intptr_t) (0) },
    { "R16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8234), (intptr_t) (0) },
    { "R32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8235), (intptr_t) (0) },
    { "R32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8236), (intptr_t) (0) },
    { "RG8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8237), (intptr_t) (0) },
    { "RG8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8238), (intptr_t) (0) },
    { "RG16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8239), (intptr_t) (0) },
    { "RG16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823A), (intptr_t) (0) },
    { "RG32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823B), (intptr_t) (0) },
    { "RG32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823C), (intptr_t) (0) },
    { "VERTEX_ARRAY_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x85B5), (intptr_t) (0) },
    { "R8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F94), (intptr_t) (0) },
    { "RG8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F95), (intptr_t) (0) },
    { "RGB8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F96), (intptr_t) (0) },
    { "RGBA8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F97), (intptr_t) (0) },
    { "SIGNED_NORMALIZED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F9C), (intptr_t) (0) },
    { "PRIMITIVE_RESTART_FIXED_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D69), (intptr_t) (0) },
    { "COPY_READ_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F36), (intptr_t) (0) },
    { "COPY_WRITE_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F37), (intptr_t) (0) },
    { "COPY_READ_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F36), (intptr_t) (0) },
    { "COPY_WRITE_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F37), (intptr_t) (0) },
    { "UNIFORM_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A11), (intptr_t) (0) },
    { "UNIFORM_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A28), (intptr_t) (0) },
    { "UNIFORM_BUFFER_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A29), (intptr_t) (0) },
    { "UNIFORM_BUFFER_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2A), (intptr_t) (0) },
    { "MAX_VERTEX_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2B), (intptr_t) (0) },
    { "MAX_FRAGMENT_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2D), (intptr_t) (0) },
    { "MAX_COMBINED_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2E), (intptr_t) (0) },
    { "MAX_UNIFORM_BUFFER_BINDINGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2F), (intptr_t) (0) },
    { "MAX_UNIFORM_BLOCK_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A30), (intptr_t) (0) },
    { "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A31), (intptr_t) (0) },
    { "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A33), (intptr_t) (0) },
    { "UNIFORM_BUFFER_OFFSET_ALIGNMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A34), (intptr_t) (0) },
    { "ACTIVE_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A36), (intptr_t) (0) },
    { "UNIFORM_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A37), (intptr_t) (0) },
    { "UNIFORM_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A38), (intptr_t) (0) },
    { "UNIFORM_BLOCK_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3A), (intptr_t) (0) },
    { "UNIFORM_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3B), (intptr_t) (0) },
    { "UNIFORM_ARRAY_STRIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3C), (intptr_t) (0) },
    { "UNIFORM_MATRIX_STRIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3D), (intptr_t) (0) },
    { "UNIFORM_IS_ROW_MAJOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3E), (intptr_t) (0) },
    { "UNIFORM_BLOCK_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3F), (intptr_t) (0) },
    { "UNIFORM_BLOCK_DATA_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A40), (intptr_t) (0) },
    { "UNIFORM_BLOCK_ACTIVE_UNIFORMS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A42), (intptr_t) (0) },
    { "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A43), (intptr_t) (0) },
    { "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A44), (intptr_t) (0) },
    { "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A46), (intptr_t) (0) },
    { "INVALID_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFF), (intptr_t) (0) },
    { "MAX_VERTEX_OUTPUT_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9122), (intptr_t) (0) },
    { "MAX_FRAGMENT_INPUT_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9125), (intptr_t) (0) },
    { "MAX_SERVER_WAIT_TIMEOUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9111), (intptr_t) (0) },
    { "OBJECT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9112), (intptr_t) (0) },
    { "SYNC_CONDITION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9113), (intptr_t) (0) },
    { "SYNC_STATUS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9114), (intptr_t) (0) },
    { "SYNC_FLAGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9115), (intptr_t) (0) },
    { "SYNC_FENCE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9116), (intptr_t) (0) },
    { "SYNC_GPU_COMMANDS_COMPLETE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9117), (intptr_t) (0) },
    { "UNSIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9118), (intptr_t) (0) },
    { "SIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9119), (intptr_t) (0) },
    { "ALREADY_SIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911A), (intptr_t) (0) },
    { "TIMEOUT_EXPIRED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911B), (intptr_t) (0) },
    { "CONDITION_SATISFIED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911C), (intptr_t) (0) },
    { "WAIT_FAILED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911D), (intptr_t) (0) },
    { "SYNC_FLUSH_COMMANDS_BIT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000001), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_DIVISOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FE), (intptr_t) (0) },
    { "ANY_SAMPLES_PASSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C2F), (intptr_t) (0) },
    { "ANY_SAMPLES_PASSED_CONSERVATIVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D6A), (intptr_t) (0) },
    { "SAMPLER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8919), (intptr_t) (0) },
    { "RGB10_A2UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x906F), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E42), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_G", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E43), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_B", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E44), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_A", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E45), (intptr_t) (0) },
    { "GREEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1904), (intptr_t) (0) },
    { "BLUE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1905), (intptr_t) (0) },
    { "INT_2_10_10_10_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D9F), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E22), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_PAUSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E23), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_ACTIVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E24), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E25), (intptr_t) (0) },
    { "COMPRESSED_R11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9270), (intptr_t) (0) },
    { "COMPRESSED_SIGNED_R11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9271), (intptr_t) (0) },
    { "COMPRESSED_RG11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9272), (intptr_t) (0) },
    { "COMPRESSED_SIGNED_RG11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9273), (intptr_t) (0) },
    { "COMPRESSED_RGB8_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9274), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9275), (intptr_t) (0) },
    { "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9276), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9277), (intptr_t) (0) },
    { "COMPRESSED_RGBA8_ETC2_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9278), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9279), (intptr_t) (0) },
    { "TEXTURE_IMMUTABLE_FORMAT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x912F), (intptr_t) (0) },
    { "MAX_ELEMENT_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D6B), (intptr_t) (0) },
    { "NUM_SAMPLE_COUNTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9380), (intptr_t) (0) },
    { "TEXTURE_IMMUTABLE_LEVELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x82DF), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FE), (intptr_t) (0) },
    { "TIMEOUT_IGNORED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFFFFFFFFFF), (intptr_t) (0) },
};

const ClassInfo JSWebGL2RenderingContextConstructor::s_info = { "WebGL2RenderingContextConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGL2RenderingContextConstructor) };

JSWebGL2RenderingContextConstructor::JSWebGL2RenderingContextConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebGL2RenderingContextConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSWebGL2RenderingContext::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebGL2RenderingContext"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSWebGL2RenderingContextConstructorTableValues, *this);
}

/* Hash table for prototype */

static const HashTableValue JSWebGL2RenderingContextPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGL2RenderingContextConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "READ_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0C02), (intptr_t) (0) },
    { "UNPACK_ROW_LENGTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF2), (intptr_t) (0) },
    { "UNPACK_SKIP_ROWS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF3), (intptr_t) (0) },
    { "UNPACK_SKIP_PIXELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0CF4), (intptr_t) (0) },
    { "PACK_ROW_LENGTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D02), (intptr_t) (0) },
    { "PACK_SKIP_ROWS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D03), (intptr_t) (0) },
    { "PACK_SKIP_PIXELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x0D04), (intptr_t) (0) },
    { "COLOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1800), (intptr_t) (0) },
    { "DEPTH", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1801), (intptr_t) (0) },
    { "STENCIL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1802), (intptr_t) (0) },
    { "RED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1903), (intptr_t) (0) },
    { "RGB8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8051), (intptr_t) (0) },
    { "RGBA8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8058), (intptr_t) (0) },
    { "RGB10_A2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8059), (intptr_t) (0) },
    { "TEXTURE_BINDING_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806A), (intptr_t) (0) },
    { "UNPACK_SKIP_IMAGES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806D), (intptr_t) (0) },
    { "UNPACK_IMAGE_HEIGHT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806E), (intptr_t) (0) },
    { "TEXTURE_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x806F), (intptr_t) (0) },
    { "TEXTURE_WRAP_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8072), (intptr_t) (0) },
    { "MAX_3D_TEXTURE_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8073), (intptr_t) (0) },
    { "UNSIGNED_INT_2_10_10_10_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8368), (intptr_t) (0) },
    { "MAX_ELEMENTS_VERTICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x80E8), (intptr_t) (0) },
    { "MAX_ELEMENTS_INDICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x80E9), (intptr_t) (0) },
    { "TEXTURE_MIN_LOD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813A), (intptr_t) (0) },
    { "TEXTURE_MAX_LOD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813B), (intptr_t) (0) },
    { "TEXTURE_BASE_LEVEL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813C), (intptr_t) (0) },
    { "TEXTURE_MAX_LEVEL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x813D), (intptr_t) (0) },
    { "MIN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8007), (intptr_t) (0) },
    { "MAX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8008), (intptr_t) (0) },
    { "DEPTH_COMPONENT24", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x81A6), (intptr_t) (0) },
    { "MAX_TEXTURE_LOD_BIAS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84FD), (intptr_t) (0) },
    { "TEXTURE_COMPARE_MODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884C), (intptr_t) (0) },
    { "TEXTURE_COMPARE_FUNC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884D), (intptr_t) (0) },
    { "CURRENT_QUERY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8865), (intptr_t) (0) },
    { "QUERY_RESULT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8866), (intptr_t) (0) },
    { "QUERY_RESULT_AVAILABLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8867), (intptr_t) (0) },
    { "STREAM_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E1), (intptr_t) (0) },
    { "STREAM_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E2), (intptr_t) (0) },
    { "STATIC_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E5), (intptr_t) (0) },
    { "STATIC_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E6), (intptr_t) (0) },
    { "DYNAMIC_READ", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88E9), (intptr_t) (0) },
    { "DYNAMIC_COPY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EA), (intptr_t) (0) },
    { "MAX_DRAW_BUFFERS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8824), (intptr_t) (0) },
    { "DRAW_BUFFER0", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8825), (intptr_t) (0) },
    { "DRAW_BUFFER1", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8826), (intptr_t) (0) },
    { "DRAW_BUFFER2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8827), (intptr_t) (0) },
    { "DRAW_BUFFER3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8828), (intptr_t) (0) },
    { "DRAW_BUFFER4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8829), (intptr_t) (0) },
    { "DRAW_BUFFER5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882A), (intptr_t) (0) },
    { "DRAW_BUFFER6", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882B), (intptr_t) (0) },
    { "DRAW_BUFFER7", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882C), (intptr_t) (0) },
    { "DRAW_BUFFER8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882D), (intptr_t) (0) },
    { "DRAW_BUFFER9", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882E), (intptr_t) (0) },
    { "DRAW_BUFFER10", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x882F), (intptr_t) (0) },
    { "DRAW_BUFFER11", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8830), (intptr_t) (0) },
    { "DRAW_BUFFER12", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8831), (intptr_t) (0) },
    { "DRAW_BUFFER13", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8832), (intptr_t) (0) },
    { "DRAW_BUFFER14", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8833), (intptr_t) (0) },
    { "DRAW_BUFFER15", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8834), (intptr_t) (0) },
    { "MAX_FRAGMENT_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B49), (intptr_t) (0) },
    { "MAX_VERTEX_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B4A), (intptr_t) (0) },
    { "SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B5F), (intptr_t) (0) },
    { "SAMPLER_2D_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B62), (intptr_t) (0) },
    { "FRAGMENT_SHADER_DERIVATIVE_HINT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B8B), (intptr_t) (0) },
    { "PIXEL_PACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EB), (intptr_t) (0) },
    { "PIXEL_UNPACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EC), (intptr_t) (0) },
    { "PIXEL_PACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88ED), (intptr_t) (0) },
    { "PIXEL_UNPACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88EF), (intptr_t) (0) },
    { "FLOAT_MAT2x3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B65), (intptr_t) (0) },
    { "FLOAT_MAT2x4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B66), (intptr_t) (0) },
    { "FLOAT_MAT3x2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B67), (intptr_t) (0) },
    { "FLOAT_MAT3x4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B68), (intptr_t) (0) },
    { "FLOAT_MAT4x2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B69), (intptr_t) (0) },
    { "FLOAT_MAT4x3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B6A), (intptr_t) (0) },
    { "SRGB", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C40), (intptr_t) (0) },
    { "SRGB8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C41), (intptr_t) (0) },
    { "SRGB8_ALPHA8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C43), (intptr_t) (0) },
    { "COMPARE_REF_TO_TEXTURE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x884E), (intptr_t) (0) },
    { "RGBA32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8814), (intptr_t) (0) },
    { "RGB32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8815), (intptr_t) (0) },
    { "RGBA16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x881A), (intptr_t) (0) },
    { "RGB16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x881B), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FD), (intptr_t) (0) },
    { "MAX_ARRAY_TEXTURE_LAYERS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FF), (intptr_t) (0) },
    { "MIN_PROGRAM_TEXEL_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8904), (intptr_t) (0) },
    { "MAX_PROGRAM_TEXEL_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8905), (intptr_t) (0) },
    { "MAX_VARYING_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8B4B), (intptr_t) (0) },
    { "TEXTURE_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C1A), (intptr_t) (0) },
    { "TEXTURE_BINDING_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C1D), (intptr_t) (0) },
    { "R11F_G11F_B10F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3A), (intptr_t) (0) },
    { "UNSIGNED_INT_10F_11F_11F_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3B), (intptr_t) (0) },
    { "RGB9_E5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3D), (intptr_t) (0) },
    { "UNSIGNED_INT_5_9_9_9_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C3E), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_MODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C7F), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C80), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_VARYINGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C83), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C84), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C85), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C88), (intptr_t) (0) },
    { "RASTERIZER_DISCARD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C89), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8A), (intptr_t) (0) },
    { "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8B), (intptr_t) (0) },
    { "INTERLEAVED_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8C), (intptr_t) (0) },
    { "SEPARATE_ATTRIBS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8D), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8E), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C8F), (intptr_t) (0) },
    { "RGBA32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D70), (intptr_t) (0) },
    { "RGB32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D71), (intptr_t) (0) },
    { "RGBA16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D76), (intptr_t) (0) },
    { "RGB16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D77), (intptr_t) (0) },
    { "RGBA8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D7C), (intptr_t) (0) },
    { "RGB8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D7D), (intptr_t) (0) },
    { "RGBA32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D82), (intptr_t) (0) },
    { "RGB32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D83), (intptr_t) (0) },
    { "RGBA16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D88), (intptr_t) (0) },
    { "RGB16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D89), (intptr_t) (0) },
    { "RGBA8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D8E), (intptr_t) (0) },
    { "RGB8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D8F), (intptr_t) (0) },
    { "RED_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D94), (intptr_t) (0) },
    { "RGB_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D98), (intptr_t) (0) },
    { "RGBA_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D99), (intptr_t) (0) },
    { "SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC1), (intptr_t) (0) },
    { "SAMPLER_2D_ARRAY_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC4), (intptr_t) (0) },
    { "SAMPLER_CUBE_SHADOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC5), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC6), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC7), (intptr_t) (0) },
    { "UNSIGNED_INT_VEC4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DC8), (intptr_t) (0) },
    { "INT_SAMPLER_2D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCA), (intptr_t) (0) },
    { "INT_SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCB), (intptr_t) (0) },
    { "INT_SAMPLER_CUBE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCC), (intptr_t) (0) },
    { "INT_SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DCF), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_2D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD2), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_3D", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD3), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_CUBE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD4), (intptr_t) (0) },
    { "UNSIGNED_INT_SAMPLER_2D_ARRAY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DD7), (intptr_t) (0) },
    { "DEPTH_COMPONENT32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAC), (intptr_t) (0) },
    { "DEPTH32F_STENCIL8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAD), (intptr_t) (0) },
    { "FLOAT_32_UNSIGNED_INT_24_8_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8DAD), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8210), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8211), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_RED_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8212), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8213), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8214), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8215), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8216), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8217), (intptr_t) (0) },
    { "FRAMEBUFFER_DEFAULT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8218), (intptr_t) (0) },
    { "DEPTH_STENCIL_ATTACHMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x821A), (intptr_t) (0) },
    { "DEPTH_STENCIL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84F9), (intptr_t) (0) },
    { "UNSIGNED_INT_24_8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x84FA), (intptr_t) (0) },
    { "DEPTH24_STENCIL8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88F0), (intptr_t) (0) },
    { "UNSIGNED_NORMALIZED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C17), (intptr_t) (0) },
    { "DRAW_FRAMEBUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA6), (intptr_t) (0) },
    { "READ_FRAMEBUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA8), (intptr_t) (0) },
    { "DRAW_FRAMEBUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CA9), (intptr_t) (0) },
    { "READ_FRAMEBUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAA), (intptr_t) (0) },
    { "RENDERBUFFER_SAMPLES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CAB), (intptr_t) (0) },
    { "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CD4), (intptr_t) (0) },
    { "MAX_COLOR_ATTACHMENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CDF), (intptr_t) (0) },
    { "COLOR_ATTACHMENT1", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE1), (intptr_t) (0) },
    { "COLOR_ATTACHMENT2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE2), (intptr_t) (0) },
    { "COLOR_ATTACHMENT3", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE3), (intptr_t) (0) },
    { "COLOR_ATTACHMENT4", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE4), (intptr_t) (0) },
    { "COLOR_ATTACHMENT5", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE5), (intptr_t) (0) },
    { "COLOR_ATTACHMENT6", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE6), (intptr_t) (0) },
    { "COLOR_ATTACHMENT7", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE7), (intptr_t) (0) },
    { "COLOR_ATTACHMENT8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE8), (intptr_t) (0) },
    { "COLOR_ATTACHMENT9", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CE9), (intptr_t) (0) },
    { "COLOR_ATTACHMENT10", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEA), (intptr_t) (0) },
    { "COLOR_ATTACHMENT11", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEB), (intptr_t) (0) },
    { "COLOR_ATTACHMENT12", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEC), (intptr_t) (0) },
    { "COLOR_ATTACHMENT13", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CED), (intptr_t) (0) },
    { "COLOR_ATTACHMENT14", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEE), (intptr_t) (0) },
    { "COLOR_ATTACHMENT15", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8CEF), (intptr_t) (0) },
    { "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D56), (intptr_t) (0) },
    { "MAX_SAMPLES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D57), (intptr_t) (0) },
    { "HALF_FLOAT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x140B), (intptr_t) (0) },
    { "RG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8227), (intptr_t) (0) },
    { "RG_INTEGER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8228), (intptr_t) (0) },
    { "R8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8229), (intptr_t) (0) },
    { "RG8", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822B), (intptr_t) (0) },
    { "R16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822D), (intptr_t) (0) },
    { "R32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822E), (intptr_t) (0) },
    { "RG16F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x822F), (intptr_t) (0) },
    { "RG32F", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8230), (intptr_t) (0) },
    { "R8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8231), (intptr_t) (0) },
    { "R8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8232), (intptr_t) (0) },
    { "R16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8233), (intptr_t) (0) },
    { "R16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8234), (intptr_t) (0) },
    { "R32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8235), (intptr_t) (0) },
    { "R32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8236), (intptr_t) (0) },
    { "RG8I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8237), (intptr_t) (0) },
    { "RG8UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8238), (intptr_t) (0) },
    { "RG16I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8239), (intptr_t) (0) },
    { "RG16UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823A), (intptr_t) (0) },
    { "RG32I", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823B), (intptr_t) (0) },
    { "RG32UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x823C), (intptr_t) (0) },
    { "VERTEX_ARRAY_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x85B5), (intptr_t) (0) },
    { "R8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F94), (intptr_t) (0) },
    { "RG8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F95), (intptr_t) (0) },
    { "RGB8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F96), (intptr_t) (0) },
    { "RGBA8_SNORM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F97), (intptr_t) (0) },
    { "SIGNED_NORMALIZED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F9C), (intptr_t) (0) },
    { "PRIMITIVE_RESTART_FIXED_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D69), (intptr_t) (0) },
    { "COPY_READ_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F36), (intptr_t) (0) },
    { "COPY_WRITE_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F37), (intptr_t) (0) },
    { "COPY_READ_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F36), (intptr_t) (0) },
    { "COPY_WRITE_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8F37), (intptr_t) (0) },
    { "UNIFORM_BUFFER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A11), (intptr_t) (0) },
    { "UNIFORM_BUFFER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A28), (intptr_t) (0) },
    { "UNIFORM_BUFFER_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A29), (intptr_t) (0) },
    { "UNIFORM_BUFFER_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2A), (intptr_t) (0) },
    { "MAX_VERTEX_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2B), (intptr_t) (0) },
    { "MAX_FRAGMENT_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2D), (intptr_t) (0) },
    { "MAX_COMBINED_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2E), (intptr_t) (0) },
    { "MAX_UNIFORM_BUFFER_BINDINGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A2F), (intptr_t) (0) },
    { "MAX_UNIFORM_BLOCK_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A30), (intptr_t) (0) },
    { "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A31), (intptr_t) (0) },
    { "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A33), (intptr_t) (0) },
    { "UNIFORM_BUFFER_OFFSET_ALIGNMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A34), (intptr_t) (0) },
    { "ACTIVE_UNIFORM_BLOCKS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A36), (intptr_t) (0) },
    { "UNIFORM_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A37), (intptr_t) (0) },
    { "UNIFORM_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A38), (intptr_t) (0) },
    { "UNIFORM_BLOCK_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3A), (intptr_t) (0) },
    { "UNIFORM_OFFSET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3B), (intptr_t) (0) },
    { "UNIFORM_ARRAY_STRIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3C), (intptr_t) (0) },
    { "UNIFORM_MATRIX_STRIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3D), (intptr_t) (0) },
    { "UNIFORM_IS_ROW_MAJOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3E), (intptr_t) (0) },
    { "UNIFORM_BLOCK_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A3F), (intptr_t) (0) },
    { "UNIFORM_BLOCK_DATA_SIZE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A40), (intptr_t) (0) },
    { "UNIFORM_BLOCK_ACTIVE_UNIFORMS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A42), (intptr_t) (0) },
    { "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A43), (intptr_t) (0) },
    { "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A44), (intptr_t) (0) },
    { "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8A46), (intptr_t) (0) },
    { "INVALID_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFF), (intptr_t) (0) },
    { "MAX_VERTEX_OUTPUT_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9122), (intptr_t) (0) },
    { "MAX_FRAGMENT_INPUT_COMPONENTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9125), (intptr_t) (0) },
    { "MAX_SERVER_WAIT_TIMEOUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9111), (intptr_t) (0) },
    { "OBJECT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9112), (intptr_t) (0) },
    { "SYNC_CONDITION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9113), (intptr_t) (0) },
    { "SYNC_STATUS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9114), (intptr_t) (0) },
    { "SYNC_FLAGS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9115), (intptr_t) (0) },
    { "SYNC_FENCE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9116), (intptr_t) (0) },
    { "SYNC_GPU_COMMANDS_COMPLETE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9117), (intptr_t) (0) },
    { "UNSIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9118), (intptr_t) (0) },
    { "SIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9119), (intptr_t) (0) },
    { "ALREADY_SIGNALED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911A), (intptr_t) (0) },
    { "TIMEOUT_EXPIRED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911B), (intptr_t) (0) },
    { "CONDITION_SATISFIED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911C), (intptr_t) (0) },
    { "WAIT_FAILED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x911D), (intptr_t) (0) },
    { "SYNC_FLUSH_COMMANDS_BIT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000001), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_DIVISOR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FE), (intptr_t) (0) },
    { "ANY_SAMPLES_PASSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8C2F), (intptr_t) (0) },
    { "ANY_SAMPLES_PASSED_CONSERVATIVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D6A), (intptr_t) (0) },
    { "SAMPLER_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8919), (intptr_t) (0) },
    { "RGB10_A2UI", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x906F), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E42), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_G", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E43), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_B", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E44), (intptr_t) (0) },
    { "TEXTURE_SWIZZLE_A", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E45), (intptr_t) (0) },
    { "GREEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1904), (intptr_t) (0) },
    { "BLUE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x1905), (intptr_t) (0) },
    { "INT_2_10_10_10_REV", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D9F), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E22), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_PAUSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E23), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_ACTIVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E24), (intptr_t) (0) },
    { "TRANSFORM_FEEDBACK_BINDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8E25), (intptr_t) (0) },
    { "COMPRESSED_R11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9270), (intptr_t) (0) },
    { "COMPRESSED_SIGNED_R11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9271), (intptr_t) (0) },
    { "COMPRESSED_RG11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9272), (intptr_t) (0) },
    { "COMPRESSED_SIGNED_RG11_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9273), (intptr_t) (0) },
    { "COMPRESSED_RGB8_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9274), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9275), (intptr_t) (0) },
    { "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9276), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9277), (intptr_t) (0) },
    { "COMPRESSED_RGBA8_ETC2_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9278), (intptr_t) (0) },
    { "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9279), (intptr_t) (0) },
    { "TEXTURE_IMMUTABLE_FORMAT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x912F), (intptr_t) (0) },
    { "MAX_ELEMENT_INDEX", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x8D6B), (intptr_t) (0) },
    { "NUM_SAMPLE_COUNTS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x9380), (intptr_t) (0) },
    { "TEXTURE_IMMUTABLE_LEVELS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x82DF), (intptr_t) (0) },
    { "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x88FE), (intptr_t) (0) },
    { "TIMEOUT_IGNORED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFFFFFFFFFF), (intptr_t) (0) },
    { "copyBufferSubData", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCopyBufferSubData), (intptr_t) (5) },
    { "getBufferSubData", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData), (intptr_t) (3) },
    { "blitFramebuffer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBlitFramebuffer), (intptr_t) (10) },
    { "framebufferTextureLayer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionFramebufferTextureLayer), (intptr_t) (5) },
    { "getInternalformatParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetInternalformatParameter), (intptr_t) (3) },
    { "invalidateFramebuffer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionInvalidateFramebuffer), (intptr_t) (2) },
    { "invalidateSubFramebuffer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionInvalidateSubFramebuffer), (intptr_t) (6) },
    { "readBuffer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionReadBuffer), (intptr_t) (1) },
    { "renderbufferStorageMultisample", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionRenderbufferStorageMultisample), (intptr_t) (5) },
    { "texStorage2D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionTexStorage2D), (intptr_t) (5) },
    { "texStorage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionTexStorage3D), (intptr_t) (6) },
    { "texImage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionTexImage3D), (intptr_t) (10) },
    { "texSubImage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D), (intptr_t) (11) },
    { "copyTexSubImage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCopyTexSubImage3D), (intptr_t) (9) },
    { "compressedTexImage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCompressedTexImage3D), (intptr_t) (9) },
    { "compressedTexSubImage3D", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCompressedTexSubImage3D), (intptr_t) (11) },
    { "getFragDataLocation", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetFragDataLocation), (intptr_t) (2) },
    { "uniform1ui", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform1ui), (intptr_t) (2) },
    { "uniform2ui", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform2ui), (intptr_t) (3) },
    { "uniform3ui", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform3ui), (intptr_t) (4) },
    { "uniform4ui", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform4ui), (intptr_t) (5) },
    { "uniform1uiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform1uiv), (intptr_t) (2) },
    { "uniform2uiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform2uiv), (intptr_t) (2) },
    { "uniform3uiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform3uiv), (intptr_t) (2) },
    { "uniform4uiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniform4uiv), (intptr_t) (2) },
    { "uniformMatrix2x3fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x3fv), (intptr_t) (3) },
    { "uniformMatrix3x2fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x2fv), (intptr_t) (3) },
    { "uniformMatrix2x4fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x4fv), (intptr_t) (3) },
    { "uniformMatrix4x2fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x2fv), (intptr_t) (3) },
    { "uniformMatrix3x4fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x4fv), (intptr_t) (3) },
    { "uniformMatrix4x3fv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x3fv), (intptr_t) (3) },
    { "vertexAttribI4i", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4i), (intptr_t) (5) },
    { "vertexAttribI4iv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4iv), (intptr_t) (2) },
    { "vertexAttribI4ui", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4ui), (intptr_t) (5) },
    { "vertexAttribI4uiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4uiv), (intptr_t) (2) },
    { "vertexAttribIPointer", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribIPointer), (intptr_t) (5) },
    { "vertexAttribDivisor", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionVertexAttribDivisor), (intptr_t) (2) },
    { "drawArraysInstanced", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDrawArraysInstanced), (intptr_t) (4) },
    { "drawElementsInstanced", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDrawElementsInstanced), (intptr_t) (5) },
    { "drawRangeElements", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDrawRangeElements), (intptr_t) (6) },
    { "drawBuffers", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDrawBuffers), (intptr_t) (1) },
    { "clearBufferiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionClearBufferiv), (intptr_t) (3) },
    { "clearBufferuiv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionClearBufferuiv), (intptr_t) (3) },
    { "clearBufferfv", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionClearBufferfv), (intptr_t) (3) },
    { "clearBufferfi", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionClearBufferfi), (intptr_t) (4) },
    { "createQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCreateQuery), (intptr_t) (0) },
    { "deleteQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDeleteQuery), (intptr_t) (1) },
    { "isQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionIsQuery), (intptr_t) (1) },
    { "beginQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBeginQuery), (intptr_t) (2) },
    { "endQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionEndQuery), (intptr_t) (1) },
    { "getQuery", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetQuery), (intptr_t) (2) },
    { "getQueryParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetQueryParameter), (intptr_t) (2) },
    { "createSampler", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCreateSampler), (intptr_t) (0) },
    { "deleteSampler", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDeleteSampler), (intptr_t) (1) },
    { "isSampler", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionIsSampler), (intptr_t) (1) },
    { "bindSampler", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBindSampler), (intptr_t) (2) },
    { "samplerParameteri", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionSamplerParameteri), (intptr_t) (3) },
    { "samplerParameterf", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionSamplerParameterf), (intptr_t) (3) },
    { "getSamplerParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetSamplerParameter), (intptr_t) (2) },
    { "fenceSync", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionFenceSync), (intptr_t) (2) },
    { "isSync", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionIsSync), (intptr_t) (1) },
    { "deleteSync", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDeleteSync), (intptr_t) (1) },
    { "clientWaitSync", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionClientWaitSync), (intptr_t) (3) },
    { "waitSync", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionWaitSync), (intptr_t) (3) },
    { "getSyncParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetSyncParameter), (intptr_t) (2) },
    { "createTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCreateTransformFeedback), (intptr_t) (0) },
    { "deleteTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDeleteTransformFeedback), (intptr_t) (1) },
    { "isTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionIsTransformFeedback), (intptr_t) (1) },
    { "bindTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBindTransformFeedback), (intptr_t) (2) },
    { "beginTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBeginTransformFeedback), (intptr_t) (1) },
    { "endTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionEndTransformFeedback), (intptr_t) (0) },
    { "transformFeedbackVaryings", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionTransformFeedbackVaryings), (intptr_t) (3) },
    { "getTransformFeedbackVarying", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetTransformFeedbackVarying), (intptr_t) (2) },
    { "pauseTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionPauseTransformFeedback), (intptr_t) (0) },
    { "resumeTransformFeedback", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionResumeTransformFeedback), (intptr_t) (0) },
    { "bindBufferBase", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBindBufferBase), (intptr_t) (3) },
    { "bindBufferRange", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBindBufferRange), (intptr_t) (5) },
    { "getIndexedParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetIndexedParameter), (intptr_t) (2) },
    { "getUniformIndices", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetUniformIndices), (intptr_t) (2) },
    { "getActiveUniforms", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetActiveUniforms), (intptr_t) (3) },
    { "getUniformBlockIndex", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetUniformBlockIndex), (intptr_t) (2) },
    { "getActiveUniformBlockParameter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockParameter), (intptr_t) (3) },
    { "getActiveUniformBlockName", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockName), (intptr_t) (2) },
    { "uniformBlockBinding", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionUniformBlockBinding), (intptr_t) (3) },
    { "createVertexArray", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionCreateVertexArray), (intptr_t) (0) },
    { "deleteVertexArray", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionDeleteVertexArray), (intptr_t) (1) },
    { "isVertexArray", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionIsVertexArray), (intptr_t) (1) },
    { "bindVertexArray", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebGL2RenderingContextPrototypeFunctionBindVertexArray), (intptr_t) (1) },
};

const ClassInfo JSWebGL2RenderingContextPrototype::s_info = { "WebGL2RenderingContextPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGL2RenderingContextPrototype) };

void JSWebGL2RenderingContextPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebGL2RenderingContextPrototypeTableValues, *this);
}

const ClassInfo JSWebGL2RenderingContext::s_info = { "WebGL2RenderingContext", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGL2RenderingContext) };

JSWebGL2RenderingContext::JSWebGL2RenderingContext(Structure* structure, JSDOMGlobalObject* globalObject, Ref<WebGL2RenderingContext>&& impl)
    : JSWebGLRenderingContextBase(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSWebGL2RenderingContext::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebGL2RenderingContextPrototype::create(vm, globalObject, JSWebGL2RenderingContextPrototype::createStructure(vm, globalObject, JSWebGLRenderingContextBase::getPrototype(vm, globalObject)));
}

JSObject* JSWebGL2RenderingContext::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGL2RenderingContext>(vm, globalObject);
}

EncodedJSValue jsWebGL2RenderingContextConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSWebGL2RenderingContextPrototype* domObject = jsDynamicCast<JSWebGL2RenderingContextPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSWebGL2RenderingContext::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSWebGL2RenderingContext::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebGL2RenderingContextConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCopyBufferSubData(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "copyBufferSubData");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned readTarget = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned writeTarget = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long readOffset = toInt64(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long writeOffset = toInt64(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long size = toInt64(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData1(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getBufferSubData");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<ArrayBufferView> returnedData = toArrayBufferView(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.getBufferSubData(target, offset, returnedData.get());
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData2(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getBufferSubData");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    ArrayBuffer* returnedData = toArrayBuffer(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.getBufferSubData(target, offset, returnedData);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData(ExecState* exec)
{
    size_t argsCount = std::min<size_t>(3, exec->argumentCount());
    JSValue arg2(exec->argument(2));
    if ((argsCount == 3 && ((arg2.isObject() && asObject(arg2)->inherits(JSArrayBufferView::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData1(exec);
    if ((argsCount == 3 && ((arg2.isObject() && asObject(arg2)->inherits(JSArrayBuffer::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionGetBufferSubData2(exec);
    if (argsCount < 3)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    return throwVMTypeError(exec);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBlitFramebuffer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "blitFramebuffer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 10))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int srcX0 = toInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int srcY0 = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int srcX1 = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int srcY1 = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int dstX0 = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int dstY0 = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int dstX1 = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int dstY1 = toInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned mask = toUInt32(exec, exec->argument(8), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned filter = toUInt32(exec, exec->argument(9), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionFramebufferTextureLayer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "framebufferTextureLayer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned attachment = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned texture = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int layer = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.framebufferTextureLayer(target, attachment, texture, level, layer);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetInternalformatParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getInternalformatParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getInternalformatParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionInvalidateFramebuffer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "invalidateFramebuffer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    Vector<unsigned> attachments = toNativeArray<unsigned>(exec, exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.invalidateFramebuffer(target, attachments);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionInvalidateSubFramebuffer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "invalidateSubFramebuffer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 6))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    Vector<unsigned> attachments = toNativeArray<unsigned>(exec, exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int x = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int y = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.invalidateSubFramebuffer(target, attachments, x, y, width, height);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionReadBuffer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "readBuffer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned src = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.readBuffer(src);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionRenderbufferStorageMultisample(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "renderbufferStorageMultisample");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int samples = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned internalformat = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.renderbufferStorageMultisample(target, samples, internalformat, width, height);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexStorage2D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texStorage2D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int levels = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned internalformat = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texStorage2D(target, levels, internalformat, width, height);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexStorage3D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texStorage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 6))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int levels = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned internalformat = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int depth = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texStorage3D(target, levels, internalformat, width, height, depth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexImage3D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 10))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int internalformat = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int depth = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int border = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(8), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<ArrayBufferView> pixels = toArrayBufferView(exec->argument(9));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels.get());
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D1(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 11))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int depth = toInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(8), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(9), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<ArrayBufferView> pixels = toArrayBufferView(exec->argument(10));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels.get());
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D2(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 8))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(7).isUndefinedOrNull() && !exec->argument(7).inherits(JSImageData::info()))
        return throwArgumentTypeError(*exec, 7, "source", "WebGL2RenderingContext", "texSubImage3D", "ImageData");
    ImageData* source = JSImageData::toWrapped(exec->argument(7));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texSubImage3D(target, level, xoffset, yoffset, zoffset, format, type, source);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D3(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 8))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(7).isUndefinedOrNull() && !exec->argument(7).inherits(JSHTMLImageElement::info()))
        return throwArgumentTypeError(*exec, 7, "source", "WebGL2RenderingContext", "texSubImage3D", "HTMLImageElement");
    HTMLImageElement* source = JSHTMLImageElement::toWrapped(exec->argument(7));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texSubImage3D(target, level, xoffset, yoffset, zoffset, format, type, source);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D4(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 8))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(7).isUndefinedOrNull() && !exec->argument(7).inherits(JSHTMLCanvasElement::info()))
        return throwArgumentTypeError(*exec, 7, "source", "WebGL2RenderingContext", "texSubImage3D", "HTMLCanvasElement");
    HTMLCanvasElement* source = JSHTMLCanvasElement::toWrapped(exec->argument(7));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texSubImage3D(target, level, xoffset, yoffset, zoffset, format, type, source);
    return JSValue::encode(jsUndefined());
}

static EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D5(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "texSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 8))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(7).isUndefinedOrNull() && !exec->argument(7).inherits(JSHTMLVideoElement::info()))
        return throwArgumentTypeError(*exec, 7, "source", "WebGL2RenderingContext", "texSubImage3D", "HTMLVideoElement");
    HTMLVideoElement* source = JSHTMLVideoElement::toWrapped(exec->argument(7));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.texSubImage3D(target, level, xoffset, yoffset, zoffset, format, type, source);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D(ExecState* exec)
{
    size_t argsCount = std::min<size_t>(11, exec->argumentCount());
    JSValue arg10(exec->argument(10));
    if ((argsCount == 11 && (arg10.isNull() || (arg10.isObject() && asObject(arg10)->inherits(JSArrayBufferView::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D1(exec);
    JSValue arg7(exec->argument(7));
    if ((argsCount == 8 && (arg7.isNull() || (arg7.isObject() && asObject(arg7)->inherits(JSImageData::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D2(exec);
    if ((argsCount == 8 && (arg7.isNull() || (arg7.isObject() && asObject(arg7)->inherits(JSHTMLImageElement::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D3(exec);
    if ((argsCount == 8 && (arg7.isNull() || (arg7.isObject() && asObject(arg7)->inherits(JSHTMLCanvasElement::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D4(exec);
    if ((argsCount == 8 && (arg7.isNull() || (arg7.isObject() && asObject(arg7)->inherits(JSHTMLVideoElement::info())))))
        return jsWebGL2RenderingContextPrototypeFunctionTexSubImage3D5(exec);
    if (argsCount < 8)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    return throwVMTypeError(exec);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCopyTexSubImage3D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "copyTexSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 9))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int x = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int y = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(8), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCompressedTexImage3D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "compressedTexImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 9))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned internalformat = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int depth = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int border = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int imageSize = toInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<ArrayBufferView> data = toArrayBufferView(exec->argument(8));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCompressedTexSubImage3D(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "compressedTexSubImage3D");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 11))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int level = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int xoffset = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int yoffset = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int zoffset = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int width = toInt32(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int height = toInt32(exec, exec->argument(6), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int depth = toInt32(exec, exec->argument(7), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned format = toUInt32(exec, exec->argument(8), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int imageSize = toInt32(exec, exec->argument(9), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<ArrayBufferView> data = toArrayBufferView(exec->argument(10));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetFragDataLocation(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getFragDataLocation");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "getFragDataLocation", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String name = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.getFragDataLocation(program, name));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform1ui(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform1ui");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform1ui", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v0 = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform1ui(location, v0);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform2ui(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform2ui");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform2ui", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v0 = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v1 = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform2ui(location, v0, v1);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform3ui(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform3ui");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 4))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform3ui", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v0 = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v1 = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v2 = toUInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform3ui(location, v0, v1, v2);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform4ui(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform4ui");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform4ui", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v0 = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v1 = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v2 = toUInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned v3 = toUInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform4ui(location, v0, v1, v2, v3);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform1uiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform1uiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform1uiv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> value = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform1uiv(location, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform2uiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform2uiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform2uiv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> value = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform2uiv(location, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform3uiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform3uiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform3uiv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> value = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform3uiv(location, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniform4uiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniform4uiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniform4uiv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> value = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniform4uiv(location, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x3fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix2x3fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix2x3fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix2x3fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x2fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix3x2fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix3x2fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix3x2fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix2x4fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix2x4fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix2x4fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix2x4fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x2fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix4x2fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix4x2fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix4x2fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix3x4fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix3x4fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix3x4fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix3x4fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformMatrix4x3fv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformMatrix4x3fv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLUniformLocation::info()))
        return throwArgumentTypeError(*exec, 0, "location", "WebGL2RenderingContext", "uniformMatrix4x3fv", "WebGLUniformLocation");
    WebGLUniformLocation* location = JSWebGLUniformLocation::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    bool transpose = exec->argument(1).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformMatrix4x3fv(location, transpose, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4i(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribI4i");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int x = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int y = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int z = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int w = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribI4i(index, x, y, z, w);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4iv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribI4iv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Int32Array> v = toInt32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribI4iv(index, v.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4ui(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribI4ui");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned x = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned y = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned z = toUInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned w = toUInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribI4ui(index, x, y, z, w);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribI4uiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribI4uiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> v = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribI4uiv(index, v.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribIPointer(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribIPointer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int size = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int stride = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribIPointer(index, size, type, stride, offset);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionVertexAttribDivisor(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "vertexAttribDivisor");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned index = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned divisor = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.vertexAttribDivisor(index, divisor);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawArraysInstanced(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "drawArraysInstanced");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 4))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned mode = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int first = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int count = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int instanceCount = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.drawArraysInstanced(mode, first, count, instanceCount);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawElementsInstanced(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "drawElementsInstanced");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned mode = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int count = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int instanceCount = toInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.drawElementsInstanced(mode, count, type, offset, instanceCount);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawRangeElements(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "drawRangeElements");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 6))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned mode = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned start = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned end = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int count = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned type = toUInt32(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(5), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.drawRangeElements(mode, start, end, count, type, offset);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDrawBuffers(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "drawBuffers");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    Vector<unsigned> buffers = toNativeArray<unsigned>(exec, exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.drawBuffers(buffers);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "clearBufferiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned buffer = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int drawbuffer = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Int32Array> value = toInt32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.clearBufferiv(buffer, drawbuffer, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferuiv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "clearBufferuiv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned buffer = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int drawbuffer = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> value = toUint32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.clearBufferuiv(buffer, drawbuffer, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferfv(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "clearBufferfv");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned buffer = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int drawbuffer = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Float32Array> value = toFloat32Array(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.clearBufferfv(buffer, drawbuffer, value.get());
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClearBufferfi(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "clearBufferfi");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 4))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned buffer = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int drawbuffer = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    float depth = exec->argument(2).toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int stencil = toInt32(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.clearBufferfi(buffer, drawbuffer, depth, stencil);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "createQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createQuery()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "deleteQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLQuery::info()))
        return throwArgumentTypeError(*exec, 0, "query", "WebGL2RenderingContext", "deleteQuery", "WebGLQuery");
    WebGLQuery* query = JSWebGLQuery::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.deleteQuery(query);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "isQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLQuery::info()))
        return throwArgumentTypeError(*exec, 0, "query", "WebGL2RenderingContext", "isQuery", "WebGLQuery");
    WebGLQuery* query = JSWebGLQuery::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isQuery(query));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBeginQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "beginQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(1).isUndefinedOrNull() && !exec->argument(1).inherits(JSWebGLQuery::info()))
        return throwArgumentTypeError(*exec, 1, "query", "WebGL2RenderingContext", "beginQuery", "WebGLQuery");
    WebGLQuery* query = JSWebGLQuery::toWrapped(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.beginQuery(target, query);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionEndQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "endQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.endQuery(target);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetQuery(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getQuery");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned pname = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getQuery(target, pname)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetQueryParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getQueryParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getQueryParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateSampler(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "createSampler");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createSampler()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteSampler(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "deleteSampler");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSampler::info()))
        return throwArgumentTypeError(*exec, 0, "sampler", "WebGL2RenderingContext", "deleteSampler", "WebGLSampler");
    WebGLSampler* sampler = JSWebGLSampler::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.deleteSampler(sampler);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsSampler(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "isSampler");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSampler::info()))
        return throwArgumentTypeError(*exec, 0, "sampler", "WebGL2RenderingContext", "isSampler", "WebGLSampler");
    WebGLSampler* sampler = JSWebGLSampler::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isSampler(sampler));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindSampler(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "bindSampler");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned unit = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(1).isUndefinedOrNull() && !exec->argument(1).inherits(JSWebGLSampler::info()))
        return throwArgumentTypeError(*exec, 1, "sampler", "WebGL2RenderingContext", "bindSampler", "WebGLSampler");
    WebGLSampler* sampler = JSWebGLSampler::toWrapped(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.bindSampler(unit, sampler);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionSamplerParameteri(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "samplerParameteri");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSampler::info()))
        return throwArgumentTypeError(*exec, 0, "sampler", "WebGL2RenderingContext", "samplerParameteri", "WebGLSampler");
    WebGLSampler* sampler = JSWebGLSampler::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned pname = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int param = toInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.samplerParameteri(sampler, pname, param);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionSamplerParameterf(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "samplerParameterf");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSampler::info()))
        return throwArgumentTypeError(*exec, 0, "sampler", "WebGL2RenderingContext", "samplerParameterf", "WebGLSampler");
    WebGLSampler* sampler = JSWebGLSampler::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned pname = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    float param = exec->argument(2).toFloat(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.samplerParameterf(sampler, pname, param);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetSamplerParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getSamplerParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getSamplerParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionFenceSync(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "fenceSync");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned condition = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned flags = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.fenceSync(condition, flags)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsSync(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "isSync");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSync::info()))
        return throwArgumentTypeError(*exec, 0, "sync", "WebGL2RenderingContext", "isSync", "WebGLSync");
    WebGLSync* sync = JSWebGLSync::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isSync(sync));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteSync(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "deleteSync");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSync::info()))
        return throwArgumentTypeError(*exec, 0, "sync", "WebGL2RenderingContext", "deleteSync", "WebGLSync");
    WebGLSync* sync = JSWebGLSync::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.deleteSync(sync);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionClientWaitSync(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "clientWaitSync");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSync::info()))
        return throwArgumentTypeError(*exec, 0, "sync", "WebGL2RenderingContext", "clientWaitSync", "WebGLSync");
    WebGLSync* sync = JSWebGLSync::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned flags = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned long long timeout = toUInt64(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.clientWaitSync(sync, flags, timeout));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionWaitSync(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "waitSync");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLSync::info()))
        return throwArgumentTypeError(*exec, 0, "sync", "WebGL2RenderingContext", "waitSync", "WebGLSync");
    WebGLSync* sync = JSWebGLSync::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned flags = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned long long timeout = toUInt64(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.waitSync(sync, flags, timeout);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetSyncParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getSyncParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getSyncParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "createTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createTransformFeedback()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "deleteTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLTransformFeedback::info()))
        return throwArgumentTypeError(*exec, 0, "id", "WebGL2RenderingContext", "deleteTransformFeedback", "WebGLTransformFeedback");
    WebGLTransformFeedback* id = JSWebGLTransformFeedback::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.deleteTransformFeedback(id);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "isTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLTransformFeedback::info()))
        return throwArgumentTypeError(*exec, 0, "id", "WebGL2RenderingContext", "isTransformFeedback", "WebGLTransformFeedback");
    WebGLTransformFeedback* id = JSWebGLTransformFeedback::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isTransformFeedback(id));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "bindTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(1).isUndefinedOrNull() && !exec->argument(1).inherits(JSWebGLTransformFeedback::info()))
        return throwArgumentTypeError(*exec, 1, "id", "WebGL2RenderingContext", "bindTransformFeedback", "WebGLTransformFeedback");
    WebGLTransformFeedback* id = JSWebGLTransformFeedback::toWrapped(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.bindTransformFeedback(target, id);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBeginTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "beginTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned primitiveMode = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.beginTransformFeedback(primitiveMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionEndTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "endTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    impl.endTransformFeedback();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionTransformFeedbackVaryings(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "transformFeedbackVaryings");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "transformFeedbackVaryings", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    Vector<String> varyings = toNativeArray<String>(exec, exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned bufferMode = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.transformFeedbackVaryings(program, varyings, bufferMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetTransformFeedbackVarying(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getTransformFeedbackVarying");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "getTransformFeedbackVarying", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned index = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getTransformFeedbackVarying(program, index)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionPauseTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "pauseTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    impl.pauseTransformFeedback();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionResumeTransformFeedback(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "resumeTransformFeedback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    impl.resumeTransformFeedback();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindBufferBase(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "bindBufferBase");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned index = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(2).isUndefinedOrNull() && !exec->argument(2).inherits(JSWebGLBuffer::info()))
        return throwArgumentTypeError(*exec, 2, "buffer", "WebGL2RenderingContext", "bindBufferBase", "WebGLBuffer");
    WebGLBuffer* buffer = JSWebGLBuffer::toWrapped(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.bindBufferBase(target, index, buffer);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindBufferRange(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "bindBufferRange");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 5))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned target = toUInt32(exec, exec->argument(0), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned index = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    if (!exec->argument(2).isUndefinedOrNull() && !exec->argument(2).inherits(JSWebGLBuffer::info()))
        return throwArgumentTypeError(*exec, 2, "buffer", "WebGL2RenderingContext", "bindBufferRange", "WebGLBuffer");
    WebGLBuffer* buffer = JSWebGLBuffer::toWrapped(exec->argument(2));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long offset = toInt64(exec, exec->argument(3), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    long long size = toInt64(exec, exec->argument(4), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.bindBufferRange(target, index, buffer, offset, size);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetIndexedParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getIndexedParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getIndexedParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetUniformIndices(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getUniformIndices");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "getUniformIndices", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    Vector<String> uniformNames = toNativeArray<String>(exec, exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getUniformIndices(program, uniformNames)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniforms(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getActiveUniforms");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "getActiveUniforms", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint32Array> uniformIndices = toUint32Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned pname = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getActiveUniforms(program, uniformIndices.get(), pname)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetUniformBlockIndex(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getUniformBlockIndex");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 2))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "getUniformBlockIndex", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String uniformBlockName = exec->argument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.getUniformBlockIndex(program, uniformBlockName));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockParameter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getActiveUniformBlockParameter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getActiveUniformBlockParameter(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionGetActiveUniformBlockName(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "getActiveUniformBlockName");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    return JSValue::encode(castedThis->getActiveUniformBlockName(exec));
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionUniformBlockBinding(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "uniformBlockBinding");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 3))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLProgram::info()))
        return throwArgumentTypeError(*exec, 0, "program", "WebGL2RenderingContext", "uniformBlockBinding", "WebGLProgram");
    WebGLProgram* program = JSWebGLProgram::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned uniformBlockIndex = toUInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    unsigned uniformBlockBinding = toUInt32(exec, exec->argument(2), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionCreateVertexArray(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "createVertexArray");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createVertexArray()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionDeleteVertexArray(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "deleteVertexArray");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLVertexArrayObject::info()))
        return throwArgumentTypeError(*exec, 0, "vertexArray", "WebGL2RenderingContext", "deleteVertexArray", "WebGLVertexArrayObject");
    WebGLVertexArrayObject* vertexArray = JSWebGLVertexArrayObject::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.deleteVertexArray(vertexArray);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionIsVertexArray(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "isVertexArray");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLVertexArrayObject::info()))
        return throwArgumentTypeError(*exec, 0, "vertexArray", "WebGL2RenderingContext", "isVertexArray", "WebGLVertexArrayObject");
    WebGLVertexArrayObject* vertexArray = JSWebGLVertexArrayObject::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isVertexArray(vertexArray));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebGL2RenderingContextPrototypeFunctionBindVertexArray(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebGL2RenderingContext* castedThis = jsDynamicCast<JSWebGL2RenderingContext*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebGL2RenderingContext", "bindVertexArray");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebGL2RenderingContext::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isUndefinedOrNull() && !exec->argument(0).inherits(JSWebGLVertexArrayObject::info()))
        return throwArgumentTypeError(*exec, 0, "vertexArray", "WebGL2RenderingContext", "bindVertexArray", "WebGLVertexArrayObject");
    WebGLVertexArrayObject* vertexArray = JSWebGLVertexArrayObject::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.bindVertexArray(vertexArray);
    return JSValue::encode(jsUndefined());
}

void JSWebGL2RenderingContext::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSWebGL2RenderingContext*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}


}

#endif // ENABLE(WEBGL2)
