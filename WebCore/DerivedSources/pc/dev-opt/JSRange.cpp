/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSRange.h"

#include "ClientRect.h"
#include "ClientRectList.h"
#include "Document.h"
#include "DocumentFragment.h"
#include "ExceptionCode.h"
#include "JSClientRect.h"
#include "JSClientRectList.h"
#include "JSDOMBinding.h"
#include "JSDocumentFragment.h"
#include "JSNode.h"
#include "JSRange.h"
#include "Node.h"
#include "Range.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStart(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEnd(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartAfter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndAfter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCollapse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNodeContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareBoundaryPoints(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDeleteContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExtractContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionInsertNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSurroundContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneRange(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionToString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDetach(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetClientRects(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetBoundingClientRect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCreateContextualFragment(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIntersectsNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionComparePoint(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIsPointInRange(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExpand(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRangeStartContainer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeStartOffset(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeEndContainer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeEndOffset(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeCollapsed(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeCommonAncestorContainer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSRangePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSRangePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRangePrototype* ptr = new (NotNull, JSC::allocateCell<JSRangePrototype>(vm.heap)) JSRangePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRangePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSRangeConstructor : public DOMConstructorObject {
private:
    JSRangeConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSRangeConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSRangeConstructor* ptr = new (NotNull, JSC::allocateCell<JSRangeConstructor>(vm.heap)) JSRangeConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSRange(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

/* Hash table for constructor */

static const HashTableValue JSRangeConstructorTableValues[] =
{
    { "START_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "START_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "END_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "END_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "NODE_BEFORE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "NODE_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "NODE_BEFORE_AND_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "NODE_INSIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
};


COMPILE_ASSERT(0 == Range::START_TO_START, RangeEnumSTART_TO_STARTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == Range::START_TO_END, RangeEnumSTART_TO_ENDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == Range::END_TO_END, RangeEnumEND_TO_ENDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == Range::END_TO_START, RangeEnumEND_TO_STARTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0 == Range::NODE_BEFORE, RangeEnumNODE_BEFOREIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == Range::NODE_AFTER, RangeEnumNODE_AFTERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == Range::NODE_BEFORE_AND_AFTER, RangeEnumNODE_BEFORE_AND_AFTERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == Range::NODE_INSIDE, RangeEnumNODE_INSIDEIsWrongUseDoNotCheckConstants);

EncodedJSValue JSC_HOST_CALL JSRangeConstructor::constructJSRange(ExecState* exec)
{
    auto* castedThis = jsCast<JSRangeConstructor*>(exec->callee());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwConstructorDocumentUnavailableError(*exec, "Range");
    auto& document = downcast<Document>(*context);
    RefPtr<Range> object = Range::create(document);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSRangeConstructor::s_info = { "RangeConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRangeConstructor) };

JSRangeConstructor::JSRangeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSRangeConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSRange::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Range"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSRangeConstructorTableValues, *this);
}

ConstructType JSRangeConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSRange;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSRangePrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "startContainer", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeStartContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "startOffset", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeStartOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "endContainer", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeEndContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "endOffset", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeEndOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "collapsed", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeCollapsed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "commonAncestorContainer", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeCommonAncestorContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "START_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "START_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "END_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "END_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "NODE_BEFORE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "NODE_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "NODE_BEFORE_AND_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "NODE_INSIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "setStart", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStart), (intptr_t) (0) },
    { "setEnd", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEnd), (intptr_t) (0) },
    { "setStartBefore", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStartBefore), (intptr_t) (0) },
    { "setStartAfter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStartAfter), (intptr_t) (0) },
    { "setEndBefore", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEndBefore), (intptr_t) (0) },
    { "setEndAfter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEndAfter), (intptr_t) (0) },
    { "collapse", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCollapse), (intptr_t) (0) },
    { "selectNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSelectNode), (intptr_t) (0) },
    { "selectNodeContents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSelectNodeContents), (intptr_t) (0) },
    { "compareBoundaryPoints", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCompareBoundaryPoints), (intptr_t) (0) },
    { "deleteContents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionDeleteContents), (intptr_t) (0) },
    { "extractContents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionExtractContents), (intptr_t) (0) },
    { "cloneContents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCloneContents), (intptr_t) (0) },
    { "insertNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionInsertNode), (intptr_t) (0) },
    { "surroundContents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSurroundContents), (intptr_t) (0) },
    { "cloneRange", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCloneRange), (intptr_t) (0) },
    { "toString", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionToString), (intptr_t) (0) },
    { "detach", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionDetach), (intptr_t) (0) },
    { "getClientRects", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionGetClientRects), (intptr_t) (0) },
    { "getBoundingClientRect", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionGetBoundingClientRect), (intptr_t) (0) },
    { "createContextualFragment", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCreateContextualFragment), (intptr_t) (0) },
    { "intersectsNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionIntersectsNode), (intptr_t) (0) },
    { "compareNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCompareNode), (intptr_t) (0) },
    { "comparePoint", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionComparePoint), (intptr_t) (0) },
    { "isPointInRange", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionIsPointInRange), (intptr_t) (0) },
    { "expand", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionExpand), (intptr_t) (0) },
};

const ClassInfo JSRangePrototype::s_info = { "RangePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRangePrototype) };

void JSRangePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRangePrototypeTableValues, *this);
}

const ClassInfo JSRange::s_info = { "Range", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRange) };

JSRange::JSRange(Structure* structure, JSDOMGlobalObject* globalObject, Ref<Range>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSRange::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRangePrototype::create(vm, globalObject, JSRangePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRange::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRange>(vm, globalObject);
}

void JSRange::destroy(JSC::JSCell* cell)
{
    JSRange* thisObject = static_cast<JSRange*>(cell);
    thisObject->JSRange::~JSRange();
}

JSRange::~JSRange()
{
    releaseImpl();
}

EncodedJSValue jsRangeStartContainer(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "startContainer");
        return throwGetterTypeError(*exec, "Range", "startContainer");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.startContainer(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeStartOffset(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "startOffset");
        return throwGetterTypeError(*exec, "Range", "startOffset");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.startOffset(ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeEndContainer(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "endContainer");
        return throwGetterTypeError(*exec, "Range", "endContainer");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.endContainer(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeEndOffset(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "endOffset");
        return throwGetterTypeError(*exec, "Range", "endOffset");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.endOffset(ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeCollapsed(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "collapsed");
        return throwGetterTypeError(*exec, "Range", "collapsed");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.collapsed(ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeCommonAncestorContainer(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRange* castedThis = jsDynamicCast<JSRange*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRangePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Range", "commonAncestorContainer");
        return throwGetterTypeError(*exec, "Range", "commonAncestorContainer");
    }
    ExceptionCode ec = 0;
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.commonAncestorContainer(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


EncodedJSValue jsRangeConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSRangePrototype* domObject = jsDynamicCast<JSRangePrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSRange::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSRange::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRangeConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStart(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setStart");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int offset = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStart(refNode, offset, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEnd(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setEnd");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int offset = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEnd(refNode, offset, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartBefore(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setStartBefore");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStartBefore(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartAfter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setStartAfter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStartAfter(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndBefore(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setEndBefore");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEndBefore(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndAfter(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "setEndAfter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEndAfter(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCollapse(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "collapse");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    bool toStart = exec->argument(0).toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.collapse(toStart, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNode(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "selectNode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.selectNode(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNodeContents(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "selectNodeContents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.selectNodeContents(refNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareBoundaryPoints(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "compareBoundaryPoints");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Range::CompareHow how = static_cast<Range::CompareHow>(exec->argument(0).toInt32(exec));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    Range* sourceRange = JSRange::toWrapped(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.compareBoundaryPoints(how, sourceRange, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDeleteContents(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "deleteContents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    impl.deleteContents(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExtractContents(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "extractContents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.extractContents(ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneContents(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "cloneContents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.cloneContents(ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionInsertNode(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "insertNode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* newNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.insertNode(newNode, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSurroundContents(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "surroundContents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* newParent = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.surroundContents(newParent, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneRange(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "cloneRange");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.cloneRange(ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionToString(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "toString");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    JSValue result = jsStringWithCache(exec, impl.toString(ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDetach(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "detach");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    impl.detach(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetClientRects(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "getClientRects");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getClientRects()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetBoundingClientRect(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "getBoundingClientRect");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getBoundingClientRect()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCreateContextualFragment(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "createContextualFragment");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    String html = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createContextualFragment(html, ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIntersectsNode(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "intersectsNode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.intersectsNode(refNode, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareNode(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "compareNode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.compareNode(refNode, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionComparePoint(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "comparePoint");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int offset = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.comparePoint(refNode, offset, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIsPointInRange(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "isPointInRange");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* refNode = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    int offset = toInt32(exec, exec->argument(1), NormalConversion);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.isPointInRange(refNode, offset, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExpand(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSRange* castedThis = jsDynamicCast<JSRange*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "Range", "expand");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRange::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    String unit = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.expand(unit, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

bool JSRangeOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRangeOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRange = jsCast<JSRange*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRange->impl(), jsRange);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, Range* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRange>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Range.
    COMPILE_ASSERT(!__is_polymorphic(Range), Range_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSRange>(globalObject, impl);
}

Range* JSRange::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRange*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
