/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(GAMEPAD)

#include "JSGamepad.h"

#include "Gamepad.h"
#include "GamepadButton.h"
#include "JSDOMBinding.h"
#include "JSGamepadButton.h"
#include "URL.h"
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsGamepadId(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadIndex(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadConnected(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadTimestamp(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadMapping(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadAxes(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadButtons(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSGamepadPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSGamepadPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSGamepadPrototype* ptr = new (NotNull, JSC::allocateCell<JSGamepadPrototype>(vm.heap)) JSGamepadPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSGamepadPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSGamepadConstructor : public DOMConstructorObject {
private:
    JSGamepadConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSGamepadConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSGamepadConstructor* ptr = new (NotNull, JSC::allocateCell<JSGamepadConstructor>(vm.heap)) JSGamepadConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

const ClassInfo JSGamepadConstructor::s_info = { "GamepadConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadConstructor) };

JSGamepadConstructor::JSGamepadConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSGamepadConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSGamepad::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Gamepad"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

/* Hash table for prototype */

static const HashTableValue JSGamepadPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "id", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "index", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadIndex), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "connected", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadConnected), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "timestamp", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadTimestamp), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "mapping", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadMapping), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "axes", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadAxes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "buttons", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadButtons), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSGamepadPrototype::s_info = { "GamepadPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadPrototype) };

void JSGamepadPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSGamepadPrototypeTableValues, *this);
}

const ClassInfo JSGamepad::s_info = { "Gamepad", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepad) };

JSGamepad::JSGamepad(Structure* structure, JSDOMGlobalObject* globalObject, Ref<Gamepad>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSGamepad::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSGamepadPrototype::create(vm, globalObject, JSGamepadPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSGamepad::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSGamepad>(vm, globalObject);
}

void JSGamepad::destroy(JSC::JSCell* cell)
{
    JSGamepad* thisObject = static_cast<JSGamepad*>(cell);
    thisObject->JSGamepad::~JSGamepad();
}

JSGamepad::~JSGamepad()
{
    releaseImpl();
}

EncodedJSValue jsGamepadId(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "id");
        return throwGetterTypeError(*exec, "Gamepad", "id");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.id());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadIndex(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "index");
        return throwGetterTypeError(*exec, "Gamepad", "index");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.index());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadConnected(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "connected");
        return throwGetterTypeError(*exec, "Gamepad", "connected");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.connected());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadTimestamp(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "timestamp");
        return throwGetterTypeError(*exec, "Gamepad", "timestamp");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.timestamp());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadMapping(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "mapping");
        return throwGetterTypeError(*exec, "Gamepad", "mapping");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.mapping());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadAxes(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "axes");
        return throwGetterTypeError(*exec, "Gamepad", "axes");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.axes());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadButtons(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSGamepad* castedThis = jsDynamicCast<JSGamepad*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSGamepadPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "Gamepad", "buttons");
        return throwGetterTypeError(*exec, "Gamepad", "buttons");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.buttons());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSGamepadPrototype* domObject = jsDynamicCast<JSGamepadPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSGamepad::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSGamepad::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSGamepadConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSGamepadOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSGamepadOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsGamepad = jsCast<JSGamepad*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsGamepad->impl(), jsGamepad);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, Gamepad* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSGamepad>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Gamepad.
    COMPILE_ASSERT(!__is_polymorphic(Gamepad), Gamepad_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSGamepad>(globalObject, impl);
}

Gamepad* JSGamepad::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSGamepad*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(GAMEPAD)
