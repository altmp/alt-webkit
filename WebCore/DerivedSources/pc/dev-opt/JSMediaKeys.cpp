/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA_V2)

#include "JSMediaKeys.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSMediaKeySession.h"
#include "MediaKeySession.h"
#include "MediaKeys.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeysPrototypeFunctionCreateSession(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaKeysConstructorFunctionIsTypeSupported(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMediaKeysKeySystem(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaKeysConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSMediaKeysPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaKeysPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaKeysPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaKeysPrototype>(vm.heap)) JSMediaKeysPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaKeysPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSMediaKeysConstructor : public DOMConstructorObject {
private:
    JSMediaKeysConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSMediaKeysConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSMediaKeysConstructor* ptr = new (NotNull, JSC::allocateCell<JSMediaKeysConstructor>(vm.heap)) JSMediaKeysConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSMediaKeys(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

/* Hash table for constructor */

static const HashTableValue JSMediaKeysConstructorTableValues[] =
{
    { "isTypeSupported", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeysConstructorFunctionIsTypeSupported), (intptr_t) (1) },
};

EncodedJSValue JSC_HOST_CALL JSMediaKeysConstructor::constructJSMediaKeys(ExecState* exec)
{
    auto* castedThis = jsCast<JSMediaKeysConstructor*>(exec->callee());
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    String keySystem = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<MediaKeys> object = MediaKeys::create(keySystem, ec);
    if (ec) {
        setDOMException(exec, ec);
        return JSValue::encode(JSValue());
    }
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSMediaKeysConstructor::s_info = { "WebKitMediaKeysConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeysConstructor) };

JSMediaKeysConstructor::JSMediaKeysConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaKeysConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSMediaKeys::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebKitMediaKeys"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSMediaKeysConstructorTableValues, *this);
}

ConstructType JSMediaKeysConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSMediaKeys;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSMediaKeysPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeysConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "keySystem", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeysKeySystem), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "createSession", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsMediaKeysPrototypeFunctionCreateSession), (intptr_t) (0) },
};

const ClassInfo JSMediaKeysPrototype::s_info = { "WebKitMediaKeysPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeysPrototype) };

void JSMediaKeysPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaKeysPrototypeTableValues, *this);
}

const ClassInfo JSMediaKeys::s_info = { "WebKitMediaKeys", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeys) };

JSMediaKeys::JSMediaKeys(Structure* structure, JSDOMGlobalObject* globalObject, Ref<MediaKeys>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSMediaKeys::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaKeysPrototype::create(vm, globalObject, JSMediaKeysPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaKeys::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaKeys>(vm, globalObject);
}

void JSMediaKeys::destroy(JSC::JSCell* cell)
{
    JSMediaKeys* thisObject = static_cast<JSMediaKeys*>(cell);
    thisObject->JSMediaKeys::~JSMediaKeys();
}

JSMediaKeys::~JSMediaKeys()
{
    releaseImpl();
}

EncodedJSValue jsMediaKeysKeySystem(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaKeys* castedThis = jsDynamicCast<JSMediaKeys*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaKeysPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MediaKeys", "keySystem");
        return throwGetterTypeError(*exec, "MediaKeys", "keySystem");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.keySystem());
    return JSValue::encode(result);
}


EncodedJSValue jsMediaKeysConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSMediaKeysPrototype* domObject = jsDynamicCast<JSMediaKeysPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSMediaKeys::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSMediaKeys::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaKeysConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsMediaKeysPrototypeFunctionCreateSession(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSMediaKeys* castedThis = jsDynamicCast<JSMediaKeys*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "MediaKeys", "createSession");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSMediaKeys::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    auto* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    String type = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<Uint8Array> initData = toUint8Array(exec->argument(1));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createSession(scriptContext, type, initData.get(), ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsMediaKeysConstructorFunctionIsTypeSupported(ExecState* exec)
{
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    String keySystem = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String type = exec->argumentCount() <= 1 ? String() : exec->uncheckedArgument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(MediaKeys::isTypeSupported(keySystem, type));
    return JSValue::encode(result);
}

bool JSMediaKeysOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaKeysOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaKeys = jsCast<JSMediaKeys*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaKeys->impl(), jsMediaKeys);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaKeys@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore9MediaKeysE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, MediaKeys* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMediaKeys>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaKeys@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore9MediaKeysE[2];
#if COMPILER(CLANG)
    // If this fails MediaKeys does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(MediaKeys), MediaKeys_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaKeys has subclasses. If MediaKeys has subclasses that get passed
    // to toJS() we currently require MediaKeys you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSMediaKeys>(globalObject, impl);
}

MediaKeys* JSMediaKeys::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaKeys*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA_V2)
