/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FONT_LOAD_EVENTS)

#include "JSFontLoader.h"

#include "Dictionary.h"
#include "Event.h"
#include "ExceptionCode.h"
#include "FontLoader.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSVoidCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionCheckFont(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionLoadFont(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionNotifyWhenFontsReady(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionAddEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionRemoveEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionDispatchEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFontLoaderOnloading(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSFontLoaderOnloading(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontLoaderOnloadingdone(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSFontLoaderOnloadingdone(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontLoaderOnloadstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSFontLoaderOnloadstart(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontLoaderOnload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSFontLoaderOnload(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontLoaderOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSFontLoaderOnerror(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontLoaderLoading(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSFontLoaderPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSFontLoaderPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFontLoaderPrototype* ptr = new (NotNull, JSC::allocateCell<JSFontLoaderPrototype>(vm.heap)) JSFontLoaderPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFontLoaderPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSFontLoaderPrototypeTableValues[] =
{
    { "onloading", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderOnloading), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontLoaderOnloading) },
    { "onloadingdone", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderOnloadingdone), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontLoaderOnloadingdone) },
    { "onloadstart", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderOnloadstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontLoaderOnloadstart) },
    { "onload", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderOnload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontLoaderOnload) },
    { "onerror", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontLoaderOnerror) },
    { "loading", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontLoaderLoading), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "checkFont", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionCheckFont), (intptr_t) (1) },
    { "loadFont", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionLoadFont), (intptr_t) (1) },
    { "notifyWhenFontsReady", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionNotifyWhenFontsReady), (intptr_t) (1) },
    { "addEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionAddEventListener), (intptr_t) (2) },
    { "removeEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionRemoveEventListener), (intptr_t) (2) },
    { "dispatchEvent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsFontLoaderPrototypeFunctionDispatchEvent), (intptr_t) (1) },
};

const ClassInfo JSFontLoaderPrototype::s_info = { "FontLoaderPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFontLoaderPrototype) };

void JSFontLoaderPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFontLoaderPrototypeTableValues, *this);
}

const ClassInfo JSFontLoader::s_info = { "FontLoader", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFontLoader) };

JSFontLoader::JSFontLoader(Structure* structure, JSDOMGlobalObject* globalObject, Ref<FontLoader>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSFontLoader::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFontLoaderPrototype::create(vm, globalObject, JSFontLoaderPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFontLoader::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFontLoader>(vm, globalObject);
}

void JSFontLoader::destroy(JSC::JSCell* cell)
{
    JSFontLoader* thisObject = static_cast<JSFontLoader*>(cell);
    thisObject->JSFontLoader::~JSFontLoader();
}

JSFontLoader::~JSFontLoader()
{
    releaseImpl();
}

EncodedJSValue jsFontLoaderOnloading(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "onloading");
        return throwGetterTypeError(*exec, "FontLoader", "onloading");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().loadingEvent));
}


EncodedJSValue jsFontLoaderOnloadingdone(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "onloadingdone");
        return throwGetterTypeError(*exec, "FontLoader", "onloadingdone");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().loadingdoneEvent));
}


EncodedJSValue jsFontLoaderOnloadstart(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "onloadstart");
        return throwGetterTypeError(*exec, "FontLoader", "onloadstart");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().loadstartEvent));
}


EncodedJSValue jsFontLoaderOnload(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "onload");
        return throwGetterTypeError(*exec, "FontLoader", "onload");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().loadEvent));
}


EncodedJSValue jsFontLoaderOnerror(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "onerror");
        return throwGetterTypeError(*exec, "FontLoader", "onerror");
    }
    UNUSED_PARAM(exec);
    return JSValue::encode(eventHandlerAttribute(castedThis->impl(), eventNames().errorEvent));
}


EncodedJSValue jsFontLoaderLoading(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "FontLoader", "loading");
        return throwGetterTypeError(*exec, "FontLoader", "loading");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.loading());
    return JSValue::encode(result);
}


void setJSFontLoaderOnloading(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "FontLoader", "onloading");
        else
            throwSetterTypeError(*exec, "FontLoader", "onloading");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().loadingEvent, value);
}


void setJSFontLoaderOnloadingdone(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "FontLoader", "onloadingdone");
        else
            throwSetterTypeError(*exec, "FontLoader", "onloadingdone");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().loadingdoneEvent, value);
}


void setJSFontLoaderOnloadstart(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "FontLoader", "onloadstart");
        else
            throwSetterTypeError(*exec, "FontLoader", "onloadstart");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().loadstartEvent, value);
}


void setJSFontLoaderOnload(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "FontLoader", "onload");
        else
            throwSetterTypeError(*exec, "FontLoader", "onload");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().loadEvent, value);
}


void setJSFontLoaderOnerror(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSFontLoaderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "FontLoader", "onerror");
        else
            throwSetterTypeError(*exec, "FontLoader", "onerror");
        return;
    }
    setEventHandlerAttribute(*exec, *castedThis, castedThis->impl(), eventNames().errorEvent, value);
}


EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionCheckFont(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "checkFont");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    String font = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    String text = exec->argumentCount() <= 1 ? String() : exec->uncheckedArgument(1).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.checkFont(font, text));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionLoadFont(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "loadFont");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    Dictionary params = { exec, exec->argument(0) };
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.loadFont(params);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionNotifyWhenFontsReady(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "notifyWhenFontsReady");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isFunction())
        return throwArgumentMustBeFunctionError(*exec, 0, "callback", "FontLoader", "notifyWhenFontsReady");
    RefPtr<VoidCallback> callback = JSVoidCallback::create(asObject(exec->uncheckedArgument(0)), castedThis->globalObject());
    impl.notifyWhenFontsReady(callback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "addEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForAdd(*exec, *asObject(listener), *castedThis), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "removeEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->toAtomicString(exec), createJSEventListenerForRemove(*exec, *asObject(listener), *castedThis).ptr(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFontLoaderPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSFontLoader* castedThis = jsDynamicCast<JSFontLoader*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "FontLoader", "dispatchEvent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFontLoader::info());
    auto& impl = castedThis->impl();
    if (UNLIKELY(exec->argumentCount() < 1))
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event = JSEvent::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.dispatchEvent(event, ec));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSFontLoader::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFontLoader*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

bool JSFontLoaderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsFontLoader = jsCast<JSFontLoader*>(handle.slot()->asCell());
    if (jsFontLoader->impl().hasPendingActivity())
        return true;
    if (jsFontLoader->impl().isFiringEventListeners())
        return true;
    Document* root = WTF::getPtr(jsFontLoader->impl().document());
    if (!root)
        return false;
    return visitor.containsOpaqueRoot(root);
}

void JSFontLoaderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFontLoader = jsCast<JSFontLoader*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFontLoader->impl(), jsFontLoader);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FontLoader@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore10FontLoaderE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, FontLoader* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSFontLoader>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FontLoader@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore10FontLoaderE[2];
#if COMPILER(CLANG)
    // If this fails FontLoader does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(FontLoader), FontLoader_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FontLoader has subclasses. If FontLoader has subclasses that get passed
    // to toJS() we currently require FontLoader you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSFontLoader>(globalObject, impl);
}

FontLoader* JSFontLoader::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSFontLoader*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(FONT_LOAD_EVENTS)
