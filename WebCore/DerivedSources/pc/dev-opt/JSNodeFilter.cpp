/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNodeFilter.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSNode.h"
#include "NodeFilter.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsNodeFilterPrototypeFunctionAcceptNode(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsNodeFilterConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSNodeFilterPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSNodeFilterPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSNodeFilterPrototype* ptr = new (NotNull, JSC::allocateCell<JSNodeFilterPrototype>(vm.heap)) JSNodeFilterPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSNodeFilterPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSNodeFilterConstructor : public DOMConstructorObject {
private:
    JSNodeFilterConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSNodeFilterConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSNodeFilterConstructor* ptr = new (NotNull, JSC::allocateCell<JSNodeFilterConstructor>(vm.heap)) JSNodeFilterConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
};

/* Hash table for constructor */

static const HashTableValue JSNodeFilterConstructorTableValues[] =
{
    { "FILTER_ACCEPT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "FILTER_REJECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "FILTER_SKIP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "SHOW_ALL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFF), (intptr_t) (0) },
    { "SHOW_ELEMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000001), (intptr_t) (0) },
    { "SHOW_ATTRIBUTE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000002), (intptr_t) (0) },
    { "SHOW_TEXT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000004), (intptr_t) (0) },
    { "SHOW_CDATA_SECTION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000008), (intptr_t) (0) },
    { "SHOW_ENTITY_REFERENCE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000010), (intptr_t) (0) },
    { "SHOW_ENTITY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000020), (intptr_t) (0) },
    { "SHOW_PROCESSING_INSTRUCTION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000040), (intptr_t) (0) },
    { "SHOW_COMMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000080), (intptr_t) (0) },
    { "SHOW_DOCUMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000100), (intptr_t) (0) },
    { "SHOW_DOCUMENT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000200), (intptr_t) (0) },
    { "SHOW_DOCUMENT_FRAGMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000400), (intptr_t) (0) },
    { "SHOW_NOTATION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000800), (intptr_t) (0) },
};


COMPILE_ASSERT(1 == NodeFilter::FILTER_ACCEPT, NodeFilterEnumFILTER_ACCEPTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == NodeFilter::FILTER_REJECT, NodeFilterEnumFILTER_REJECTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == NodeFilter::FILTER_SKIP, NodeFilterEnumFILTER_SKIPIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0xFFFFFFFF == NodeFilter::SHOW_ALL, NodeFilterEnumSHOW_ALLIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000001 == NodeFilter::SHOW_ELEMENT, NodeFilterEnumSHOW_ELEMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000002 == NodeFilter::SHOW_ATTRIBUTE, NodeFilterEnumSHOW_ATTRIBUTEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000004 == NodeFilter::SHOW_TEXT, NodeFilterEnumSHOW_TEXTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000008 == NodeFilter::SHOW_CDATA_SECTION, NodeFilterEnumSHOW_CDATA_SECTIONIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000010 == NodeFilter::SHOW_ENTITY_REFERENCE, NodeFilterEnumSHOW_ENTITY_REFERENCEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000020 == NodeFilter::SHOW_ENTITY, NodeFilterEnumSHOW_ENTITYIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000040 == NodeFilter::SHOW_PROCESSING_INSTRUCTION, NodeFilterEnumSHOW_PROCESSING_INSTRUCTIONIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000080 == NodeFilter::SHOW_COMMENT, NodeFilterEnumSHOW_COMMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000100 == NodeFilter::SHOW_DOCUMENT, NodeFilterEnumSHOW_DOCUMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000200 == NodeFilter::SHOW_DOCUMENT_TYPE, NodeFilterEnumSHOW_DOCUMENT_TYPEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000400 == NodeFilter::SHOW_DOCUMENT_FRAGMENT, NodeFilterEnumSHOW_DOCUMENT_FRAGMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000800 == NodeFilter::SHOW_NOTATION, NodeFilterEnumSHOW_NOTATIONIsWrongUseDoNotCheckConstants);

const ClassInfo JSNodeFilterConstructor::s_info = { "NodeFilterConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNodeFilterConstructor) };

JSNodeFilterConstructor::JSNodeFilterConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSNodeFilterConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSNodeFilter::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("NodeFilter"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSNodeFilterConstructorTableValues, *this);
}

/* Hash table for prototype */

static const HashTableValue JSNodeFilterPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeFilterConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "FILTER_ACCEPT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "FILTER_REJECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "FILTER_SKIP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "SHOW_ALL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0xFFFFFFFF), (intptr_t) (0) },
    { "SHOW_ELEMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000001), (intptr_t) (0) },
    { "SHOW_ATTRIBUTE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000002), (intptr_t) (0) },
    { "SHOW_TEXT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000004), (intptr_t) (0) },
    { "SHOW_CDATA_SECTION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000008), (intptr_t) (0) },
    { "SHOW_ENTITY_REFERENCE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000010), (intptr_t) (0) },
    { "SHOW_ENTITY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000020), (intptr_t) (0) },
    { "SHOW_PROCESSING_INSTRUCTION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000040), (intptr_t) (0) },
    { "SHOW_COMMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000080), (intptr_t) (0) },
    { "SHOW_DOCUMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000100), (intptr_t) (0) },
    { "SHOW_DOCUMENT_TYPE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000200), (intptr_t) (0) },
    { "SHOW_DOCUMENT_FRAGMENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000400), (intptr_t) (0) },
    { "SHOW_NOTATION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0x00000800), (intptr_t) (0) },
    { "acceptNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsNodeFilterPrototypeFunctionAcceptNode), (intptr_t) (0) },
};

const ClassInfo JSNodeFilterPrototype::s_info = { "NodeFilterPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNodeFilterPrototype) };

void JSNodeFilterPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSNodeFilterPrototypeTableValues, *this);
}

const ClassInfo JSNodeFilter::s_info = { "NodeFilter", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNodeFilter) };

JSNodeFilter::JSNodeFilter(Structure* structure, JSDOMGlobalObject* globalObject, Ref<NodeFilter>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSNodeFilter::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSNodeFilterPrototype::create(vm, globalObject, JSNodeFilterPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSNodeFilter::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNodeFilter>(vm, globalObject);
}

void JSNodeFilter::destroy(JSC::JSCell* cell)
{
    JSNodeFilter* thisObject = static_cast<JSNodeFilter*>(cell);
    thisObject->JSNodeFilter::~JSNodeFilter();
}

JSNodeFilter::~JSNodeFilter()
{
    releaseImpl();
}

EncodedJSValue jsNodeFilterConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSNodeFilterPrototype* domObject = jsDynamicCast<JSNodeFilterPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSNodeFilter::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSNodeFilter::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNodeFilterConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsNodeFilterPrototypeFunctionAcceptNode(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSNodeFilter* castedThis = jsDynamicCast<JSNodeFilter*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "NodeFilter", "acceptNode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSNodeFilter::info());
    auto& impl = castedThis->impl();
    Node* n = JSNode::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsNumber(impl.acceptNode(exec, n));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(result);
}

void JSNodeFilter::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSNodeFilter*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

bool JSNodeFilterOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSNodeFilterOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsNodeFilter = jsCast<JSNodeFilter*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsNodeFilter->impl(), jsNodeFilter);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, NodeFilter* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSNodeFilter>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to NodeFilter.
    COMPILE_ASSERT(!__is_polymorphic(NodeFilter), NodeFilter_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSNodeFilter>(globalObject, impl);
}


}
