/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(CONTENT_FILTERING)

#include "JSMockContentFilterSettings.h"

#include "JSDOMBinding.h"
#include "MockContentFilterSettings.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsMockContentFilterSettingsEnabled(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsEnabled(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsBlockedString(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsBlockedString(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsModifiedRequestURL(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsModifiedRequestURL(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsDecisionPoint(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsDecisionPoint(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsDecision(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsDecision(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsUnblockRequestDecision(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSMockContentFilterSettingsUnblockRequestDecision(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsUnblockRequestURL(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSMockContentFilterSettingsPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMockContentFilterSettingsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMockContentFilterSettingsPrototype* ptr = new (NotNull, JSC::allocateCell<JSMockContentFilterSettingsPrototype>(vm.heap)) JSMockContentFilterSettingsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMockContentFilterSettingsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table */

static const struct CompactHashIndex JSMockContentFilterSettingsTableIndex[8] = {
    { -1, -1 },
    { -1, -1 },
    { 1, -1 },
    { -1, -1 },
    { 0, -1 },
    { -1, -1 },
    { -1, -1 },
    { 2, -1 },
};


static const HashTableValue JSMockContentFilterSettingsTableValues[] =
{
    { "decisionPoint", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsDecisionPoint), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsDecisionPoint) },
    { "decision", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsDecision), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsDecision) },
    { "unblockRequestDecision", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsUnblockRequestDecision), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsUnblockRequestDecision) },
};

static const HashTable JSMockContentFilterSettingsTable = { 3, 7, true, JSMockContentFilterSettingsTableValues, 0, JSMockContentFilterSettingsTableIndex };
/* Hash table for prototype */

static const HashTableValue JSMockContentFilterSettingsPrototypeTableValues[] =
{
    { "enabled", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsEnabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsEnabled) },
    { "blockedString", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsBlockedString), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsBlockedString) },
    { "modifiedRequestURL", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsModifiedRequestURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsModifiedRequestURL) },
    { "unblockRequestURL", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsUnblockRequestURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "DECISION_POINT_AFTER_WILL_SEND_REQUEST", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "DECISION_POINT_AFTER_REDIRECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
    { "DECISION_POINT_AFTER_RESPONSE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(2), (intptr_t) (0) },
    { "DECISION_POINT_AFTER_ADD_DATA", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(3), (intptr_t) (0) },
    { "DECISION_POINT_AFTER_FINISHED_ADDING_DATA", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(4), (intptr_t) (0) },
    { "DECISION_ALLOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(0), (intptr_t) (0) },
    { "DECISION_BLOCK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, (intptr_t)(1), (intptr_t) (0) },
};

const ClassInfo JSMockContentFilterSettingsPrototype::s_info = { "MockContentFilterSettingsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMockContentFilterSettingsPrototype) };

void JSMockContentFilterSettingsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMockContentFilterSettingsPrototypeTableValues, *this);
}

const ClassInfo JSMockContentFilterSettings::s_info = { "MockContentFilterSettings", &Base::s_info, &JSMockContentFilterSettingsTable, CREATE_METHOD_TABLE(JSMockContentFilterSettings) };

JSMockContentFilterSettings::JSMockContentFilterSettings(Structure* structure, JSDOMGlobalObject* globalObject, Ref<MockContentFilterSettings>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSMockContentFilterSettings::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMockContentFilterSettingsPrototype::create(vm, globalObject, JSMockContentFilterSettingsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMockContentFilterSettings::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMockContentFilterSettings>(vm, globalObject);
}

void JSMockContentFilterSettings::destroy(JSC::JSCell* cell)
{
    JSMockContentFilterSettings* thisObject = static_cast<JSMockContentFilterSettings*>(cell);
    thisObject->JSMockContentFilterSettings::~JSMockContentFilterSettings();
}

JSMockContentFilterSettings::~JSMockContentFilterSettings()
{
    releaseImpl();
}

bool JSMockContentFilterSettings::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSMockContentFilterSettings*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSMockContentFilterSettings, Base>(exec, JSMockContentFilterSettingsTable, thisObject, propertyName, slot);
}

EncodedJSValue jsMockContentFilterSettingsEnabled(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MockContentFilterSettings", "enabled");
        return throwGetterTypeError(*exec, "MockContentFilterSettings", "enabled");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.enabled());
    return JSValue::encode(result);
}


EncodedJSValue jsMockContentFilterSettingsBlockedString(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MockContentFilterSettings", "blockedString");
        return throwGetterTypeError(*exec, "MockContentFilterSettings", "blockedString");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.blockedString());
    return JSValue::encode(result);
}


EncodedJSValue jsMockContentFilterSettingsModifiedRequestURL(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MockContentFilterSettings", "modifiedRequestURL");
        return throwGetterTypeError(*exec, "MockContentFilterSettings", "modifiedRequestURL");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.modifiedRequestURL());
    return JSValue::encode(result);
}


EncodedJSValue jsMockContentFilterSettingsDecisionPoint(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(slotBase);
    return JSValue::encode(castedThis->decisionPoint(exec));
}


EncodedJSValue jsMockContentFilterSettingsDecision(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(slotBase);
    return JSValue::encode(castedThis->decision(exec));
}


EncodedJSValue jsMockContentFilterSettingsUnblockRequestDecision(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(slotBase);
    return JSValue::encode(castedThis->unblockRequestDecision(exec));
}


EncodedJSValue jsMockContentFilterSettingsUnblockRequestURL(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "MockContentFilterSettings", "unblockRequestURL");
        return throwGetterTypeError(*exec, "MockContentFilterSettings", "unblockRequestURL");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.unblockRequestURL());
    return JSValue::encode(result);
}


void setJSMockContentFilterSettingsEnabled(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MockContentFilterSettings", "enabled");
        else
            throwSetterTypeError(*exec, "MockContentFilterSettings", "enabled");
        return;
    }
    auto& impl = castedThis->impl();
    bool nativeValue = value.toBoolean(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setEnabled(nativeValue);
}


void setJSMockContentFilterSettingsBlockedString(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MockContentFilterSettings", "blockedString");
        else
            throwSetterTypeError(*exec, "MockContentFilterSettings", "blockedString");
        return;
    }
    auto& impl = castedThis->impl();
    String nativeValue = value.toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setBlockedString(nativeValue);
}


void setJSMockContentFilterSettingsModifiedRequestURL(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSMockContentFilterSettings* castedThis = jsDynamicCast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMockContentFilterSettingsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "MockContentFilterSettings", "modifiedRequestURL");
        else
            throwSetterTypeError(*exec, "MockContentFilterSettings", "modifiedRequestURL");
        return;
    }
    auto& impl = castedThis->impl();
    String nativeValue = value.toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setModifiedRequestURL(nativeValue);
}


void setJSMockContentFilterSettingsDecisionPoint(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(baseObject);
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    castedThis->setDecisionPoint(exec, value);
}


void setJSMockContentFilterSettingsDecision(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(baseObject);
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    castedThis->setDecision(exec, value);
}


void setJSMockContentFilterSettingsUnblockRequestDecision(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSMockContentFilterSettings*>(baseObject);
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    castedThis->setUnblockRequestDecision(exec, value);
}


bool JSMockContentFilterSettingsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMockContentFilterSettingsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMockContentFilterSettings = jsCast<JSMockContentFilterSettings*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMockContentFilterSettings->impl(), jsMockContentFilterSettings);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, MockContentFilterSettings* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMockContentFilterSettings>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to MockContentFilterSettings.
    COMPILE_ASSERT(!__is_polymorphic(MockContentFilterSettings), MockContentFilterSettings_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSMockContentFilterSettings>(globalObject, impl);
}

MockContentFilterSettings* JSMockContentFilterSettings::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMockContentFilterSettings*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(CONTENT_FILTERING)
