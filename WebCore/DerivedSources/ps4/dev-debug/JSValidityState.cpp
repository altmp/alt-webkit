/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSValidityState.h"

#include "JSDOMBinding.h"
#include "ValidityState.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsValidityStateValueMissing(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateTypeMismatch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStatePatternMismatch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateTooLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateRangeUnderflow(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateRangeOverflow(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateStepMismatch(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateBadInput(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateCustomError(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateValid(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSValidityStatePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSValidityStatePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSValidityStatePrototype* ptr = new (NotNull, JSC::allocateCell<JSValidityStatePrototype>(vm.heap)) JSValidityStatePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSValidityStatePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSValidityStatePrototypeTableValues[] =
{
    { "valueMissing", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateValueMissing), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "typeMismatch", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateTypeMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "patternMismatch", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStatePatternMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "tooLong", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateTooLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "rangeUnderflow", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateRangeUnderflow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "rangeOverflow", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateRangeOverflow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "stepMismatch", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateStepMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "badInput", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateBadInput), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "customError", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateCustomError), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "valid", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateValid), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSValidityStatePrototype::s_info = { "ValidityStatePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSValidityStatePrototype) };

void JSValidityStatePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSValidityStatePrototypeTableValues, *this);
}

const ClassInfo JSValidityState::s_info = { "ValidityState", &Base::s_info, 0, CREATE_METHOD_TABLE(JSValidityState) };

JSValidityState::JSValidityState(Structure* structure, JSDOMGlobalObject* globalObject, Ref<ValidityState>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSValidityState::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSValidityStatePrototype::create(vm, globalObject, JSValidityStatePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSValidityState::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSValidityState>(vm, globalObject);
}

void JSValidityState::destroy(JSC::JSCell* cell)
{
    JSValidityState* thisObject = static_cast<JSValidityState*>(cell);
    thisObject->JSValidityState::~JSValidityState();
}

JSValidityState::~JSValidityState()
{
    releaseImpl();
}

EncodedJSValue jsValidityStateValueMissing(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "valueMissing");
        return throwGetterTypeError(*exec, "ValidityState", "valueMissing");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.valueMissing());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateTypeMismatch(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "typeMismatch");
        return throwGetterTypeError(*exec, "ValidityState", "typeMismatch");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.typeMismatch());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStatePatternMismatch(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "patternMismatch");
        return throwGetterTypeError(*exec, "ValidityState", "patternMismatch");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.patternMismatch());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateTooLong(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "tooLong");
        return throwGetterTypeError(*exec, "ValidityState", "tooLong");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.tooLong());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateRangeUnderflow(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "rangeUnderflow");
        return throwGetterTypeError(*exec, "ValidityState", "rangeUnderflow");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.rangeUnderflow());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateRangeOverflow(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "rangeOverflow");
        return throwGetterTypeError(*exec, "ValidityState", "rangeOverflow");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.rangeOverflow());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateStepMismatch(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "stepMismatch");
        return throwGetterTypeError(*exec, "ValidityState", "stepMismatch");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.stepMismatch());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateBadInput(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "badInput");
        return throwGetterTypeError(*exec, "ValidityState", "badInput");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.badInput());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateCustomError(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "customError");
        return throwGetterTypeError(*exec, "ValidityState", "customError");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.customError());
    return JSValue::encode(result);
}


EncodedJSValue jsValidityStateValid(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSValidityState* castedThis = jsDynamicCast<JSValidityState*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSValidityStatePrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ValidityState", "valid");
        return throwGetterTypeError(*exec, "ValidityState", "valid");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.valid());
    return JSValue::encode(result);
}


bool JSValidityStateOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSValidityStateOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsValidityState = jsCast<JSValidityState*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsValidityState->impl(), jsValidityState);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, ValidityState* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSValidityState>(globalObject, impl))
        return result;
    return createNewWrapper<JSValidityState>(globalObject, impl);
}

ValidityState* JSValidityState::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSValidityState*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
