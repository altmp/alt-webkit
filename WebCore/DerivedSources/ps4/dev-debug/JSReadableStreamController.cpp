/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(STREAMS_API)

#include "JSReadableStreamController.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "ReadableStreamController.h"
#include <bindings/ScriptValue.h>
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionEnqueue(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionClose(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionError(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsReadableStreamControllerDesiredSize(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsReadableStreamControllerConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSReadableStreamControllerPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSReadableStreamControllerPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSReadableStreamControllerPrototype* ptr = new (NotNull, JSC::allocateCell<JSReadableStreamControllerPrototype>(vm.heap)) JSReadableStreamControllerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSReadableStreamControllerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSReadableStreamControllerConstructor : public DOMConstructorObject {
private:
    JSReadableStreamControllerConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSReadableStreamControllerConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSReadableStreamControllerConstructor* ptr = new (NotNull, JSC::allocateCell<JSReadableStreamControllerConstructor>(vm.heap)) JSReadableStreamControllerConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

const ClassInfo JSReadableStreamControllerConstructor::s_info = { "ReadableStreamControllerConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableStreamControllerConstructor) };

JSReadableStreamControllerConstructor::JSReadableStreamControllerConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSReadableStreamControllerConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSReadableStreamController::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("ReadableStreamController"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

ConstructType JSReadableStreamControllerConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSReadableStreamController;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSReadableStreamControllerPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsReadableStreamControllerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "desiredSize", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsReadableStreamControllerDesiredSize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "enqueue", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsReadableStreamControllerPrototypeFunctionEnqueue), (intptr_t) (0) },
    { "close", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsReadableStreamControllerPrototypeFunctionClose), (intptr_t) (0) },
    { "error", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsReadableStreamControllerPrototypeFunctionError), (intptr_t) (0) },
};

const ClassInfo JSReadableStreamControllerPrototype::s_info = { "ReadableStreamControllerPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableStreamControllerPrototype) };

void JSReadableStreamControllerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSReadableStreamControllerPrototypeTableValues, *this);
}

const ClassInfo JSReadableStreamController::s_info = { "ReadableStreamController", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableStreamController) };

JSReadableStreamController::JSReadableStreamController(Structure* structure, JSDOMGlobalObject* globalObject, Ref<ReadableStreamController>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSReadableStreamController::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSReadableStreamControllerPrototype::create(vm, globalObject, JSReadableStreamControllerPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSReadableStreamController::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSReadableStreamController>(vm, globalObject);
}

void JSReadableStreamController::destroy(JSC::JSCell* cell)
{
    JSReadableStreamController* thisObject = static_cast<JSReadableStreamController*>(cell);
    thisObject->JSReadableStreamController::~JSReadableStreamController();
}

JSReadableStreamController::~JSReadableStreamController()
{
    releaseImpl();
}

EncodedJSValue jsReadableStreamControllerDesiredSize(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSReadableStreamController* castedThis = jsDynamicCast<JSReadableStreamController*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSReadableStreamControllerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "ReadableStreamController", "desiredSize");
        return throwGetterTypeError(*exec, "ReadableStreamController", "desiredSize");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.desiredSize());
    return JSValue::encode(result);
}


EncodedJSValue jsReadableStreamControllerConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSReadableStreamControllerPrototype* domObject = jsDynamicCast<JSReadableStreamControllerPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    JSValue constructor = JSReadableStreamControllerConstructor::create(exec->vm(), JSReadableStreamControllerConstructor::createStructure(exec->vm(), domObject->globalObject(), domObject->globalObject()->objectPrototype()), jsCast<JSDOMGlobalObject*>(domObject->globalObject()));
    // Shadowing constructor property to ensure reusing the same constructor object
    domObject->putDirect(exec->vm(), exec->propertyNames().constructor, constructor, DontEnum | ReadOnly);
    return JSValue::encode(constructor);
}

EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionEnqueue(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSReadableStreamController* castedThis = jsDynamicCast<JSReadableStreamController*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "ReadableStreamController", "enqueue");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSReadableStreamController::info());
    auto& impl = castedThis->impl();
    Deprecated::ScriptValue chunk = { exec->vm(), exec->argument(0) };
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.enqueue(exec, chunk);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSReadableStreamController* castedThis = jsDynamicCast<JSReadableStreamController*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "ReadableStreamController", "close");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSReadableStreamController::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    impl.close(ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsReadableStreamControllerPrototypeFunctionError(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSReadableStreamController* castedThis = jsDynamicCast<JSReadableStreamController*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "ReadableStreamController", "error");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSReadableStreamController::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Deprecated::ScriptValue error = { exec->vm(), exec->argument(0) };
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.error(exec, error, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

bool JSReadableStreamControllerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSReadableStreamControllerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsReadableStreamController = jsCast<JSReadableStreamController*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsReadableStreamController->impl(), jsReadableStreamController);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, ReadableStreamController* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSReadableStreamController>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to ReadableStreamController.
    COMPILE_ASSERT(!__is_polymorphic(ReadableStreamController), ReadableStreamController_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSReadableStreamController>(globalObject, impl);
}

ReadableStreamController* JSReadableStreamController::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSReadableStreamController*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(STREAMS_API)
