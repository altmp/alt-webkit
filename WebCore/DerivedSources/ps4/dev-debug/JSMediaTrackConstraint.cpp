/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaTrackConstraint.h"

#include "JSDOMBinding.h"
#include "MediaTrackConstraint.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

class JSMediaTrackConstraintPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaTrackConstraintPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaTrackConstraintPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaTrackConstraintPrototype>(vm.heap)) JSMediaTrackConstraintPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaTrackConstraintPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMediaTrackConstraintPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

const ClassInfo JSMediaTrackConstraintPrototype::s_info = { "MediaTrackConstraintPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaTrackConstraintPrototype) };

void JSMediaTrackConstraintPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaTrackConstraintPrototypeTableValues, *this);
}

const ClassInfo JSMediaTrackConstraint::s_info = { "MediaTrackConstraint", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaTrackConstraint) };

JSMediaTrackConstraint::JSMediaTrackConstraint(Structure* structure, JSDOMGlobalObject* globalObject, Ref<MediaTrackConstraint>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSMediaTrackConstraint::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaTrackConstraintPrototype::create(vm, globalObject, JSMediaTrackConstraintPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaTrackConstraint::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaTrackConstraint>(vm, globalObject);
}

void JSMediaTrackConstraint::destroy(JSC::JSCell* cell)
{
    JSMediaTrackConstraint* thisObject = static_cast<JSMediaTrackConstraint*>(cell);
    thisObject->JSMediaTrackConstraint::~JSMediaTrackConstraint();
}

JSMediaTrackConstraint::~JSMediaTrackConstraint()
{
    releaseImpl();
}

bool JSMediaTrackConstraintOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaTrackConstraintOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaTrackConstraint = jsCast<JSMediaTrackConstraint*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaTrackConstraint->impl(), jsMediaTrackConstraint);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaTrackConstraint@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore20MediaTrackConstraintE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, MediaTrackConstraint* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMediaTrackConstraint>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaTrackConstraint@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore20MediaTrackConstraintE[2];
#if COMPILER(CLANG)
    // If this fails MediaTrackConstraint does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(MediaTrackConstraint), MediaTrackConstraint_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaTrackConstraint has subclasses. If MediaTrackConstraint has subclasses that get passed
    // to toJS() we currently require MediaTrackConstraint you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSMediaTrackConstraint>(globalObject, impl);
}

MediaTrackConstraint* JSMediaTrackConstraint::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaTrackConstraint*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
