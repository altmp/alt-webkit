/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSWebKitCSSMatrix.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSWebKitCSSMatrix.h"
#include "URL.h"
#include "WebKitCSSMatrix.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionMultiply(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionInverse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionTranslate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionScale(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewX(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewY(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsWebKitCSSMatrixA(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixA(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixB(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixB(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixC(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixC(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixD(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixD(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixE(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixE(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixF(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixF(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM11(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM11(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM12(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM12(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM13(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM13(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM14(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM14(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM21(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM21(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM22(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM22(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM23(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM23(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM24(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM24(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM31(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM31(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM32(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM32(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM33(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM33(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM34(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM34(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM41(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM41(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM42(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM42(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM43(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM43(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM44(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSWebKitCSSMatrixM44(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSWebKitCSSMatrixPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSWebKitCSSMatrixPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebKitCSSMatrixPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebKitCSSMatrixPrototype>(vm.heap)) JSWebKitCSSMatrixPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebKitCSSMatrixPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSWebKitCSSMatrixConstructor : public DOMConstructorObject {
private:
    JSWebKitCSSMatrixConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSWebKitCSSMatrixConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSWebKitCSSMatrixConstructor* ptr = new (NotNull, JSC::allocateCell<JSWebKitCSSMatrixConstructor>(vm.heap)) JSWebKitCSSMatrixConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSWebKitCSSMatrix(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

EncodedJSValue JSC_HOST_CALL JSWebKitCSSMatrixConstructor::constructJSWebKitCSSMatrix(ExecState* exec)
{
    auto* castedThis = jsCast<JSWebKitCSSMatrixConstructor*>(exec->callee());
    ExceptionCode ec = 0;
    String cssValue = exec->argumentCount() <= 0 ? String() : exec->uncheckedArgument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    RefPtr<WebKitCSSMatrix> object = WebKitCSSMatrix::create(cssValue, ec);
    if (ec) {
        setDOMException(exec, ec);
        return JSValue::encode(JSValue());
    }
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSWebKitCSSMatrixConstructor::s_info = { "WebKitCSSMatrixConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrixConstructor) };

JSWebKitCSSMatrixConstructor::JSWebKitCSSMatrixConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebKitCSSMatrixConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSWebKitCSSMatrix::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebKitCSSMatrix"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

ConstructType JSWebKitCSSMatrixConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSWebKitCSSMatrix;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSWebKitCSSMatrixPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "a", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixA), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixA) },
    { "b", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixB), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixB) },
    { "c", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixC), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixC) },
    { "d", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixD), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixD) },
    { "e", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixE), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixE) },
    { "f", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixF), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixF) },
    { "m11", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM11), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM11) },
    { "m12", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM12), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM12) },
    { "m13", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM13), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM13) },
    { "m14", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM14), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM14) },
    { "m21", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM21), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM21) },
    { "m22", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM22), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM22) },
    { "m23", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM23), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM23) },
    { "m24", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM24), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM24) },
    { "m31", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM31), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM31) },
    { "m32", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM32), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM32) },
    { "m33", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM33), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM33) },
    { "m34", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM34), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM34) },
    { "m41", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM41), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM41) },
    { "m42", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM42), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM42) },
    { "m43", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM43), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM43) },
    { "m44", DontDelete | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM44), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM44) },
    { "setMatrixValue", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue), (intptr_t) (0) },
    { "multiply", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionMultiply), (intptr_t) (0) },
    { "inverse", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionInverse), (intptr_t) (0) },
    { "translate", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionTranslate), (intptr_t) (0) },
    { "scale", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionScale), (intptr_t) (0) },
    { "rotate", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionRotate), (intptr_t) (0) },
    { "rotateAxisAngle", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle), (intptr_t) (0) },
    { "skewX", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSkewX), (intptr_t) (0) },
    { "skewY", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSkewY), (intptr_t) (0) },
    { "toString", DontEnum | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionToString), (intptr_t) (0) },
};

const ClassInfo JSWebKitCSSMatrixPrototype::s_info = { "WebKitCSSMatrixPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrixPrototype) };

void JSWebKitCSSMatrixPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebKitCSSMatrixPrototypeTableValues, *this);
}

const ClassInfo JSWebKitCSSMatrix::s_info = { "WebKitCSSMatrix", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrix) };

JSWebKitCSSMatrix::JSWebKitCSSMatrix(Structure* structure, JSDOMGlobalObject* globalObject, Ref<WebKitCSSMatrix>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSWebKitCSSMatrix::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebKitCSSMatrixPrototype::create(vm, globalObject, JSWebKitCSSMatrixPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWebKitCSSMatrix::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitCSSMatrix>(vm, globalObject);
}

void JSWebKitCSSMatrix::destroy(JSC::JSCell* cell)
{
    JSWebKitCSSMatrix* thisObject = static_cast<JSWebKitCSSMatrix*>(cell);
    thisObject->JSWebKitCSSMatrix::~JSWebKitCSSMatrix();
}

JSWebKitCSSMatrix::~JSWebKitCSSMatrix()
{
    releaseImpl();
}

EncodedJSValue jsWebKitCSSMatrixA(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "a");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "a");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.a());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixB(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "b");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "b");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.b());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixC(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "c");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "c");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.c());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixD(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "d");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "d");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.d());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixE(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "e");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "e");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.e());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixF(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "f");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "f");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.f());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM11(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m11");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m11");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m11());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM12(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m12");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m12");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m12());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM13(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m13");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m13");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m13());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM14(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m14");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m14");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m14());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM21(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m21");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m21");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m21());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM22(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m22");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m22");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m22());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM23(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m23");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m23");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m23());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM24(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m24");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m24");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m24());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM31(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m31");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m31");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m31());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM32(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m32");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m32");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m32());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM33(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m33");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m33");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m33());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM34(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m34");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m34");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m34());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM41(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m41");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m41");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m41());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM42(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m42");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m42");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m42());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM43(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m43");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m43");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m43());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixM44(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "WebKitCSSMatrix", "m44");
        return throwGetterTypeError(*exec, "WebKitCSSMatrix", "m44");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.m44());
    return JSValue::encode(result);
}


EncodedJSValue jsWebKitCSSMatrixConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSWebKitCSSMatrixPrototype* domObject = jsDynamicCast<JSWebKitCSSMatrixPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSWebKitCSSMatrix::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSWebKitCSSMatrixA(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "a");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "a");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setA(nativeValue);
}


void setJSWebKitCSSMatrixB(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "b");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "b");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setB(nativeValue);
}


void setJSWebKitCSSMatrixC(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "c");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "c");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setC(nativeValue);
}


void setJSWebKitCSSMatrixD(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "d");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "d");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setD(nativeValue);
}


void setJSWebKitCSSMatrixE(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "e");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "e");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setE(nativeValue);
}


void setJSWebKitCSSMatrixF(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "f");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "f");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setF(nativeValue);
}


void setJSWebKitCSSMatrixM11(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m11");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m11");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM11(nativeValue);
}


void setJSWebKitCSSMatrixM12(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m12");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m12");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM12(nativeValue);
}


void setJSWebKitCSSMatrixM13(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m13");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m13");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM13(nativeValue);
}


void setJSWebKitCSSMatrixM14(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m14");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m14");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM14(nativeValue);
}


void setJSWebKitCSSMatrixM21(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m21");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m21");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM21(nativeValue);
}


void setJSWebKitCSSMatrixM22(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m22");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m22");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM22(nativeValue);
}


void setJSWebKitCSSMatrixM23(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m23");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m23");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM23(nativeValue);
}


void setJSWebKitCSSMatrixM24(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m24");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m24");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM24(nativeValue);
}


void setJSWebKitCSSMatrixM31(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m31");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m31");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM31(nativeValue);
}


void setJSWebKitCSSMatrixM32(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m32");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m32");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM32(nativeValue);
}


void setJSWebKitCSSMatrixM33(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m33");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m33");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM33(nativeValue);
}


void setJSWebKitCSSMatrixM34(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m34");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m34");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM34(nativeValue);
}


void setJSWebKitCSSMatrixM41(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m41");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m41");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM41(nativeValue);
}


void setJSWebKitCSSMatrixM42(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m42");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m42");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM42(nativeValue);
}


void setJSWebKitCSSMatrixM43(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m43");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m43");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM43(nativeValue);
}


void setJSWebKitCSSMatrixM44(ExecState* exec, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*exec, "WebKitCSSMatrix", "m44");
        else
            throwSetterTypeError(*exec, "WebKitCSSMatrix", "m44");
        return;
    }
    auto& impl = castedThis->impl();
    double nativeValue = value.toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return;
    impl.setM44(nativeValue);
}


JSValue JSWebKitCSSMatrix::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitCSSMatrixConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "setMatrixValue");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    String string = exec->argument(0).toString(exec)->value(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMatrixValue(string, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionMultiply(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "multiply");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    WebKitCSSMatrix* secondMatrix = JSWebKitCSSMatrix::toWrapped(exec->argument(0));
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.multiply(secondMatrix)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionInverse(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "inverse");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    ExceptionCode ec = 0;
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.inverse(ec)));

    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionTranslate(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "translate");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double x = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double y = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double z = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.translate(x, y, z)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionScale(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "scale");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double scaleX = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double scaleY = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double scaleZ = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.scale(scaleX, scaleY, scaleZ)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotate(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "rotate");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double rotX = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double rotY = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double rotZ = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.rotate(rotX, rotY, rotZ)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "rotateAxisAngle");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double x = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double y = exec->argument(1).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double z = exec->argument(2).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    double angle = exec->argument(3).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.rotateAxisAngle(x, y, z, angle)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewX(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "skewX");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double angle = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.skewX(angle)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewY(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "skewY");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    double angle = exec->argument(0).toNumber(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.skewY(angle)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionToString(ExecState* exec)
{
    JSValue thisValue = exec->thisValue();
    JSWebKitCSSMatrix* castedThis = jsDynamicCast<JSWebKitCSSMatrix*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*exec, "WebKitCSSMatrix", "toString");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitCSSMatrix::info());
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.toString());
    return JSValue::encode(result);
}

bool JSWebKitCSSMatrixOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebKitCSSMatrixOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebKitCSSMatrix = jsCast<JSWebKitCSSMatrix*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebKitCSSMatrix->impl(), jsWebKitCSSMatrix);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, WebKitCSSMatrix* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSWebKitCSSMatrix>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WebKitCSSMatrix.
    COMPILE_ASSERT(!__is_polymorphic(WebKitCSSMatrix), WebKitCSSMatrix_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSWebKitCSSMatrix>(globalObject, impl);
}

WebKitCSSMatrix* JSWebKitCSSMatrix::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebKitCSSMatrix*>(value))
        return &wrapper->impl();
    return nullptr;
}

}
