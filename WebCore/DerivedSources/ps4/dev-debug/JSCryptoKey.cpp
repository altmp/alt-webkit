/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSCryptoKey.h"

#include "CryptoKey.h"
#include "JSDOMBinding.h"
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsCryptoKeyType(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCryptoKeyExtractable(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCryptoKeyAlgorithm(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCryptoKeyUsages(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSCryptoKeyPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSCryptoKeyPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSCryptoKeyPrototype* ptr = new (NotNull, JSC::allocateCell<JSCryptoKeyPrototype>(vm.heap)) JSCryptoKeyPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSCryptoKeyPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table */

static const struct CompactHashIndex JSCryptoKeyTableIndex[2] = {
    { 0, -1 },
    { -1, -1 },
};


static const HashTableValue JSCryptoKeyTableValues[] =
{
    { "algorithm", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCryptoKeyAlgorithm), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

static const HashTable JSCryptoKeyTable = { 1, 1, true, JSCryptoKeyTableValues, 0, JSCryptoKeyTableIndex };
/* Hash table for prototype */

static const HashTableValue JSCryptoKeyPrototypeTableValues[] =
{
    { "type", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCryptoKeyType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "extractable", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCryptoKeyExtractable), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "usages", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCryptoKeyUsages), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSCryptoKeyPrototype::s_info = { "KeyPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCryptoKeyPrototype) };

void JSCryptoKeyPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSCryptoKeyPrototypeTableValues, *this);
}

const ClassInfo JSCryptoKey::s_info = { "Key", &Base::s_info, &JSCryptoKeyTable, CREATE_METHOD_TABLE(JSCryptoKey) };

JSCryptoKey::JSCryptoKey(Structure* structure, JSDOMGlobalObject* globalObject, Ref<CryptoKey>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSCryptoKey::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSCryptoKeyPrototype::create(vm, globalObject, JSCryptoKeyPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSCryptoKey::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCryptoKey>(vm, globalObject);
}

void JSCryptoKey::destroy(JSC::JSCell* cell)
{
    JSCryptoKey* thisObject = static_cast<JSCryptoKey*>(cell);
    thisObject->JSCryptoKey::~JSCryptoKey();
}

JSCryptoKey::~JSCryptoKey()
{
    releaseImpl();
}

bool JSCryptoKey::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSCryptoKey*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSCryptoKey, Base>(exec, JSCryptoKeyTable, thisObject, propertyName, slot);
}

EncodedJSValue jsCryptoKeyType(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCryptoKey* castedThis = jsDynamicCast<JSCryptoKey*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCryptoKeyPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "CryptoKey", "type");
        return throwGetterTypeError(*exec, "CryptoKey", "type");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.type());
    return JSValue::encode(result);
}


EncodedJSValue jsCryptoKeyExtractable(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCryptoKey* castedThis = jsDynamicCast<JSCryptoKey*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCryptoKeyPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "CryptoKey", "extractable");
        return throwGetterTypeError(*exec, "CryptoKey", "extractable");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.extractable());
    return JSValue::encode(result);
}


EncodedJSValue jsCryptoKeyAlgorithm(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSCryptoKey*>(slotBase);
    return JSValue::encode(castedThis->algorithm(exec));
}


EncodedJSValue jsCryptoKeyUsages(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSCryptoKey* castedThis = jsDynamicCast<JSCryptoKey*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSCryptoKeyPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "CryptoKey", "usages");
        return throwGetterTypeError(*exec, "CryptoKey", "usages");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsArray(exec, castedThis->globalObject(), impl.usages());
    return JSValue::encode(result);
}


bool JSCryptoKeyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsCryptoKey = jsCast<JSCryptoKey*>(handle.slot()->asCell());
    CryptoKey* root = &jsCryptoKey->impl();
    return visitor.containsOpaqueRoot(root);
}

void JSCryptoKeyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsCryptoKey = jsCast<JSCryptoKey*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsCryptoKey->impl(), jsCryptoKey);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, CryptoKey* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSCryptoKey>(globalObject, impl))
        return result;
    return createNewWrapper<JSCryptoKey>(globalObject, impl);
}

CryptoKey* JSCryptoKey::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSCryptoKey*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(SUBTLE_CRYPTO)
