/* This file is automatically generated from CSSPropertyNames.in by makeprop, do not edit */

#include "config.h"
#include "StylePropertyShorthandFunctions.h"

#include "StylePropertyShorthand.h"
#include <wtf/NeverDestroyed.h>

namespace WebCore {

StylePropertyShorthand animationShorthand()
{
    static const CSSPropertyID animationProperties[] = {
        CSSPropertyAnimationName,
        CSSPropertyAnimationDuration,
        CSSPropertyAnimationTimingFunction,
        CSSPropertyAnimationDelay,
        CSSPropertyAnimationIterationCount,
        CSSPropertyAnimationDirection,
        CSSPropertyAnimationFillMode,
    };
    return StylePropertyShorthand(CSSPropertyAnimation, animationProperties);
}

StylePropertyShorthand backgroundShorthand()
{
    static const CSSPropertyID backgroundProperties[] = {
        CSSPropertyBackgroundImage,
        CSSPropertyBackgroundPositionX,
        CSSPropertyBackgroundPositionY,
        CSSPropertyBackgroundSize,
        CSSPropertyBackgroundRepeatX,
        CSSPropertyBackgroundRepeatY,
        CSSPropertyBackgroundAttachment,
        CSSPropertyBackgroundOrigin,
        CSSPropertyBackgroundClip,
        CSSPropertyBackgroundColor,
    };
    return StylePropertyShorthand(CSSPropertyBackground, backgroundProperties);
}

StylePropertyShorthand backgroundPositionShorthand()
{
    static const CSSPropertyID backgroundPositionProperties[] = {
        CSSPropertyBackgroundPositionX,
        CSSPropertyBackgroundPositionY,
    };
    return StylePropertyShorthand(CSSPropertyBackgroundPosition, backgroundPositionProperties);
}

StylePropertyShorthand backgroundRepeatShorthand()
{
    static const CSSPropertyID backgroundRepeatProperties[] = {
        CSSPropertyBackgroundRepeatX,
        CSSPropertyBackgroundRepeatY,
    };
    return StylePropertyShorthand(CSSPropertyBackgroundRepeat, backgroundRepeatProperties);
}

StylePropertyShorthand borderShorthand()
{
    static const CSSPropertyID borderProperties[] = {
        CSSPropertyBorderTopColor,
        CSSPropertyBorderTopStyle,
        CSSPropertyBorderTopWidth,
        CSSPropertyBorderRightColor,
        CSSPropertyBorderRightStyle,
        CSSPropertyBorderRightWidth,
        CSSPropertyBorderBottomColor,
        CSSPropertyBorderBottomStyle,
        CSSPropertyBorderBottomWidth,
        CSSPropertyBorderLeftColor,
        CSSPropertyBorderLeftStyle,
        CSSPropertyBorderLeftWidth,
    };
    return StylePropertyShorthand(CSSPropertyBorder, borderProperties);
}

StylePropertyShorthand borderBottomShorthand()
{
    static const CSSPropertyID borderBottomProperties[] = {
        CSSPropertyBorderBottomWidth,
        CSSPropertyBorderBottomStyle,
        CSSPropertyBorderBottomColor,
    };
    return StylePropertyShorthand(CSSPropertyBorderBottom, borderBottomProperties);
}

StylePropertyShorthand borderColorShorthand()
{
    static const CSSPropertyID borderColorProperties[] = {
        CSSPropertyBorderTopColor,
        CSSPropertyBorderRightColor,
        CSSPropertyBorderBottomColor,
        CSSPropertyBorderLeftColor,
    };
    return StylePropertyShorthand(CSSPropertyBorderColor, borderColorProperties);
}

StylePropertyShorthand borderImageShorthand()
{
    static const CSSPropertyID borderImageProperties[] = {
        CSSPropertyBorderImageSource,
        CSSPropertyBorderImageSlice,
        CSSPropertyBorderImageWidth,
        CSSPropertyBorderImageOutset,
        CSSPropertyBorderImageRepeat,
    };
    return StylePropertyShorthand(CSSPropertyBorderImage, borderImageProperties);
}

StylePropertyShorthand borderLeftShorthand()
{
    static const CSSPropertyID borderLeftProperties[] = {
        CSSPropertyBorderLeftWidth,
        CSSPropertyBorderLeftStyle,
        CSSPropertyBorderLeftColor,
    };
    return StylePropertyShorthand(CSSPropertyBorderLeft, borderLeftProperties);
}

StylePropertyShorthand borderRadiusShorthand()
{
    static const CSSPropertyID borderRadiusProperties[] = {
        CSSPropertyBorderTopLeftRadius,
        CSSPropertyBorderTopRightRadius,
        CSSPropertyBorderBottomRightRadius,
        CSSPropertyBorderBottomLeftRadius,
    };
    return StylePropertyShorthand(CSSPropertyBorderRadius, borderRadiusProperties);
}

StylePropertyShorthand borderRightShorthand()
{
    static const CSSPropertyID borderRightProperties[] = {
        CSSPropertyBorderRightWidth,
        CSSPropertyBorderRightStyle,
        CSSPropertyBorderRightColor,
    };
    return StylePropertyShorthand(CSSPropertyBorderRight, borderRightProperties);
}

StylePropertyShorthand borderSpacingShorthand()
{
    static const CSSPropertyID borderSpacingProperties[] = {
        CSSPropertyWebkitBorderHorizontalSpacing,
        CSSPropertyWebkitBorderVerticalSpacing,
    };
    return StylePropertyShorthand(CSSPropertyBorderSpacing, borderSpacingProperties);
}

StylePropertyShorthand borderStyleShorthand()
{
    static const CSSPropertyID borderStyleProperties[] = {
        CSSPropertyBorderTopStyle,
        CSSPropertyBorderRightStyle,
        CSSPropertyBorderBottomStyle,
        CSSPropertyBorderLeftStyle,
    };
    return StylePropertyShorthand(CSSPropertyBorderStyle, borderStyleProperties);
}

StylePropertyShorthand borderTopShorthand()
{
    static const CSSPropertyID borderTopProperties[] = {
        CSSPropertyBorderTopWidth,
        CSSPropertyBorderTopStyle,
        CSSPropertyBorderTopColor,
    };
    return StylePropertyShorthand(CSSPropertyBorderTop, borderTopProperties);
}

StylePropertyShorthand borderWidthShorthand()
{
    static const CSSPropertyID borderWidthProperties[] = {
        CSSPropertyBorderTopWidth,
        CSSPropertyBorderRightWidth,
        CSSPropertyBorderBottomWidth,
        CSSPropertyBorderLeftWidth,
    };
    return StylePropertyShorthand(CSSPropertyBorderWidth, borderWidthProperties);
}

StylePropertyShorthand fontShorthand()
{
    static const CSSPropertyID fontProperties[] = {
        CSSPropertyFontFamily,
        CSSPropertyFontSize,
        CSSPropertyFontStyle,
        CSSPropertyFontVariant,
        CSSPropertyFontWeight,
        CSSPropertyLineHeight,
    };
    return StylePropertyShorthand(CSSPropertyFont, fontProperties);
}

StylePropertyShorthand listStyleShorthand()
{
    static const CSSPropertyID listStyleProperties[] = {
        CSSPropertyListStyleType,
        CSSPropertyListStylePosition,
        CSSPropertyListStyleImage,
    };
    return StylePropertyShorthand(CSSPropertyListStyle, listStyleProperties);
}

StylePropertyShorthand marginShorthand()
{
    static const CSSPropertyID marginProperties[] = {
        CSSPropertyMarginTop,
        CSSPropertyMarginRight,
        CSSPropertyMarginBottom,
        CSSPropertyMarginLeft,
    };
    return StylePropertyShorthand(CSSPropertyMargin, marginProperties);
}

StylePropertyShorthand markerShorthand()
{
    static const CSSPropertyID markerProperties[] = {
        CSSPropertyMarkerStart,
        CSSPropertyMarkerMid,
        CSSPropertyMarkerEnd,
    };
    return StylePropertyShorthand(CSSPropertyMarker, markerProperties);
}

StylePropertyShorthand outlineShorthand()
{
    static const CSSPropertyID outlineProperties[] = {
        CSSPropertyOutlineColor,
        CSSPropertyOutlineStyle,
        CSSPropertyOutlineWidth,
    };
    return StylePropertyShorthand(CSSPropertyOutline, outlineProperties);
}

StylePropertyShorthand overflowShorthand()
{
    static const CSSPropertyID overflowProperties[] = {
        CSSPropertyOverflowX,
        CSSPropertyOverflowY,
    };
    return StylePropertyShorthand(CSSPropertyOverflow, overflowProperties);
}

StylePropertyShorthand paddingShorthand()
{
    static const CSSPropertyID paddingProperties[] = {
        CSSPropertyPaddingTop,
        CSSPropertyPaddingRight,
        CSSPropertyPaddingBottom,
        CSSPropertyPaddingLeft,
    };
    return StylePropertyShorthand(CSSPropertyPadding, paddingProperties);
}

StylePropertyShorthand transitionShorthand()
{
    static const CSSPropertyID transitionProperties[] = {
        CSSPropertyTransitionProperty,
        CSSPropertyTransitionDuration,
        CSSPropertyTransitionTimingFunction,
        CSSPropertyTransitionDelay,
    };
    return StylePropertyShorthand(CSSPropertyTransition, transitionProperties);
}

StylePropertyShorthand webkitAnimationShorthand()
{
    static const CSSPropertyID webkitAnimationProperties[] = {
        CSSPropertyWebkitAnimationName,
        CSSPropertyWebkitAnimationDuration,
        CSSPropertyWebkitAnimationTimingFunction,
        CSSPropertyWebkitAnimationDelay,
        CSSPropertyWebkitAnimationIterationCount,
        CSSPropertyWebkitAnimationDirection,
        CSSPropertyWebkitAnimationFillMode,
    };
    return StylePropertyShorthand(CSSPropertyWebkitAnimation, webkitAnimationProperties);
}

StylePropertyShorthand webkitBorderAfterShorthand()
{
    static const CSSPropertyID webkitBorderAfterProperties[] = {
        CSSPropertyWebkitBorderAfterWidth,
        CSSPropertyWebkitBorderAfterStyle,
        CSSPropertyWebkitBorderAfterColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitBorderAfter, webkitBorderAfterProperties);
}

StylePropertyShorthand webkitBorderBeforeShorthand()
{
    static const CSSPropertyID webkitBorderBeforeProperties[] = {
        CSSPropertyWebkitBorderBeforeWidth,
        CSSPropertyWebkitBorderBeforeStyle,
        CSSPropertyWebkitBorderBeforeColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitBorderBefore, webkitBorderBeforeProperties);
}

StylePropertyShorthand webkitBorderEndShorthand()
{
    static const CSSPropertyID webkitBorderEndProperties[] = {
        CSSPropertyWebkitBorderEndWidth,
        CSSPropertyWebkitBorderEndStyle,
        CSSPropertyWebkitBorderEndColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitBorderEnd, webkitBorderEndProperties);
}

StylePropertyShorthand webkitBorderRadiusShorthand()
{
    static const CSSPropertyID webkitBorderRadiusProperties[] = {
        CSSPropertyBorderTopLeftRadius,
        CSSPropertyBorderTopRightRadius,
        CSSPropertyBorderBottomRightRadius,
        CSSPropertyBorderBottomLeftRadius,
    };
    return StylePropertyShorthand(CSSPropertyWebkitBorderRadius, webkitBorderRadiusProperties);
}

StylePropertyShorthand webkitBorderStartShorthand()
{
    static const CSSPropertyID webkitBorderStartProperties[] = {
        CSSPropertyWebkitBorderStartWidth,
        CSSPropertyWebkitBorderStartStyle,
        CSSPropertyWebkitBorderStartColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitBorderStart, webkitBorderStartProperties);
}

StylePropertyShorthand columnRuleShorthand()
{
    static const CSSPropertyID columnRuleProperties[] = {
        CSSPropertyColumnRuleWidth,
        CSSPropertyColumnRuleStyle,
        CSSPropertyColumnRuleColor,
    };
    return StylePropertyShorthand(CSSPropertyColumnRule, columnRuleProperties);
}

StylePropertyShorthand columnsShorthand()
{
    static const CSSPropertyID columnsProperties[] = {
        CSSPropertyColumnWidth,
        CSSPropertyColumnCount,
    };
    return StylePropertyShorthand(CSSPropertyColumns, columnsProperties);
}

StylePropertyShorthand flexShorthand()
{
    static const CSSPropertyID flexProperties[] = {
        CSSPropertyFlexGrow,
        CSSPropertyFlexShrink,
        CSSPropertyFlexBasis,
    };
    return StylePropertyShorthand(CSSPropertyFlex, flexProperties);
}

StylePropertyShorthand flexFlowShorthand()
{
    static const CSSPropertyID flexFlowProperties[] = {
        CSSPropertyFlexDirection,
        CSSPropertyFlexWrap,
    };
    return StylePropertyShorthand(CSSPropertyFlexFlow, flexFlowProperties);
}

StylePropertyShorthand webkitGridShorthand()
{
    static const CSSPropertyID webkitGridProperties[] = {
        CSSPropertyWebkitGridTemplateColumns,
        CSSPropertyWebkitGridTemplateRows,
        CSSPropertyWebkitGridTemplateAreas,
        CSSPropertyWebkitGridAutoFlow,
        CSSPropertyWebkitGridAutoColumns,
        CSSPropertyWebkitGridAutoRows,
    };
    return StylePropertyShorthand(CSSPropertyWebkitGrid, webkitGridProperties);
}

StylePropertyShorthand webkitGridAreaShorthand()
{
    static const CSSPropertyID webkitGridAreaProperties[] = {
        CSSPropertyWebkitGridRowStart,
        CSSPropertyWebkitGridColumnStart,
        CSSPropertyWebkitGridRowEnd,
        CSSPropertyWebkitGridRowStart,
    };
    return StylePropertyShorthand(CSSPropertyWebkitGridArea, webkitGridAreaProperties);
}

StylePropertyShorthand webkitGridTemplateShorthand()
{
    static const CSSPropertyID webkitGridTemplateProperties[] = {
        CSSPropertyWebkitGridTemplateColumns,
        CSSPropertyWebkitGridTemplateRows,
        CSSPropertyWebkitGridTemplateAreas,
    };
    return StylePropertyShorthand(CSSPropertyWebkitGridTemplate, webkitGridTemplateProperties);
}

StylePropertyShorthand webkitGridColumnShorthand()
{
    static const CSSPropertyID webkitGridColumnProperties[] = {
        CSSPropertyWebkitGridColumnStart,
        CSSPropertyWebkitGridColumnEnd,
    };
    return StylePropertyShorthand(CSSPropertyWebkitGridColumn, webkitGridColumnProperties);
}

StylePropertyShorthand webkitGridRowShorthand()
{
    static const CSSPropertyID webkitGridRowProperties[] = {
        CSSPropertyWebkitGridRowStart,
        CSSPropertyWebkitGridRowEnd,
    };
    return StylePropertyShorthand(CSSPropertyWebkitGridRow, webkitGridRowProperties);
}

StylePropertyShorthand webkitMarginCollapseShorthand()
{
    static const CSSPropertyID webkitMarginCollapseProperties[] = {
        CSSPropertyWebkitMarginBeforeCollapse,
        CSSPropertyWebkitMarginAfterCollapse,
    };
    return StylePropertyShorthand(CSSPropertyWebkitMarginCollapse, webkitMarginCollapseProperties);
}

StylePropertyShorthand webkitMarqueeShorthand()
{
    static const CSSPropertyID webkitMarqueeProperties[] = {
        CSSPropertyWebkitMarqueeDirection,
        CSSPropertyWebkitMarqueeIncrement,
        CSSPropertyWebkitMarqueeRepetition,
        CSSPropertyWebkitMarqueeStyle,
        CSSPropertyWebkitMarqueeSpeed,
    };
    return StylePropertyShorthand(CSSPropertyWebkitMarquee, webkitMarqueeProperties);
}

StylePropertyShorthand webkitMaskShorthand()
{
    static const CSSPropertyID webkitMaskProperties[] = {
        CSSPropertyWebkitMaskImage,
        CSSPropertyWebkitMaskSourceType,
        CSSPropertyWebkitMaskPositionX,
        CSSPropertyWebkitMaskPositionY,
        CSSPropertyWebkitMaskSize,
        CSSPropertyWebkitMaskRepeatX,
        CSSPropertyWebkitMaskRepeatY,
        CSSPropertyWebkitMaskOrigin,
        CSSPropertyWebkitMaskClip,
    };
    return StylePropertyShorthand(CSSPropertyWebkitMask, webkitMaskProperties);
}

StylePropertyShorthand webkitMaskPositionShorthand()
{
    static const CSSPropertyID webkitMaskPositionProperties[] = {
        CSSPropertyWebkitMaskPositionX,
        CSSPropertyWebkitMaskPositionY,
    };
    return StylePropertyShorthand(CSSPropertyWebkitMaskPosition, webkitMaskPositionProperties);
}

StylePropertyShorthand webkitMaskRepeatShorthand()
{
    static const CSSPropertyID webkitMaskRepeatProperties[] = {
        CSSPropertyWebkitMaskRepeatX,
        CSSPropertyWebkitMaskRepeatY,
    };
    return StylePropertyShorthand(CSSPropertyWebkitMaskRepeat, webkitMaskRepeatProperties);
}

StylePropertyShorthand perspectiveOriginShorthand()
{
    static const CSSPropertyID perspectiveOriginProperties[] = {
        CSSPropertyPerspectiveOriginX,
        CSSPropertyPerspectiveOriginY,
    };
    return StylePropertyShorthand(CSSPropertyPerspectiveOrigin, perspectiveOriginProperties);
}

StylePropertyShorthand webkitTextDecorationShorthand()
{
    static const CSSPropertyID webkitTextDecorationProperties[] = {
        CSSPropertyWebkitTextDecorationLine,
        CSSPropertyWebkitTextDecorationStyle,
        CSSPropertyWebkitTextDecorationColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitTextDecoration, webkitTextDecorationProperties);
}

StylePropertyShorthand webkitTextEmphasisShorthand()
{
    static const CSSPropertyID webkitTextEmphasisProperties[] = {
        CSSPropertyWebkitTextEmphasisStyle,
        CSSPropertyWebkitTextEmphasisColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitTextEmphasis, webkitTextEmphasisProperties);
}

StylePropertyShorthand webkitTextStrokeShorthand()
{
    static const CSSPropertyID webkitTextStrokeProperties[] = {
        CSSPropertyWebkitTextStrokeWidth,
        CSSPropertyWebkitTextStrokeColor,
    };
    return StylePropertyShorthand(CSSPropertyWebkitTextStroke, webkitTextStrokeProperties);
}

StylePropertyShorthand transformOriginShorthand()
{
    static const CSSPropertyID transformOriginProperties[] = {
        CSSPropertyTransformOriginX,
        CSSPropertyTransformOriginY,
        CSSPropertyTransformOriginZ,
    };
    return StylePropertyShorthand(CSSPropertyTransformOrigin, transformOriginProperties);
}

StylePropertyShorthand webkitTransitionShorthand()
{
    static const CSSPropertyID webkitTransitionProperties[] = {
        CSSPropertyWebkitTransitionProperty,
        CSSPropertyWebkitTransitionDuration,
        CSSPropertyWebkitTransitionTimingFunction,
        CSSPropertyWebkitTransitionDelay,
    };
    return StylePropertyShorthand(CSSPropertyWebkitTransition, webkitTransitionProperties);
}

StylePropertyShorthand shorthandForProperty(CSSPropertyID propertyID)
{
    static NeverDestroyed<StylePropertyShorthand> emptyShorthand;

    switch (propertyID) {
    case CSSPropertyAnimation:
        return animationShorthand();
    case CSSPropertyBackground:
        return backgroundShorthand();
    case CSSPropertyBackgroundPosition:
        return backgroundPositionShorthand();
    case CSSPropertyBackgroundRepeat:
        return backgroundRepeatShorthand();
    case CSSPropertyBorder:
        return borderShorthand();
    case CSSPropertyBorderBottom:
        return borderBottomShorthand();
    case CSSPropertyBorderColor:
        return borderColorShorthand();
    case CSSPropertyBorderImage:
        return borderImageShorthand();
    case CSSPropertyBorderLeft:
        return borderLeftShorthand();
    case CSSPropertyBorderRadius:
        return borderRadiusShorthand();
    case CSSPropertyBorderRight:
        return borderRightShorthand();
    case CSSPropertyBorderSpacing:
        return borderSpacingShorthand();
    case CSSPropertyBorderStyle:
        return borderStyleShorthand();
    case CSSPropertyBorderTop:
        return borderTopShorthand();
    case CSSPropertyBorderWidth:
        return borderWidthShorthand();
    case CSSPropertyFont:
        return fontShorthand();
    case CSSPropertyListStyle:
        return listStyleShorthand();
    case CSSPropertyMargin:
        return marginShorthand();
    case CSSPropertyMarker:
        return markerShorthand();
    case CSSPropertyOutline:
        return outlineShorthand();
    case CSSPropertyOverflow:
        return overflowShorthand();
    case CSSPropertyPadding:
        return paddingShorthand();
    case CSSPropertyTransition:
        return transitionShorthand();
    case CSSPropertyWebkitAnimation:
        return webkitAnimationShorthand();
    case CSSPropertyWebkitBorderAfter:
        return webkitBorderAfterShorthand();
    case CSSPropertyWebkitBorderBefore:
        return webkitBorderBeforeShorthand();
    case CSSPropertyWebkitBorderEnd:
        return webkitBorderEndShorthand();
    case CSSPropertyWebkitBorderRadius:
        return webkitBorderRadiusShorthand();
    case CSSPropertyWebkitBorderStart:
        return webkitBorderStartShorthand();
    case CSSPropertyColumnRule:
        return columnRuleShorthand();
    case CSSPropertyColumns:
        return columnsShorthand();
    case CSSPropertyFlex:
        return flexShorthand();
    case CSSPropertyFlexFlow:
        return flexFlowShorthand();
    case CSSPropertyWebkitGrid:
        return webkitGridShorthand();
    case CSSPropertyWebkitGridArea:
        return webkitGridAreaShorthand();
    case CSSPropertyWebkitGridTemplate:
        return webkitGridTemplateShorthand();
    case CSSPropertyWebkitGridColumn:
        return webkitGridColumnShorthand();
    case CSSPropertyWebkitGridRow:
        return webkitGridRowShorthand();
    case CSSPropertyWebkitMarginCollapse:
        return webkitMarginCollapseShorthand();
    case CSSPropertyWebkitMarquee:
        return webkitMarqueeShorthand();
    case CSSPropertyWebkitMask:
        return webkitMaskShorthand();
    case CSSPropertyWebkitMaskPosition:
        return webkitMaskPositionShorthand();
    case CSSPropertyWebkitMaskRepeat:
        return webkitMaskRepeatShorthand();
    case CSSPropertyPerspectiveOrigin:
        return perspectiveOriginShorthand();
    case CSSPropertyWebkitTextDecoration:
        return webkitTextDecorationShorthand();
    case CSSPropertyWebkitTextEmphasis:
        return webkitTextEmphasisShorthand();
    case CSSPropertyWebkitTextStroke:
        return webkitTextStrokeShorthand();
    case CSSPropertyTransformOrigin:
        return transformOriginShorthand();
    case CSSPropertyWebkitTransition:
        return webkitTransitionShorthand();
    default:
        return emptyShorthand;
    }
}
Vector<StylePropertyShorthand> matchingShorthandsForLonghand(CSSPropertyID propertyID)
{
    switch (propertyID) {
    case CSSPropertyAnimationDelay:
    case CSSPropertyAnimationDirection:
    case CSSPropertyAnimationDuration:
    case CSSPropertyAnimationFillMode:
    case CSSPropertyAnimationIterationCount:
    case CSSPropertyAnimationName:
    case CSSPropertyAnimationTimingFunction:
        return Vector<StylePropertyShorthand>{animationShorthand()};
    case CSSPropertyBackgroundPositionX:
    case CSSPropertyBackgroundPositionY:
        return Vector<StylePropertyShorthand>{backgroundShorthand(), backgroundPositionShorthand()};
    case CSSPropertyBackgroundRepeatX:
    case CSSPropertyBackgroundRepeatY:
        return Vector<StylePropertyShorthand>{backgroundShorthand(), backgroundRepeatShorthand()};
    case CSSPropertyBackgroundAttachment:
    case CSSPropertyBackgroundClip:
    case CSSPropertyBackgroundColor:
    case CSSPropertyBackgroundImage:
    case CSSPropertyBackgroundOrigin:
    case CSSPropertyBackgroundSize:
        return Vector<StylePropertyShorthand>{backgroundShorthand()};
    case CSSPropertyBorderImageOutset:
    case CSSPropertyBorderImageRepeat:
    case CSSPropertyBorderImageSlice:
    case CSSPropertyBorderImageSource:
    case CSSPropertyBorderImageWidth:
        return Vector<StylePropertyShorthand>{borderImageShorthand()};
    case CSSPropertyBorderBottomColor:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderBottomShorthand(), borderColorShorthand()};
    case CSSPropertyBorderBottomStyle:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderBottomShorthand(), borderStyleShorthand()};
    case CSSPropertyBorderBottomWidth:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderBottomShorthand(), borderWidthShorthand()};
    case CSSPropertyBorderLeftColor:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderColorShorthand(), borderLeftShorthand()};
    case CSSPropertyBorderRightColor:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderColorShorthand(), borderRightShorthand()};
    case CSSPropertyBorderTopColor:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderColorShorthand(), borderTopShorthand()};
    case CSSPropertyBorderLeftStyle:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderLeftShorthand(), borderStyleShorthand()};
    case CSSPropertyBorderLeftWidth:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderLeftShorthand(), borderWidthShorthand()};
    case CSSPropertyBorderRightStyle:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderRightShorthand(), borderStyleShorthand()};
    case CSSPropertyBorderRightWidth:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderRightShorthand(), borderWidthShorthand()};
    case CSSPropertyBorderTopStyle:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderStyleShorthand(), borderTopShorthand()};
    case CSSPropertyBorderTopWidth:
        return Vector<StylePropertyShorthand>{borderShorthand(), borderTopShorthand(), borderWidthShorthand()};
    case CSSPropertyWebkitBorderHorizontalSpacing:
    case CSSPropertyWebkitBorderVerticalSpacing:
        return Vector<StylePropertyShorthand>{borderSpacingShorthand()};
    case CSSPropertyColumnRuleColor:
    case CSSPropertyColumnRuleStyle:
    case CSSPropertyColumnRuleWidth:
        return Vector<StylePropertyShorthand>{columnRuleShorthand()};
    case CSSPropertyColumnCount:
    case CSSPropertyColumnWidth:
        return Vector<StylePropertyShorthand>{columnsShorthand()};
    case CSSPropertyFlexDirection:
    case CSSPropertyFlexWrap:
        return Vector<StylePropertyShorthand>{flexFlowShorthand()};
    case CSSPropertyFlexBasis:
    case CSSPropertyFlexGrow:
    case CSSPropertyFlexShrink:
        return Vector<StylePropertyShorthand>{flexShorthand()};
    case CSSPropertyFontFamily:
    case CSSPropertyFontSize:
    case CSSPropertyFontStyle:
    case CSSPropertyFontVariant:
    case CSSPropertyFontWeight:
    case CSSPropertyLineHeight:
        return Vector<StylePropertyShorthand>{fontShorthand()};
    case CSSPropertyListStyleImage:
    case CSSPropertyListStylePosition:
    case CSSPropertyListStyleType:
        return Vector<StylePropertyShorthand>{listStyleShorthand()};
    case CSSPropertyMarginBottom:
    case CSSPropertyMarginLeft:
    case CSSPropertyMarginRight:
    case CSSPropertyMarginTop:
        return Vector<StylePropertyShorthand>{marginShorthand()};
    case CSSPropertyMarkerEnd:
    case CSSPropertyMarkerMid:
    case CSSPropertyMarkerStart:
        return Vector<StylePropertyShorthand>{markerShorthand()};
    case CSSPropertyOutlineColor:
    case CSSPropertyOutlineStyle:
    case CSSPropertyOutlineWidth:
        return Vector<StylePropertyShorthand>{outlineShorthand()};
    case CSSPropertyOverflowX:
    case CSSPropertyOverflowY:
        return Vector<StylePropertyShorthand>{overflowShorthand()};
    case CSSPropertyPaddingBottom:
    case CSSPropertyPaddingLeft:
    case CSSPropertyPaddingRight:
    case CSSPropertyPaddingTop:
        return Vector<StylePropertyShorthand>{paddingShorthand()};
    case CSSPropertyPerspectiveOriginX:
    case CSSPropertyPerspectiveOriginY:
        return Vector<StylePropertyShorthand>{perspectiveOriginShorthand()};
    case CSSPropertyTransformOriginX:
    case CSSPropertyTransformOriginY:
    case CSSPropertyTransformOriginZ:
        return Vector<StylePropertyShorthand>{transformOriginShorthand()};
    case CSSPropertyTransitionDelay:
    case CSSPropertyTransitionDuration:
    case CSSPropertyTransitionProperty:
    case CSSPropertyTransitionTimingFunction:
        return Vector<StylePropertyShorthand>{transitionShorthand()};
    case CSSPropertyWebkitAnimationDelay:
    case CSSPropertyWebkitAnimationDirection:
    case CSSPropertyWebkitAnimationDuration:
    case CSSPropertyWebkitAnimationFillMode:
    case CSSPropertyWebkitAnimationIterationCount:
    case CSSPropertyWebkitAnimationName:
    case CSSPropertyWebkitAnimationTimingFunction:
        return Vector<StylePropertyShorthand>{webkitAnimationShorthand()};
    case CSSPropertyWebkitBorderAfterColor:
    case CSSPropertyWebkitBorderAfterStyle:
    case CSSPropertyWebkitBorderAfterWidth:
        return Vector<StylePropertyShorthand>{webkitBorderAfterShorthand()};
    case CSSPropertyWebkitBorderBeforeColor:
    case CSSPropertyWebkitBorderBeforeStyle:
    case CSSPropertyWebkitBorderBeforeWidth:
        return Vector<StylePropertyShorthand>{webkitBorderBeforeShorthand()};
    case CSSPropertyWebkitBorderEndColor:
    case CSSPropertyWebkitBorderEndStyle:
    case CSSPropertyWebkitBorderEndWidth:
        return Vector<StylePropertyShorthand>{webkitBorderEndShorthand()};
    case CSSPropertyBorderBottomLeftRadius:
    case CSSPropertyBorderBottomRightRadius:
    case CSSPropertyBorderTopLeftRadius:
    case CSSPropertyBorderTopRightRadius:
        return Vector<StylePropertyShorthand>{webkitBorderRadiusShorthand(), borderRadiusShorthand()};
    case CSSPropertyWebkitBorderStartColor:
    case CSSPropertyWebkitBorderStartStyle:
    case CSSPropertyWebkitBorderStartWidth:
        return Vector<StylePropertyShorthand>{webkitBorderStartShorthand()};
    case CSSPropertyWebkitGridRowStart:
        return Vector<StylePropertyShorthand>{webkitGridAreaShorthand(), webkitGridAreaShorthand(), webkitGridRowShorthand()};
    case CSSPropertyWebkitGridColumnStart:
        return Vector<StylePropertyShorthand>{webkitGridAreaShorthand(), webkitGridColumnShorthand()};
    case CSSPropertyWebkitGridRowEnd:
        return Vector<StylePropertyShorthand>{webkitGridAreaShorthand(), webkitGridRowShorthand()};
    case CSSPropertyWebkitGridColumnEnd:
        return Vector<StylePropertyShorthand>{webkitGridColumnShorthand()};
    case CSSPropertyWebkitGridTemplateAreas:
    case CSSPropertyWebkitGridTemplateColumns:
    case CSSPropertyWebkitGridTemplateRows:
        return Vector<StylePropertyShorthand>{webkitGridShorthand(), webkitGridTemplateShorthand()};
    case CSSPropertyWebkitGridAutoColumns:
    case CSSPropertyWebkitGridAutoFlow:
    case CSSPropertyWebkitGridAutoRows:
        return Vector<StylePropertyShorthand>{webkitGridShorthand()};
    case CSSPropertyWebkitMarginAfterCollapse:
    case CSSPropertyWebkitMarginBeforeCollapse:
        return Vector<StylePropertyShorthand>{webkitMarginCollapseShorthand()};
    case CSSPropertyWebkitMarqueeDirection:
    case CSSPropertyWebkitMarqueeIncrement:
    case CSSPropertyWebkitMarqueeRepetition:
    case CSSPropertyWebkitMarqueeSpeed:
    case CSSPropertyWebkitMarqueeStyle:
        return Vector<StylePropertyShorthand>{webkitMarqueeShorthand()};
    case CSSPropertyWebkitMaskPositionX:
    case CSSPropertyWebkitMaskPositionY:
        return Vector<StylePropertyShorthand>{webkitMaskShorthand(), webkitMaskPositionShorthand()};
    case CSSPropertyWebkitMaskRepeatX:
    case CSSPropertyWebkitMaskRepeatY:
        return Vector<StylePropertyShorthand>{webkitMaskShorthand(), webkitMaskRepeatShorthand()};
    case CSSPropertyWebkitMaskClip:
    case CSSPropertyWebkitMaskImage:
    case CSSPropertyWebkitMaskOrigin:
    case CSSPropertyWebkitMaskSize:
    case CSSPropertyWebkitMaskSourceType:
        return Vector<StylePropertyShorthand>{webkitMaskShorthand()};
    case CSSPropertyWebkitTextDecorationColor:
    case CSSPropertyWebkitTextDecorationLine:
    case CSSPropertyWebkitTextDecorationStyle:
        return Vector<StylePropertyShorthand>{webkitTextDecorationShorthand()};
    case CSSPropertyWebkitTextEmphasisColor:
    case CSSPropertyWebkitTextEmphasisStyle:
        return Vector<StylePropertyShorthand>{webkitTextEmphasisShorthand()};
    case CSSPropertyWebkitTextStrokeColor:
    case CSSPropertyWebkitTextStrokeWidth:
        return Vector<StylePropertyShorthand>{webkitTextStrokeShorthand()};
    case CSSPropertyWebkitTransitionDelay:
    case CSSPropertyWebkitTransitionDuration:
    case CSSPropertyWebkitTransitionProperty:
    case CSSPropertyWebkitTransitionTimingFunction:
        return Vector<StylePropertyShorthand>{webkitTransitionShorthand()};
    default:
        return { };
    }
}
} // namespace WebCore
