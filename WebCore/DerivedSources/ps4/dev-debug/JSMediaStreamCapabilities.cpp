/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamCapabilities.h"

#include "JSDOMBinding.h"
#include "MediaStreamCapabilities.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

class JSMediaStreamCapabilitiesPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaStreamCapabilitiesPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaStreamCapabilitiesPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaStreamCapabilitiesPrototype>(vm.heap)) JSMediaStreamCapabilitiesPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaStreamCapabilitiesPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMediaStreamCapabilitiesPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

const ClassInfo JSMediaStreamCapabilitiesPrototype::s_info = { "MediaStreamCapabilitiesPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaStreamCapabilitiesPrototype) };

void JSMediaStreamCapabilitiesPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaStreamCapabilitiesPrototypeTableValues, *this);
}

const ClassInfo JSMediaStreamCapabilities::s_info = { "MediaStreamCapabilities", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaStreamCapabilities) };

JSMediaStreamCapabilities::JSMediaStreamCapabilities(Structure* structure, JSDOMGlobalObject* globalObject, Ref<MediaStreamCapabilities>&& impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(&impl.leakRef())
{
}

JSObject* JSMediaStreamCapabilities::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaStreamCapabilitiesPrototype::create(vm, globalObject, JSMediaStreamCapabilitiesPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaStreamCapabilities::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamCapabilities>(vm, globalObject);
}

void JSMediaStreamCapabilities::destroy(JSC::JSCell* cell)
{
    JSMediaStreamCapabilities* thisObject = static_cast<JSMediaStreamCapabilities*>(cell);
    thisObject->JSMediaStreamCapabilities::~JSMediaStreamCapabilities();
}

JSMediaStreamCapabilities::~JSMediaStreamCapabilities()
{
    releaseImpl();
}

bool JSMediaStreamCapabilitiesOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaStreamCapabilitiesOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaStreamCapabilities = jsCast<JSMediaStreamCapabilities*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaStreamCapabilities->impl(), jsMediaStreamCapabilities);
}

MediaStreamCapabilities* JSMediaStreamCapabilities::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaStreamCapabilities*>(value))
        return &wrapper->impl();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
