/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(CSP_NEXT)

#include "JSSecurityPolicyViolationEvent.h"

#include "JSDOMBinding.h"
#include "JSDictionary.h"
#include "SecurityPolicyViolationEvent.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSecurityPolicyViolationEventDocumentURI(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventReferrer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventBlockedURI(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventViolatedDirective(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventEffectiveDirective(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventOriginalPolicy(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventSourceFile(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventLineNumber(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSecurityPolicyViolationEventConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSSecurityPolicyViolationEventPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSSecurityPolicyViolationEventPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSecurityPolicyViolationEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSSecurityPolicyViolationEventPrototype>(vm.heap)) JSSecurityPolicyViolationEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSecurityPolicyViolationEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

class JSSecurityPolicyViolationEventConstructor : public DOMConstructorObject {
private:
    JSSecurityPolicyViolationEventConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::VM&, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSSecurityPolicyViolationEventConstructor* create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSSecurityPolicyViolationEventConstructor* ptr = new (NotNull, JSC::allocateCell<JSSecurityPolicyViolationEventConstructor>(vm.heap)) JSSecurityPolicyViolationEventConstructor(structure, globalObject);
        ptr->finishCreation(vm, globalObject);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }
protected:
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSSecurityPolicyViolationEvent(JSC::ExecState*);
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
};

EncodedJSValue JSC_HOST_CALL JSSecurityPolicyViolationEventConstructor::constructJSSecurityPolicyViolationEvent(ExecState* exec)
{
    auto* jsConstructor = jsCast<JSSecurityPolicyViolationEventConstructor*>(exec->callee());

    ScriptExecutionContext* executionContext = jsConstructor->scriptExecutionContext();
    if (!executionContext)
        return throwVMError(exec, createReferenceError(exec, "Constructor associated execution context is unavailable"));

    AtomicString eventType = exec->argument(0).toString(exec)->toAtomicString(exec);
    if (UNLIKELY(exec->hadException()))
        return JSValue::encode(jsUndefined());

    SecurityPolicyViolationEventInit eventInit;

    JSValue initializerValue = exec->argument(1);
    if (!initializerValue.isUndefinedOrNull()) {
        // Given the above test, this will always yield an object.
        JSObject* initializerObject = initializerValue.toObject(exec);

        // Create the dictionary wrapper from the initializer object.
        JSDictionary dictionary(exec, initializerObject);

        // Attempt to fill in the EventInit.
        if (!fillSecurityPolicyViolationEventInit(eventInit, dictionary))
            return JSValue::encode(jsUndefined());
    }

    RefPtr<SecurityPolicyViolationEvent> event = SecurityPolicyViolationEvent::create(eventType, eventInit);
    return JSValue::encode(toJS(exec, jsConstructor->globalObject(), event.get()));
}

bool fillSecurityPolicyViolationEventInit(SecurityPolicyViolationEventInit& eventInit, JSDictionary& dictionary)
{
    if (!fillEventInit(eventInit, dictionary))
        return false;

    if (!dictionary.tryGetProperty("documentURI", eventInit.documentURI))
        return false;
    if (!dictionary.tryGetProperty("referrer", eventInit.referrer))
        return false;
    if (!dictionary.tryGetProperty("blockedURI", eventInit.blockedURI))
        return false;
    if (!dictionary.tryGetProperty("violatedDirective", eventInit.violatedDirective))
        return false;
    if (!dictionary.tryGetProperty("effectiveDirective", eventInit.effectiveDirective))
        return false;
    if (!dictionary.tryGetProperty("originalPolicy", eventInit.originalPolicy))
        return false;
    if (!dictionary.tryGetProperty("sourceFile", eventInit.sourceFile))
        return false;
    if (!dictionary.tryGetProperty("lineNumber", eventInit.lineNumber))
        return false;
    return true;
}

const ClassInfo JSSecurityPolicyViolationEventConstructor::s_info = { "SecurityPolicyViolationEventConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSecurityPolicyViolationEventConstructor) };

JSSecurityPolicyViolationEventConstructor::JSSecurityPolicyViolationEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSecurityPolicyViolationEventConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSecurityPolicyViolationEvent::getPrototype(vm, globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SecurityPolicyViolationEvent"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

ConstructType JSSecurityPolicyViolationEventConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSSecurityPolicyViolationEvent;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSSecurityPolicyViolationEventPrototypeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "documentURI", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventDocumentURI), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "referrer", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventReferrer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "blockedURI", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventBlockedURI), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "violatedDirective", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventViolatedDirective), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "effectiveDirective", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventEffectiveDirective), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "originalPolicy", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventOriginalPolicy), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "sourceFile", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventSourceFile), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
    { "lineNumber", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSecurityPolicyViolationEventLineNumber), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) },
};

const ClassInfo JSSecurityPolicyViolationEventPrototype::s_info = { "SecurityPolicyViolationEventPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSecurityPolicyViolationEventPrototype) };

void JSSecurityPolicyViolationEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSecurityPolicyViolationEventPrototypeTableValues, *this);
}

const ClassInfo JSSecurityPolicyViolationEvent::s_info = { "SecurityPolicyViolationEvent", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSecurityPolicyViolationEvent) };

JSSecurityPolicyViolationEvent::JSSecurityPolicyViolationEvent(Structure* structure, JSDOMGlobalObject* globalObject, Ref<SecurityPolicyViolationEvent>&& impl)
    : JSEvent(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSSecurityPolicyViolationEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSecurityPolicyViolationEventPrototype::create(vm, globalObject, JSSecurityPolicyViolationEventPrototype::createStructure(vm, globalObject, JSEvent::getPrototype(vm, globalObject)));
}

JSObject* JSSecurityPolicyViolationEvent::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSecurityPolicyViolationEvent>(vm, globalObject);
}

EncodedJSValue jsSecurityPolicyViolationEventDocumentURI(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "documentURI");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "documentURI");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.documentURI());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventReferrer(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "referrer");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "referrer");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.referrer());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventBlockedURI(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "blockedURI");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "blockedURI");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.blockedURI());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventViolatedDirective(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "violatedDirective");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "violatedDirective");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.violatedDirective());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventEffectiveDirective(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "effectiveDirective");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "effectiveDirective");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.effectiveDirective());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventOriginalPolicy(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "originalPolicy");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "originalPolicy");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.originalPolicy());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventSourceFile(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "sourceFile");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "sourceFile");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.sourceFile());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventLineNumber(ExecState* exec, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSSecurityPolicyViolationEvent* castedThis = jsDynamicCast<JSSecurityPolicyViolationEvent*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(slotBase))
            return reportDeprecatedGetterError(*exec, "SecurityPolicyViolationEvent", "lineNumber");
        return throwGetterTypeError(*exec, "SecurityPolicyViolationEvent", "lineNumber");
    }
    auto& impl = castedThis->impl();
    JSValue result = jsNumber(impl.lineNumber());
    return JSValue::encode(result);
}


EncodedJSValue jsSecurityPolicyViolationEventConstructor(ExecState* exec, JSObject* baseValue, EncodedJSValue, PropertyName)
{
    JSSecurityPolicyViolationEventPrototype* domObject = jsDynamicCast<JSSecurityPolicyViolationEventPrototype*>(baseValue);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSSecurityPolicyViolationEvent::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSSecurityPolicyViolationEvent::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSecurityPolicyViolationEventConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(CSP_NEXT)
