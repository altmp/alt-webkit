/*
 * Copyright (C) 2004, 2005, 2006 Apple Computer, Inc.  All rights reserved.
 * Copyright (C) 2011, 2012, 2014 Electronic Arts, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "BitmapImage.h"

#include <cairo/cairo.h>
#include <internal/include/EAWebKit_p.h>

namespace WebCore {
// The pixel data below can be obtained by using this helper routine. This routine is only for offline processing.
	/*
	void dumpPngPixels(const char* path)
	{
		cairo_surface_t* pngSurface = cairo_image_surface_create_from_png(path);
		int width = cairo_image_surface_get_width(pngSurface);
		int height = cairo_image_surface_get_height(pngSurface);
		int stride = cairo_image_surface_get_stride(pngSurface);
		unsigned char* pixelData = cairo_image_surface_get_data(pngSurface);
		eastl::string pixels;
		for (y=0; y<height; y++) {
			unsigned char *row = pixelData + y * stride;
			for (x=0; x<width; x++) {
				uint32_t* pixel = (uint32_t*)(row+(x*4));
				pixels.append_sprintf("0x%x, ",pixel[0]);
			}
		}
		EA::WebKit::DebugLogCallback(pixels,false);
	}
	*/
static const int kMissingImageDim				= 16; 
static const int kSearchCancelImageDim			= 28;
static const int kSearchCancelPressedImageDim	= 28;
static const int kSearchMagnifierImageDim		= 30;

const int missingImagePixels[] = {
	0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff94b1d4, 0xff92afd4, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff92afd4, 0xff90aed3, 0xffffffff, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xff2f8cca, 0xffffffff, 0xff90aed3, 0xff8dacd2, 0xffffffff, 0xff2e8ac9, 0xff2e8ac9, 0xff2e8ac9, 0xff2c86c6, 0xff2c86c6, 0xff2c85c5, 0xff2c85c5, 0xff2c85c5, 0xff2c86c6, 0xff2e89c8, 0xff2e8ac9, 0xff2e8ac9, 0xffffffff, 0xff8dacd2, 0xff8aaad0, 0xffffffff, 0xff2d88c7, 0xff2d88c7, 0xff2b84c4, 0xff2a81c2, 0xff8ebde0, 0xff8ebde0, 0xffb9d6ec, 0xff9cc6e3, 0xff4692ca, 0xff2a81c2, 0xff2d88c7, 0xff2d88c7, 0xffffffff, 0xff8aaad0, 0xff87a7cf, 0xffffffff, 0xff2c86c5, 0xff2c86c5, 0xff2a83c2, 0xff8dbcde, 0xffe3eff7, 0xff2980c0, 0xff4691c8, 0xffffffff, 0xffe3eff7, 0xff297fc0, 0xff2c86c5, 0xff2c86c5, 0xffffffff, 0xff87a7cf, 0xff84a5ce, 0xffffffff, 0xff2b83c3, 0xff2b83c3, 0xff2a80c1, 0xff5498cc, 0xff8dbbdd, 0xff287dbf, 0xff3686c2, 0xffffffff, 0xfff1f7fb, 0xff287dbe, 0xff2b83c3, 0xff2b83c3, 0xffffffff, 0xff84a5ce, 0xff80a2cc, 0xffffffff, 0xff2a80c1, 0xff2a80c1, 0xff297fc0, 0xff297dbf, 0xff297dbf, 0xff287dbe, 0xff9bc2e1, 0xffc6ddee, 0xff5395ca, 0xff277abd, 0xff2a80c1, 0xff2a80c1, 0xffffffff, 0xff80a2cc, 0xff7da0cb, 0xffffffff, 0xff287dbf, 0xff287dbf, 0xff287dbf, 0xff287dbf, 0xff277cbe, 0xff5295ca, 0xff8cb8dc, 0xff2679bc, 0xff2679bc, 0xff277cbe, 0xff287dbf, 0xff287dbf, 0xffffffff, 0xff7da0cb, 0xff7a9eca, 0xffffffff, 0xff277abd, 0xff277abd, 0xff277abd, 0xff277abd, 0xff2576ba, 0xff347fbf, 0xff347fbf, 0xff2576ba, 0xff277abd, 0xff277abd, 0xff277abd, 0xff277abd, 0xffffffff, 0xff7a9eca, 0xff769bc8, 0xffffffff, 0xff2577ba, 0xff2577ba, 0xff2577ba, 0xff2577ba, 0xff2373b7, 0xffd3e4f1, 0xffd3e4f1, 0xff2373b7, 0xff2577ba, 0xff2577ba, 0xff2577ba, 0xff2577ba, 0xffffffff, 0xff769bc8, 0xff7399c7, 0xffffffff, 0xff2474b8, 0xff2474b8, 0xff2474b8, 0xff2474b8, 0xff2270b5, 0xffd3e3f1, 0xffd3e3f1, 0xff2270b5, 0xff2474b8, 0xff2474b8, 0xff2474b8, 0xff2474b8, 0xffffffff, 0xff7399c7, 0xff7096c6, 0xffffffff, 0xff2372b7, 0xff2372b7, 0xff2372b7, 0xff2372b7, 0xff216fb4, 0xff216fb4, 0xff216fb4, 0xff216fb4, 0xff2372b7, 0xff2372b7, 0xff2372b7, 0xff2372b7, 0xffffffff, 0xff7096c6, 0xff6d94c4, 0xffffffff, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xff2270b5, 0xffffffff, 0xff6d94c4, 0xff6a92c3, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff6a92c3, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2, 0xff6890c2 
	};
const int searchCancelImagePixels[] = {
	0x0, 0x0, 0x0, 0x0, 0x5a162b42, 0x300b1724, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x300b1724, 0x5d162d45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5d172c44, 0xfc3d78b9, 0xea396fad, 0x300c1723, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x300c1723, 0xea396fad, 0xfc3d78ba, 0x5d172c45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5715293f, 0xfc3e76b8, 0xff3f77ba, 0xff3f77bb, 0xea3a6dac, 0x2d0b1521, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d0b1521, 0xea3a6eac, 0xff3f78bb, 0xff3f77bb, 0xfc3e76b9, 0x57152940, 0x0, 0x0, 0x0, 0x5415273d, 0xfc3e74b7, 0xff3f75b9, 0xff3f75b9, 0xff3f75ba, 0xff3f75ba, 0xea3a6bab, 0x2d0b1521, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d0b1521, 0xea3a6cab, 0xff3f76ba, 0xff3f76ba, 0xff3f75ba, 0xff3f75ba, 0xfc3e74b8, 0x5415273d, 0x0, 0x45111f32, 0xf93e71b4, 0xff3f73b8, 0xff3f73b8, 0xff3f73b8, 0xff3f72b9, 0xff3f72b9, 0xff3f72b9, 0xea3a6aaa, 0x2a0a131e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a0a131e, 0xea3a6aaa, 0xff3f74b9, 0xff3f74b9, 0xff3f74b9, 0xff3f73b9, 0xff3f73b9, 0xff3f73b9, 0xf93e70b5, 0x45111f32, 0xf04070b, 0xc9325a90, 0xff3f72b7, 0xff3f72b7, 0xff3f72b7, 0xff3f71b8, 0xff3f71b8, 0xff3f71b8, 0xff3f71b8, 0xea3a68a9, 0x2a0a131e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a0a131e, 0xea3a68a9, 0xff3f71b8, 0xff3f72b8, 0xff3f72b8, 0xff3f72b8, 0xff3f72b8, 0xff3f72b8, 0xff3f72b8, 0xc9325a91, 0xf04070b, 0x0, 0xf04070b, 0xcc325a92, 0xff3f70b6, 0xff3f70b6, 0xff3f6fb6, 0xff3f6fb6, 0xff3f6fb6, 0xff3f6fb6, 0xff3f6fb6, 0xe73965a5, 0x2a0a121e, 0x0, 0x0, 0x0, 0x0, 0x270a111c, 0xe73965a5, 0xff3f6fb6, 0xff3f6fb6, 0xff3f70b6, 0xff3f70b6, 0xff3f70b6, 0xff3f70b6, 0xff3f70b6, 0xcc325a92, 0xf04070b, 0x0, 0x0, 0x0, 0xf04060b, 0xcc325890, 0xff3f6eb4, 0xff3f6db4, 0xff3f6db4, 0xff3f6db4, 0xff3f6db4, 0xff3f6db4, 0xff3f6db4, 0xe73963a3, 0x270a111c, 0x0, 0x0, 0x270a111c, 0xe73962a3, 0xff3f6cb4, 0xff3f6cb4, 0xff3f6db3, 0xff3f6eb3, 0xff3f6eb3, 0xff3f6eb3, 0xff3f6db3, 0xcc32578f, 0xf04060b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1204080d, 0xcc32568e, 0xff3f6bb2, 0xff3f6bb2, 0xff3f6bb2, 0xff3e6bb2, 0xff3e6bb2, 0xff3e6bb2, 0xff3e6bb2, 0xe73961a1, 0x270a101b, 0x270a101b, 0xe438609f, 0xff3e6bb2, 0xff3e6bb2, 0xff3e6bb2, 0xff3f6bb1, 0xff3f6cb1, 0xff3f6cb1, 0xff3f6cb1, 0xcf325790, 0x1204080c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1204070c, 0xcf33568f, 0xff3f6ab0, 0xff3f6ab0, 0xff3e6ab0, 0xff3e6ab0, 0xff3e6ab0, 0xff3e6ab0, 0xff3f6ab0, 0xe4385f9d, 0xe4385f9d, 0xff3f6ab0, 0xff3e69b0, 0xff3e69b0, 0xff3e69b0, 0xff3f6aaf, 0xff3f6aaf, 0xff3f6aaf, 0xcf33568e, 0x1204070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1505090e, 0xcf32548c, 0xff3e68ad, 0xff3d68ad, 0xff3d68ad, 0xff3d68ad, 0xff3d68ad, 0xff3e67ad, 0xff3e67ad, 0xff3e67ad, 0xff3e67ad, 0xff3d67ad, 0xff3d67ad, 0xff3d67ad, 0xff3e68ac, 0xff3e68ac, 0xcf32548c, 0x1505090e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1505080e, 0xd232538c, 0xff3c65aa, 0xff3c65a9, 0xff3c65a9, 0xff3c65a9, 0xff3d64a9, 0xff3d64a9, 0xff3d64a9, 0xff3d64a9, 0xff3c64a9, 0xff3c64a9, 0xff3c64a9, 0xff3d65a9, 0xd232538b, 0x1505080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1505080e, 0xd231528a, 0xff3b63a6, 0xff3b63a6, 0xff3b63a6, 0xff3c63a6, 0xff3c63a6, 0xff3c63a6, 0xff3c63a6, 0xff3b63a6, 0xff3b63a6, 0xff3b63a6, 0xd231528a, 0x1505080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1505080e, 0xd5305188, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xd5305188, 0x1505080d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e070b13, 0xe131528b, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xff385d9d, 0xe131528b, 0x1e060b13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e060b12, 0xe1305088, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xff365b9a, 0xe12f5088, 0x1e060b12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b060910, 0xde2d4d83, 0xff355897, 0xff355896, 0xff355896, 0xff355896, 0xff345896, 0xff345896, 0xff345896, 0xff345896, 0xff355896, 0xff355896, 0xff355896, 0xff345897, 0xde2d4d83, 0x1e060a12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b05090f, 0xde2c4a7e, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xff325591, 0xde2c4a7e, 0x1b05090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b05090f, 0xdb294678, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xdb294678, 0xdb294678, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xff30528c, 0xdb294678, 0x1b05090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b05080e, 0xdb284575, 0xff2e5089, 0xff2e5089, 0xff2e5089, 0xff2e5089, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xdb284475, 0x1b05080e, 0x1b05080e, 0xdb284475, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xff2e5088, 0xdb284676, 0x1b05090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b05080e, 0xd8264271, 0xff2d4e85, 0xff2d4e85, 0xff2d4e85, 0xff2d4e85, 0xff2d4e85, 0xff2d4e84, 0xff2d4e84, 0xde274473, 0x1b05080e, 0x0, 0x0, 0x1b05080e, 0xde264473, 0xff2c4e84, 0xff2c4e84, 0xff2c4e84, 0xff2c4e84, 0xff2c4e84, 0xff2c4e84, 0xff2c4e85, 0xd8254271, 0x1b05080e, 0x0, 0x0, 0x0, 0x1804070c, 0xd824406c, 0xff2a4b80, 0xff2a4b80, 0xff2a4b80, 0xff2a4b80, 0xff2a4b80, 0xff2a4b80, 0xff2a4b7f, 0xde25416f, 0x1b04080d, 0x0, 0x0, 0x0, 0x0, 0x1b04080d, 0xde25416f, 0xff2a4b7f, 0xff2a4b7f, 0xff2a4b7f, 0xff2a4b7f, 0xff2a4b7f, 0xff2a4b80, 0xff2a4b80, 0xd824406c, 0x1804070c, 0x0, 0x1804070c, 0xd8223d68, 0xff28487c, 0xff28487c, 0xff28487c, 0xff28487c, 0xff28487c, 0xff28487c, 0xff28487c, 0xde233f6b, 0x1e05080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e05080e, 0xde233f6b, 0xff28487b, 0xff28487b, 0xff28487b, 0xff28487b, 0xff28487c, 0xff28487c, 0xff28487c, 0xd8223d69, 0x1804070c, 0x1b04070d, 0xdb213c67, 0xff264679, 0xff264679, 0xff264679, 0xff264779, 0xff264779, 0xff264779, 0xe1223f6b, 0x1e04080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e05080e, 0xe1223f69, 0xff274777, 0xff274777, 0xff274777, 0xff274779, 0xff274779, 0xff274779, 0xdb213c68, 0x1b04070d, 0x0, 0x1b04070c, 0xde1f3a66, 0xff244375, 0xff244375, 0xff244475, 0xff244475, 0xe1203c67, 0x1e04080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e04080e, 0xe1213c66, 0xff254474, 0xff254474, 0xff254475, 0xff254475, 0xde203b66, 0x1b04070c, 0x0, 0x0, 0x0, 0x1e04080d, 0xe11e3963, 0xff224170, 0xff224270, 0xe41e3b64, 0x2104090e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2105090e, 0xe11f3a63, 0xff234270, 0xff234270, 0xe11f3a63, 0x1e04080d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2104080e, 0xe11d3861, 0xe41e3962, 0x2104080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2104080e, 0xe41e3961, 0xe41e3962, 0x2104080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2104080e, 0x2405090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2104080e, 0x2405090f, 0x0, 0x0, 0x0, 0x0 
};
const int searchCancelPressedImagePixels[] = {
	0x0, 0x0, 0x0, 0x0, 0x5a112337, 0x3009131d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3009121d, 0x5d122439, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5d122338, 0xfc316098, 0xea2e598e, 0x3009121d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3009121d, 0xea2e598e, 0xfc316099, 0x5d122339, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57112034, 0xfc325e97, 0xff335f99, 0xff335f9a, 0xea2f578d, 0x2d09111b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d09111b, 0xea2f588d, 0xff33609a, 0xff335f9a, 0xfc325e98, 0x57112035, 0x0, 0x0, 0x0, 0x54111f32, 0xfc325d96, 0xff335e98, 0xff335e98, 0xff335e99, 0xff335e99, 0xea2f568c, 0x2d09111b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d09111b, 0xea2f578c, 0xff335f99, 0xff335f99, 0xff335e99, 0xff335e99, 0xfc325d97, 0x54111f32, 0x0, 0x450e1929, 0xf9325b93, 0xff335c97, 0xff335c97, 0xff335c97, 0xff335b98, 0xff335b98, 0xff335b98, 0xea2f548b, 0x2a080f19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a080f19, 0xea2f548b, 0xff335d98, 0xff335d98, 0xff335d98, 0xff335c98, 0xff335c98, 0xff335c98, 0xf9325a94, 0x450e1929, 0xf030509, 0xc9284876, 0xff335b96, 0xff335b96, 0xff335b96, 0xff335b97, 0xff335b97, 0xff335b97, 0xff335b97, 0xea2f548b, 0x2a080f19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a080f19, 0xea2f548b, 0xff335b97, 0xff335b97, 0xff335b97, 0xff335b97, 0xff335b97, 0xff335b97, 0xff335b97, 0xc9284877, 0xf030509, 0x0, 0xf030509, 0xcc294877, 0xff335a95, 0xff335a95, 0xff335995, 0xff335995, 0xff335995, 0xff335995, 0xff335995, 0xe72e5187, 0x2a080f19, 0x0, 0x0, 0x0, 0x0, 0x27080e17, 0xe72e5187, 0xff335995, 0xff335995, 0xff335a95, 0xff335a95, 0xff335a95, 0xff335a95, 0xff335a95, 0xcc294877, 0xf030509, 0x0, 0x0, 0x0, 0xf030509, 0xcc294676, 0xff335894, 0xff335794, 0xff335794, 0xff335794, 0xff335794, 0xff335794, 0xff335794, 0xe72e4f86, 0x27080d17, 0x0, 0x0, 0x27080d17, 0xe72e4f86, 0xff335794, 0xff335794, 0xff335793, 0xff335893, 0xff335893, 0xff335893, 0xff335793, 0xcc294676, 0xf030509, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1204060a, 0xcc294675, 0xff335692, 0xff335692, 0xff335692, 0xff325692, 0xff325692, 0xff325692, 0xff325692, 0xe72e4e84, 0x27080d16, 0x27080d16, 0xe42e4d83, 0xff325692, 0xff325692, 0xff325692, 0xff335691, 0xff335791, 0xff335791, 0xff335791, 0xcf294676, 0x1204060a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1204060a, 0xcf294575, 0xff335590, 0xff335590, 0xff325590, 0xff325590, 0xff325590, 0xff325590, 0xff335590, 0xe42e4c81, 0xe42e4c81, 0xff335590, 0xff325490, 0xff325490, 0xff325490, 0xff33558f, 0xff33558f, 0xff33558f, 0xcf294574, 0x1204060a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1504070c, 0xcf294372, 0xff32538d, 0xff31538d, 0xff31538d, 0xff31538d, 0xff31538d, 0xff32538d, 0xff32538d, 0xff32538d, 0xff32538d, 0xff31538d, 0xff31538d, 0xff31538d, 0xff32538c, 0xff32538c, 0xcf294372, 0x1504070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1504070b, 0xd2284372, 0xff30518a, 0xff305189, 0xff305189, 0xff305189, 0xff315089, 0xff315089, 0xff315089, 0xff315089, 0xff305089, 0xff305089, 0xff305089, 0xff315189, 0xd2284371, 0x1504070b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1504070b, 0xd2274170, 0xff2f4f87, 0xff2f4f87, 0xff2f4f87, 0xff304f87, 0xff304f87, 0xff304f87, 0xff304f87, 0xff2f4f87, 0xff2f4f87, 0xff2f4f87, 0xd2274170, 0x1504070b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1504060b, 0xd527416e, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xff2f4e84, 0xd527416e, 0x1504060b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e05090f, 0xe1284270, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xff2d4b7f, 0xe1284270, 0x1e05090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e05090f, 0xe126406d, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xff2b497c, 0xe126406d, 0x1e05090f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b04080d, 0xde253e6a, 0xff2b477a, 0xff2b4779, 0xff2b4779, 0xff2b4779, 0xff2a4779, 0xff2a4779, 0xff2a4779, 0xff2a4779, 0xff2b4779, 0xff2b4779, 0xff2b4779, 0xff2a477a, 0xde253e6a, 0x1e05080e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b04070c, 0xde233b66, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xff284475, 0xde233b66, 0x1b04070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b04070c, 0xdb213960, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xdb213960, 0xdb213960, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xff264270, 0xdb213960, 0x1b04070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b04070c, 0xdb20375e, 0xff25406e, 0xff25406e, 0xff25406e, 0xff25406e, 0xff25406d, 0xff25406d, 0xff25406d, 0xdb20365e, 0x1b04070c, 0x1b04070c, 0xdb20365e, 0xff25406d, 0xff25406d, 0xff25406d, 0xff25406d, 0xff25406d, 0xff25406d, 0xff25406d, 0xdb20385e, 0x1b04070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b04070b, 0xd81e355b, 0xff243f6b, 0xff243f6b, 0xff243f6b, 0xff243f6b, 0xff243f6b, 0xff243f6a, 0xff243f6a, 0xde1f375c, 0x1b04070b, 0x0, 0x0, 0x1b04070b, 0xde1e375c, 0xff233f6a, 0xff233f6a, 0xff233f6a, 0xff233f6a, 0xff233f6a, 0xff233f6a, 0xff233f6b, 0xd81e355b, 0x1b04070b, 0x0, 0x0, 0x0, 0x1803060a, 0xd81d3357, 0xff223c67, 0xff223c67, 0xff223c67, 0xff223c67, 0xff223c67, 0xff223c67, 0xff223c66, 0xde1e3459, 0x1b04060b, 0x0, 0x0, 0x0, 0x0, 0x1b04060b, 0xde1e3459, 0xff223c66, 0xff223c66, 0xff223c66, 0xff223c66, 0xff223c66, 0xff223c67, 0xff223c67, 0xd81d3357, 0x1803060a, 0x0, 0x18030509, 0xd81b3154, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xde1c3256, 0x1e04070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e04070c, 0xde1c3256, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xff203a63, 0xd81b3154, 0x18030509, 0x1b03060a, 0xdb1b3052, 0xff1e3861, 0xff1e3861, 0xff1e3861, 0xff1e3961, 0xff1e3961, 0xff1e3961, 0xe11a3256, 0x1e04070b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e04070b, 0xe11b3254, 0xff1f395f, 0xff1f395f, 0xff1f395f, 0xff1f3961, 0xff1f3961, 0xff1f3961, 0xdb1a3053, 0x1b03060a, 0x0, 0x1b03060a, 0xde192f52, 0xff1d365e, 0xff1d365e, 0xff1d375e, 0xff1d375e, 0xe11a3153, 0x1e03060b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e04060b, 0xe11a3152, 0xff1e375d, 0xff1e375d, 0xff1e375e, 0xff1e375e, 0xde1a3052, 0x1b03060a, 0x0, 0x0, 0x0, 0x1e03060b, 0xe1182e4f, 0xff1b345a, 0xff1b355a, 0xe4182f50, 0x2103070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2104070c, 0xe1192f4f, 0xff1c355a, 0xff1c355a, 0xe1192f4f, 0x1e03060b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2103070b, 0xe1172d4e, 0xe4172e4f, 0x2103070b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2103070b, 0xe4182e4e, 0xe4182e4f, 0x2103070b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2103070b, 0x2404070c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2103070b, 0x2404070c, 0x0, 0x0, 0x0, 0x0
};
const int searchMagnifierImagePixels[] = {
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a091720, 0x330b1b27, 0x390c1f2b, 0x330b1b27, 0xf03080b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2408131b, 0x96205172, 0xe7317caf, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xfc3587bf, 0xb727628b, 0x60143449, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6010305, 0x901e4d6d, 0xfc3587bf, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xff3689c1, 0xcf2c6f9d, 0x360b1d29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15040b10, 0xc62a6a96, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xff3688c0, 0xff3688c0, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xff3688c1, 0xf63483ba, 0x54122d40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6010305, 0xc3296793, 0xff3687c0, 0xff3687c0, 0xff3687c0, 0xff3687c0, 0xff3687c0, 0xf93684bb, 0xc62b6994, 0xb1265e85, 0xe43179ac, 0xff3787c0, 0xff3787c0, 0xff3787c0, 0xff3787c0, 0xff3787c0, 0xf93683bb, 0x3f0e212f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x901f4b6c, 0xff3785c0, 0xff3785c0, 0xff3785c0, 0xff3785c0, 0xde3074a7, 0x4b102738, 0x0, 0x0, 0x0, 0x0, 0x18050d12, 0xa524567c, 0xff3885c0, 0xff3885c0, 0xff3885c0, 0xff3884c0, 0xea3379b0, 0x1204090e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2408121b, 0xf93780bb, 0xff3883c0, 0xff3883c0, 0xff3883c0, 0xab265881, 0xc030609, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51122a3d, 0xf6387fb9, 0xff3a84c0, 0xff3a83bf, 0xff3983bf, 0x8d20486a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x96224c70, 0xff3a81bf, 0xff3a81bf, 0xff3a81bf, 0xc62d6494, 0x6010304, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6317324a, 0xff3b81bf, 0xff3b81be, 0xff3a81be, 0xf6387cb7, 0x9020507, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe13470a8, 0xff3b7fbe, 0xff3b7fbe, 0xff3b7fbe, 0x3f0f1f2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc306698, 0xff3c7fbe, 0xff3b7fbe, 0xff3b7fbe, 0x57142b41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2709131d, 0xff3c7ebe, 0xff3c7ebe, 0xff3c7ebe, 0xe1356fa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6919334e, 0xff3c7ebe, 0xff3c7ebe, 0xff3c7ebe, 0x9022476b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x45112133, 0xff3e7bbc, 0xff3e7bbc, 0xff3e7bbc, 0xab2a527e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0e1d2c, 0xff3d7bbc, 0xff3e7bbc, 0xff3e7bbc, 0xab2a527e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4b122337, 0xff3e78bc, 0xff3e78bc, 0xff3e78bc, 0x99254871, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x300c1723, 0xff3e78bb, 0xff3e78bb, 0xff3e78bb, 0xb72c5687, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0f1c2c, 0xff3f75ba, 0xff3f75ba, 0xff3f75ba, 0xb72d5485, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48122135, 0xff3f75b9, 0xff3f75b9, 0xff3f75b9, 0x9f274a74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1204080d, 0xfc3e71b6, 0xff3f72b8, 0xff3f72b8, 0xf63d6eb2, 0x9020406, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x87213c61, 0xff3f72b8, 0xff3f73b8, 0xff3f73b8, 0x81203a5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc330568c, 0xff3f70b7, 0xff3f70b7, 0xff3f70b7, 0x6c1b2f4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf04070b, 0xed3b68aa, 0xff3f70b6, 0xff3f71b6, 0xff3f71b6, 0x3f101c2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f1b2f4e, 0xff3f6cb3, 0xff3f6cb3, 0xff3f6cb3, 0xf03b66a8, 0x270a111b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa82a4776, 0xff3f6cb3, 0xff3f6cb4, 0xff3f6db4, 0xdb365e9b, 0x3010102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6010204, 0xe4385f9d, 0xff3f6ab0, 0xff3f6ab0, 0xff3f6ab0, 0xe438609e, 0x48121e32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1505090e, 0xae2b4978, 0xff3e6ab1, 0xff3e6ab1, 0xff3e6ab1, 0xff3f6ab1, 0x5a16253e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4b121e33, 0xff3e67ac, 0xff3e67ac, 0xff3e67ac, 0xff3e68ad, 0xff3e68ad, 0x9f27416c, 0x45111c2f, 0x9020406, 0x0, 0x2709101a, 0x6c1a2c49, 0xea395f9e, 0xff3e68ac, 0xff3d67ad, 0xff3d67ad, 0xff3d67ad, 0xff3e67ad, 0x96243d66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x781c2f4f, 0xff3c64a7, 0xff3c64a7, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a7, 0xff3c64a7, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0xff3c64a8, 0x99243c65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c192945, 0xfc3960a1, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a4, 0xff3961a4, 0xff3961a4, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0xff3a61a3, 0x9f243c66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x360c1321, 0xc32a4677, 0xff375c9c, 0xff375c9c, 0xff375c9c, 0xff375c9c, 0xff375d9c, 0xff375d9c, 0xff375d9d, 0xff365c9d, 0xe731538e, 0x48101a2c, 0x9921375e, 0xff375c9c, 0xff375c9c, 0xff375c9c, 0xff375c9c, 0xff375c9c, 0x9f223962, 0x3010102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x390c1422, 0x841b2f4e, 0xc92a4677, 0xd52c4a7e, 0xed31548c, 0xcc2a4879, 0xae243d67, 0x5a121f36, 0x1204060b, 0x0, 0x0, 0x931f3357, 0xff355997, 0xff355997, 0xff355997, 0xff355997, 0xff355997, 0xa2223960, 0x3010102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x931d3053, 0xff325490, 0xff325490, 0xff325490, 0xff325490, 0xff325490, 0xa520365d, 0x3010102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8d1a2c4c, 0xff2f5189, 0xff2f5189, 0xff2f518a, 0xff2f518a, 0xff2f518a, 0xa81f355a, 0x3010102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a182a47, 0xff2c4e84, 0xff2c4e85, 0xff2c4e85, 0xff2c4e85, 0xff2c4e85, 0xab1e3459, 0x6010203, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x84152641, 0xff29497d, 0xff29497d, 0xff29497d, 0xff29497d, 0xff29497d, 0xab1b3153, 0x6010203, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8414253f, 0xff264779, 0xff264779, 0xff264679, 0xff264679, 0xff274677, 0x450b1320, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e112139, 0xff234373, 0xff234273, 0xff234273, 0x630e1a2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b101f35, 0xff21406e, 0x6f0e1c30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x36070d17, 0x0, 0x0, 0x0 
};

void BitmapImage::invalidatePlatformData()
{
}

static PassRefPtr<BitmapImage> createImage(unsigned char *pixelData, int dim)
{
	// Implement this function if we use plugin system.
	RefPtr<BitmapImage> img = 0;
	cairo_surface_t *pSurface = cairo_image_surface_create_for_data(&pixelData[0], CAIRO_FORMAT_ARGB32, 
		dim, dim, dim * sizeof(uint32_t));
	img = BitmapImage::create(cairo_surface_reference(pSurface));    // BitmapImage will release the passed in surface on destruction.
	cairo_surface_destroy(pSurface);								 // BitmapImage now holds the only ref.

	return img.release();
}

PassRefPtr<Image> Image::loadPlatformResource(const char *name)
{
    if (strcmp(name,"missingImage") == 0)
    {
	   return createImage((unsigned char*)&missingImagePixels[0],kMissingImageDim);
    }
    else if (strcmp(name, "searchCancel") == 0)
    {
		return createImage((unsigned char*)&searchCancelImagePixels[0],kSearchCancelImageDim);
    }
    else if (strcmp(name, "searchCancelPressed") == 0)
    {
		return createImage((unsigned char*)&searchCancelPressedImagePixels[0],kSearchCancelPressedImageDim);
    }
	else if (strcmp(name,"searchMagnifier") == 0)
	{
		return createImage((unsigned char*)&searchMagnifierImagePixels[0],kSearchMagnifierImageDim);
	}

    RefPtr<BitmapImage> img = BitmapImage::create();
    return img.release();
}

#if 0
PassRefPtr<BitmapImage> BitmapImage::create(HBITMAP hBitmap)
{
    // Implement this function if we use plugin system.
    RefPtr<BitmapImage> img = BitmapImage::create();
    return img.release();
}
#endif
}

