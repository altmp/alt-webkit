<?xml version="1.0" encoding="utf-8"?>
<project name="EASTLEAWebKit" default="build">

    <property name="Dll" value="false" unless="@{PropertyExists('Dll')}" />

    


    <!-- Package declaration -->
    <!-- Get the version number from current directory -->
    <property name="currDir"  value="@{PathGetFullPath('.')}"/>
    <property name="currVer"  value="@{PathGetFileName('${currDir}')}"/>
    <package  name="EASTLEAWebKit" targetversion="${currVer}"/>


    <!-- Options -->
    <!-- To enable options put (e.g.) <globalproperties>EASTL.EASTL_ABSTRACT_STRING_ENABLED=1</globalproperties> -->
    <!-- in your masterconfig file or use -D:EASTL_ABSTRACT_STRING_ENABLED=1 on the nant command line.           -->
    <!-- The EASTL.EASTL_XXX values here directly correspond to EACallstack config #defines.                     --> 
    <property name="EATECH_WARNINGSASERRORS" value="0" unless="@{PropertyExists('EATECH_WARNINGSASERRORS')}" />
    <property name="EASTLConfigDefines" />

    <property name="EASTL.configDefines">
        EASTL_DEBUG
        EASTL_DEV_DEBUG
        EASTL_USER_CONFIG_HEADER
        EASTL_NAME_ENABLED
        EASTL_DEFAULT_NAME_PREFIX
        EASTL_ASSERT_ENABLED
        EASTL_DEV_ASSERT_ENABLED
        EASTL_ASSERT
        EASTL_DEV_ASSERT
        EASTL_DEBUG_BREAK
        EASTL_ALLOCATOR_COPY_ENABLED
        EASTL_FIXED_SIZE_TRACKING_ENABLED
        EASTL_EXCEPTIONS_ENABLED
        EASTL_ABSTRACT_STRING_ENABLED
        EASTL_LIST_SIZE_CACHE
        EASTL_SLIST_SIZE_CACHE
        EASTL_MAX_STACK_USAGE
        EASTL_VALIDATION_ENABLED
        EASTL_VALIDATE_COMPARE_ENABLED
        EASTL_VALIDATE_INTRUSIVE_LIST
        EASTL_RESET_ENABLED
        EASTL_MINMAX_ENABLED
        EASTL_ALLOCATOR_EXPLICIT_ENABLED
        EASTL_STD_ITERATOR_CATEGORY_ENABLED
        EASTL_SIZE_T_32BIT
    </property>

    <foreach item="String" in="${EASTL.configDefines}" property="configDefine">
        <property name="EASTLConfigDefines" if="@{PropertyExists('EASTL.${configDefine}')}">
            ${property.value}
            ${configDefine}=${EASTL.${configDefine}}
        </property>
    </foreach>


    <!-- Create extra build types which simply add some additional compiler arguments -->
    <optionset name="config-options-library-extra" fromoptionset="config-options-library">
        <option name="buildset.name" value="LibraryExtra" />
        <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
        <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
    </optionset>
    <task name="GenerateBuildOptionset" configsetname="config-options-library-extra" />
    <optionset name="LibraryExtra">
        <option name="cc.options" if="${config-compiler} == 'gcc'">          
            @{StrReplace(${option.value}, '-fno-strict-aliasing', '-fstrict-aliasing')}
        </option>
        <option name="cc.options" if="${config-compiler} == 'mw'">
            @{StrReplace(@{StrReplace(${option.value}, '-w nofilecaps', '-w filecaps')}, '-w nosysfilecaps', '-w sysfilecaps')}
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            ${option.value}
            -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
            -Xquit=2             <!-- Set it so that even remarks are considered errors. -->

            --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
            --diag_suppress=178  <!-- variable was declared but never referenced -->
            --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
            --diag_suppress=403  <!-- destructor for base class is not virtual. -->
            --diag_suppress=481  <!-- function redeclared "inline" after being called -->
            --diag_suppress=562  <!-- dynamic_cast" is reserved for future use as a keyword -->
            --diag_suppress=833  <!-- support for placement delete is disabled. -->
            --diag_suppress=1236 <!-- invalid error number -->
            --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
            --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
            --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
            --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
            --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xdiag=1', '')} <!-- Remove any -Xdiag=1 present, as we already have -Xdiag=2 -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xquit=1', '')} <!-- Remove any -Xquit=1 present, as we already have -Xquit=2 -->
        </option>
    </optionset>

    <optionset name="config-options-program-extra" fromoptionset="config-options-program">
        <option name="buildset.name" value="ProgramExtra" />
        <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
        <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
    </optionset>
    <task name="GenerateBuildOptionset" configsetname="config-options-program-extra" />
    <optionset name="ProgramExtra">
        <option name="cc.options" if="${config-compiler} == 'gcc' and ${config-system} == 'ps3'"> <!-- GCC 4.4 generates troublesome strict aliasing warnings. -->
            @{StrReplace(${option.value}, '-fno-strict-aliasing', '-fstrict-aliasing')}
        </option>
        <option name="cc.options" if="${config-compiler} == 'mw'">
            @{StrReplace(@{StrReplace(${option.value}, '-w nofilecaps', '-w filecaps')}, '-w nosysfilecaps', '-w sysfilecaps')}
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            ${option.value}
            -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
            -Xquit=2             <!-- Set it so that even remarks are considered errors. -->

            --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
            --diag_suppress=178  <!-- variable was declared but never referenced -->
            --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
            --diag_suppress=403  <!-- destructor for base class is not virtual. -->
            --diag_suppress=481  <!-- function redeclared "inline" after being called -->
            --diag_suppress=562  <!-- dynamic_cast" is reserved for future use as a keyword -->
            --diag_suppress=833  <!-- support for placement delete is disabled. -->
            --diag_suppress=1236 <!-- invalid error number -->
            --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
            --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
            --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
            --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
            --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'intel'">
            ${option.value}
            /Qdiag-disable:279   <!-- controlling expression is constant -->
            /Qdiag-disable:869   <!-- parameter was never referenced -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xdiag=1', '')} <!-- Remove any -Xdiag=1 present, as we already have -Xdiag=2 -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xquit=1', '')} <!-- Remove any -Xquit=1 present, as we already have -Xquit=2 -->
        </option>
    </optionset>

    <optionset name="config-options-program-extra2" fromoptionset="config-options-program">
        <option name="buildset.name" value="ProgramExtra2" />
        <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
        <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
    </optionset>
    <task name="GenerateBuildOptionset" configsetname="config-options-program-extra2" />
    <optionset name="ProgramExtra2">
        <option name="cc.options" if="${config-compiler} == 'gcc' and ${config-system} == 'ps3'"> <!-- GCC 4.4 generates troublesome strict aliasing warnings. -->
            @{StrReplace(${option.value}, '-fno-strict-aliasing', '-fstrict-aliasing')}
        </option>
        <option name="cc.options" if="${config-compiler} == 'mw'">
            @{StrReplace(@{StrReplace(${option.value}, '-w nofilecaps', '-w filecaps')}, '-w nosysfilecaps', '-w sysfilecaps')}
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            ${option.value}
            -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
            -Xquit=2             <!-- Set it so that even remarks are considered errors. -->

            --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
            --diag_suppress=178  <!-- variable was declared but never referenced -->
            --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
            --diag_suppress=403  <!-- destructor for base class is not virtual. -->
            --diag_suppress=481  <!-- function redeclared "inline" after being called -->
            --diag_suppress=562  <!-- dynamic_cast" is reserved for future use as a keyword -->
            --diag_suppress=833  <!-- support for placement delete is disabled. -->
            --diag_suppress=1236 <!-- invalid error number -->
            --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
            --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
            --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
            --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
            --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'intel'">
            ${option.value}
            /Qdiag-disable:279   <!-- controlling expression is constant -->
            /Qdiag-disable:869   <!-- parameter was never referenced -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xdiag=1', '')} <!-- Remove any -Xdiag=1 present, as we already have -Xdiag=2 -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xquit=1', '')} <!-- Remove any -Xquit=1 present, as we already have -Xquit=2 -->
        </option>
    </optionset>




    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->

    <property name="runtime.buildmodules" value="${property.value} EASTLEAWebKit"/>
    
    <property name="runtime.EASTLEAWebKit.buildtype" value="LibraryExtra" />
    <property name="runtime.EASTLEAWebKit.buildtype" value="DynamicLibrary" if="${Dll}"/>

    <property name="runtime.EASTLEAWebKit.usedependencies">
        EABaseEAWebKit
    </property>

    <fileset name="runtime.EASTLEAWebKit.sourcefiles">
        <includes name="${package.dir}/source/*.cpp"/>
    </fileset>

    <fileset name="runtime.EASTLEAWebKit.bulkbuild.sourcefiles" fromfileset="runtime.EASTLEAWebKit.sourcefiles"/>

    <property name="runtime.EASTLEAWebKit.defines">
        ${property.value}
        ${EASTLConfigDefines}
    </property>

    <property name="runtime.EASTLEAWebKit.defines" if="${Dll} and ${config-compiler} == vc">
        ${property.value}
        ${EASTLConfigDefines}
        EASTL_API=__declspec(dllexport)
    </property>

    <property name="runtime.EASTLEAWebKit.warningsuppression" if="${config-compiler} == 'vc'">
        -wd4217     <!-- disable warning: "member template functions cannot be used for copy-assignment or copy-construction" -->
        -wd4530     <!-- disable warning: "C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc" -->
        -wd4619     <!-- disable warning: "#pragma warning : there is no warning number 'xxxx'"  MS being silly here -->
        -wd4548     <!-- disable warning: "expression before comma has no effect; expected expression with side-effect" -->
        -wd4738     <!-- disable warning: "storing 32-bit float result in memory, possible loss of performance" -->
    </property>

    <property name="runtime.EASTLEAWebKit.warningsuppression" if="${config-compiler} == 'gcc'">
        -Wstrict-aliasing=3
        -Wextra
    </property>


   


    

</project>




